import type { GraphQLClient } from 'graphql-request';
import type * as Dom from 'graphql-request/dist/types.dom';
import gql from 'graphql-tag';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  BigDecimal: string;
  BigInt: string;
  Bytes: string;
};

export type AaveDebtPosition = ExternalPosition & {
  __typename: 'AaveDebtPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  id: Scalars['ID'];
  type: ExternalPositionType;
  vault: Vault;
};


export type AaveDebtPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export type AaveDebtPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'AaveDebtPositionChange';
  aaveDebtPositionChangeType: AaveDebtPositionChangeType;
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  assetAmounts?: Maybe<Array<AssetAmount>>;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};


export type AaveDebtPositionChangeAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};

export enum AaveDebtPositionChangeType {
  ADDCOLLATERAL = 'AddCollateral',
  BORROW = 'Borrow',
  CLAIMREWARDS = 'ClaimRewards',
  REMOVECOLLATERAL = 'RemoveCollateral',
  REPAYBORROW = 'RepayBorrow'
}

export type AaveDebtPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  aaveDebtPositionChangeType?: InputMaybe<AaveDebtPositionChangeType>;
  aaveDebtPositionChangeType_in?: InputMaybe<Array<AaveDebtPositionChangeType>>;
  aaveDebtPositionChangeType_not?: InputMaybe<AaveDebtPositionChangeType>;
  aaveDebtPositionChangeType_not_in?: InputMaybe<Array<AaveDebtPositionChangeType>>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<AaveDebtPositionChangeFilter>>>;
  assetAmounts?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_?: InputMaybe<AssetAmountFilter>;
  assetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AaveDebtPositionChangeFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AaveDebtPositionChangeOrderBy {
  AAVEDEBTPOSITIONCHANGETYPE = 'aaveDebtPositionChangeType',
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSETAMOUNTS = 'assetAmounts',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type AaveDebtPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<AaveDebtPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AaveDebtPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AaveDebtPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  ID = 'id',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type Account = {
  __typename: 'Account';
  assetManagements: Array<Vault>;
  assetManagerSince: Scalars['Int'];
  authUserSince: Scalars['Int'];
  authUserships: Array<Comptroller>;
  depositorActivity: Array<DepositorActivity>;
  depositorSince: Scalars['Int'];
  deposits: Array<Deposit>;
  gatedRedemptionQueueSharesWrapperManagements: Array<GatedRedemptionQueueSharesWrapper>;
  id: Scalars['ID'];
  isAssetManager: Scalars['Boolean'];
  isAuthUser: Scalars['Boolean'];
  isDepositor: Scalars['Boolean'];
  isOwner: Scalars['Boolean'];
  ownerSince: Scalars['Int'];
  ownershipNominations: Array<Vault>;
  ownerships: Array<Vault>;
  sharesChanges: Array<SharesChange>;
};


export type AccountAssetManagementsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VaultFilter>;
};


export type AccountAuthUsershipsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ComptrollerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ComptrollerFilter>;
};


export type AccountDepositorActivityArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositorActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DepositorActivityFilter>;
};


export type AccountDepositsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DepositFilter>;
};


export type AccountGatedRedemptionQueueSharesWrapperManagementsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
};


export type AccountOwnershipNominationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VaultFilter>;
};


export type AccountOwnershipsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VaultFilter>;
};


export type AccountSharesChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SharesChangeFilter>;
};

export type AccountFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AccountFilter>>>;
  assetManagements_?: InputMaybe<VaultFilter>;
  assetManagerSince?: InputMaybe<Scalars['Int']>;
  assetManagerSince_gt?: InputMaybe<Scalars['Int']>;
  assetManagerSince_gte?: InputMaybe<Scalars['Int']>;
  assetManagerSince_in?: InputMaybe<Array<Scalars['Int']>>;
  assetManagerSince_lt?: InputMaybe<Scalars['Int']>;
  assetManagerSince_lte?: InputMaybe<Scalars['Int']>;
  assetManagerSince_not?: InputMaybe<Scalars['Int']>;
  assetManagerSince_not_in?: InputMaybe<Array<Scalars['Int']>>;
  authUserSince?: InputMaybe<Scalars['Int']>;
  authUserSince_gt?: InputMaybe<Scalars['Int']>;
  authUserSince_gte?: InputMaybe<Scalars['Int']>;
  authUserSince_in?: InputMaybe<Array<Scalars['Int']>>;
  authUserSince_lt?: InputMaybe<Scalars['Int']>;
  authUserSince_lte?: InputMaybe<Scalars['Int']>;
  authUserSince_not?: InputMaybe<Scalars['Int']>;
  authUserSince_not_in?: InputMaybe<Array<Scalars['Int']>>;
  authUserships_?: InputMaybe<ComptrollerFilter>;
  depositorActivity_?: InputMaybe<DepositorActivityFilter>;
  depositorSince?: InputMaybe<Scalars['Int']>;
  depositorSince_gt?: InputMaybe<Scalars['Int']>;
  depositorSince_gte?: InputMaybe<Scalars['Int']>;
  depositorSince_in?: InputMaybe<Array<Scalars['Int']>>;
  depositorSince_lt?: InputMaybe<Scalars['Int']>;
  depositorSince_lte?: InputMaybe<Scalars['Int']>;
  depositorSince_not?: InputMaybe<Scalars['Int']>;
  depositorSince_not_in?: InputMaybe<Array<Scalars['Int']>>;
  deposits_?: InputMaybe<DepositFilter>;
  gatedRedemptionQueueSharesWrapperManagements_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isAssetManager?: InputMaybe<Scalars['Boolean']>;
  isAssetManager_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isAssetManager_not?: InputMaybe<Scalars['Boolean']>;
  isAssetManager_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isAuthUser?: InputMaybe<Scalars['Boolean']>;
  isAuthUser_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isAuthUser_not?: InputMaybe<Scalars['Boolean']>;
  isAuthUser_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isDepositor?: InputMaybe<Scalars['Boolean']>;
  isDepositor_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isDepositor_not?: InputMaybe<Scalars['Boolean']>;
  isDepositor_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isOwner?: InputMaybe<Scalars['Boolean']>;
  isOwner_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isOwner_not?: InputMaybe<Scalars['Boolean']>;
  isOwner_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  or?: InputMaybe<Array<InputMaybe<AccountFilter>>>;
  ownerSince?: InputMaybe<Scalars['Int']>;
  ownerSince_gt?: InputMaybe<Scalars['Int']>;
  ownerSince_gte?: InputMaybe<Scalars['Int']>;
  ownerSince_in?: InputMaybe<Array<Scalars['Int']>>;
  ownerSince_lt?: InputMaybe<Scalars['Int']>;
  ownerSince_lte?: InputMaybe<Scalars['Int']>;
  ownerSince_not?: InputMaybe<Scalars['Int']>;
  ownerSince_not_in?: InputMaybe<Array<Scalars['Int']>>;
  ownershipNominations_?: InputMaybe<VaultFilter>;
  ownerships_?: InputMaybe<VaultFilter>;
  sharesChanges_?: InputMaybe<SharesChangeFilter>;
};

export enum AccountOrderBy {
  ASSETMANAGEMENTS = 'assetManagements',
  ASSETMANAGERSINCE = 'assetManagerSince',
  AUTHUSERSINCE = 'authUserSince',
  AUTHUSERSHIPS = 'authUserships',
  DEPOSITORACTIVITY = 'depositorActivity',
  DEPOSITORSINCE = 'depositorSince',
  DEPOSITS = 'deposits',
  GATEDREDEMPTIONQUEUESHARESWRAPPERMANAGEMENTS = 'gatedRedemptionQueueSharesWrapperManagements',
  ID = 'id',
  ISASSETMANAGER = 'isAssetManager',
  ISAUTHUSER = 'isAuthUser',
  ISDEPOSITOR = 'isDepositor',
  ISOWNER = 'isOwner',
  OWNERSINCE = 'ownerSince',
  OWNERSHIPNOMINATIONS = 'ownershipNominations',
  OWNERSHIPS = 'ownerships',
  SHARESCHANGES = 'sharesChanges'
}

export type Activity = {
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
};

export enum ActivityCategory {
  DEPOSITOR = 'Depositor',
  NETWORK = 'Network',
  VAULT = 'Vault'
}

export enum ActivityType {
  DEPOSITORSHARES = 'DepositorShares',
  FEESHARES = 'FeeShares',
  NETWORKSETTINGS = 'NetworkSettings',
  PROTOCOLFEE = 'ProtocolFee',
  TRADE = 'Trade',
  VAULTSETTINGS = 'VaultSettings'
}

export type ActivityFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<ActivityFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ActivityFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum ActivityOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  TIMESTAMP = 'timestamp'
}

export type AdapterBlacklistPolicy = Policy & {
  __typename: 'AdapterBlacklistPolicy';
  adapters: Array<Scalars['Bytes']>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type AdapterBlacklistPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  adapters?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_not?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  and?: InputMaybe<Array<InputMaybe<AdapterBlacklistPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AdapterBlacklistPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AdapterBlacklistPolicyOrderBy {
  ADAPTERS = 'adapters',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AdapterWhitelistPolicy = Policy & {
  __typename: 'AdapterWhitelistPolicy';
  adapters: Array<Scalars['Bytes']>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type AdapterWhitelistPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  adapters?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_not?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  adapters_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  and?: InputMaybe<Array<InputMaybe<AdapterWhitelistPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AdapterWhitelistPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AdapterWhitelistPolicyOrderBy {
  ADAPTERS = 'adapters',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AddressList = {
  __typename: 'AddressList';
  createdAt: Scalars['Int'];
  creator: Scalars['Bytes'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  items: Array<Scalars['Bytes']>;
  owner: Scalars['Bytes'];
  updateType: AddressListUpdateType;
  updatedAt: Scalars['Int'];
};

export enum AddressListUpdateType {
  ADDANDREMOVE = 'AddAndRemove',
  ADDONLY = 'AddOnly',
  NONE = 'None',
  REMOVEONLY = 'RemoveOnly'
}

export type AddressListFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AddressListFilter>>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  creator?: InputMaybe<Scalars['Bytes']>;
  creator_contains?: InputMaybe<Scalars['Bytes']>;
  creator_gt?: InputMaybe<Scalars['Bytes']>;
  creator_gte?: InputMaybe<Scalars['Bytes']>;
  creator_in?: InputMaybe<Array<Scalars['Bytes']>>;
  creator_lt?: InputMaybe<Scalars['Bytes']>;
  creator_lte?: InputMaybe<Scalars['Bytes']>;
  creator_not?: InputMaybe<Scalars['Bytes']>;
  creator_not_contains?: InputMaybe<Scalars['Bytes']>;
  creator_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  items?: InputMaybe<Array<Scalars['Bytes']>>;
  items_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  items_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  items_not?: InputMaybe<Array<Scalars['Bytes']>>;
  items_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  items_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  or?: InputMaybe<Array<InputMaybe<AddressListFilter>>>;
  owner?: InputMaybe<Scalars['Bytes']>;
  owner_contains?: InputMaybe<Scalars['Bytes']>;
  owner_gt?: InputMaybe<Scalars['Bytes']>;
  owner_gte?: InputMaybe<Scalars['Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['Bytes']>>;
  owner_lt?: InputMaybe<Scalars['Bytes']>;
  owner_lte?: InputMaybe<Scalars['Bytes']>;
  owner_not?: InputMaybe<Scalars['Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['Bytes']>;
  owner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  updateType?: InputMaybe<AddressListUpdateType>;
  updateType_in?: InputMaybe<Array<AddressListUpdateType>>;
  updateType_not?: InputMaybe<AddressListUpdateType>;
  updateType_not_in?: InputMaybe<Array<AddressListUpdateType>>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum AddressListOrderBy {
  CREATEDAT = 'createdAt',
  CREATOR = 'creator',
  DESCRIPTION = 'description',
  ID = 'id',
  ITEMS = 'items',
  OWNER = 'owner',
  UPDATETYPE = 'updateType',
  UPDATEDAT = 'updatedAt'
}

export type AllowedAdapterIncomingAssetsPolicy = Policy & {
  __typename: 'AllowedAdapterIncomingAssetsPolicy';
  addressLists: Array<AddressList>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};


export type AllowedAdapterIncomingAssetsPolicyAddressListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AddressListFilter>;
};

export type AllowedAdapterIncomingAssetsPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  addressLists?: InputMaybe<Array<Scalars['String']>>;
  addressLists_?: InputMaybe<AddressListFilter>;
  addressLists_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<InputMaybe<AllowedAdapterIncomingAssetsPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedAdapterIncomingAssetsPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AllowedAdapterIncomingAssetsPolicyOrderBy {
  ADDRESSLISTS = 'addressLists',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AllowedAdaptersPerManagerPolicy = Policy & {
  __typename: 'AllowedAdaptersPerManagerPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  userAddressLists: Array<UserAddressList>;
};


export type AllowedAdaptersPerManagerPolicyUserAddressListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserAddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserAddressListFilter>;
};

export type AllowedAdaptersPerManagerPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AllowedAdaptersPerManagerPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedAdaptersPerManagerPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  userAddressLists?: InputMaybe<Array<Scalars['String']>>;
  userAddressLists_?: InputMaybe<UserAddressListFilter>;
  userAddressLists_contains?: InputMaybe<Array<Scalars['String']>>;
  userAddressLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  userAddressLists_not?: InputMaybe<Array<Scalars['String']>>;
  userAddressLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  userAddressLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export enum AllowedAdaptersPerManagerPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  USERADDRESSLISTS = 'userAddressLists'
}

export type AllowedAdaptersPolicy = Policy & {
  __typename: 'AllowedAdaptersPolicy';
  addressLists: Array<AddressList>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};


export type AllowedAdaptersPolicyAddressListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AddressListFilter>;
};

export type AllowedAdaptersPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  addressLists?: InputMaybe<Array<Scalars['String']>>;
  addressLists_?: InputMaybe<AddressListFilter>;
  addressLists_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<InputMaybe<AllowedAdaptersPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedAdaptersPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AllowedAdaptersPolicyOrderBy {
  ADDRESSLISTS = 'addressLists',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AllowedAssetsForRedemptionPolicy = Policy & {
  __typename: 'AllowedAssetsForRedemptionPolicy';
  addressLists: Array<AddressList>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};


export type AllowedAssetsForRedemptionPolicyAddressListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AddressListFilter>;
};

export type AllowedAssetsForRedemptionPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  addressLists?: InputMaybe<Array<Scalars['String']>>;
  addressLists_?: InputMaybe<AddressListFilter>;
  addressLists_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<InputMaybe<AllowedAssetsForRedemptionPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedAssetsForRedemptionPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AllowedAssetsForRedemptionPolicyOrderBy {
  ADDRESSLISTS = 'addressLists',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AllowedDepositRecipientsPolicy = Policy & {
  __typename: 'AllowedDepositRecipientsPolicy';
  addressLists: Array<AddressList>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};


export type AllowedDepositRecipientsPolicyAddressListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AddressListFilter>;
};

export type AllowedDepositRecipientsPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  addressLists?: InputMaybe<Array<Scalars['String']>>;
  addressLists_?: InputMaybe<AddressListFilter>;
  addressLists_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<InputMaybe<AllowedDepositRecipientsPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedDepositRecipientsPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AllowedDepositRecipientsPolicyOrderBy {
  ADDRESSLISTS = 'addressLists',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AllowedExternalPositionTypesPerManagerPolicy = Policy & {
  __typename: 'AllowedExternalPositionTypesPerManagerPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  userUintLists: Array<UserUintList>;
};


export type AllowedExternalPositionTypesPerManagerPolicyUserUintListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserUintListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UserUintListFilter>;
};

export type AllowedExternalPositionTypesPerManagerPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AllowedExternalPositionTypesPerManagerPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedExternalPositionTypesPerManagerPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  userUintLists?: InputMaybe<Array<Scalars['String']>>;
  userUintLists_?: InputMaybe<UserUintListFilter>;
  userUintLists_contains?: InputMaybe<Array<Scalars['String']>>;
  userUintLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  userUintLists_not?: InputMaybe<Array<Scalars['String']>>;
  userUintLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  userUintLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export enum AllowedExternalPositionTypesPerManagerPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  USERUINTLISTS = 'userUintLists'
}

export type AllowedExternalPositionTypesPolicy = Policy & {
  __typename: 'AllowedExternalPositionTypesPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  externalPositionTypes: Array<Scalars['BigInt']>;
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type AllowedExternalPositionTypesPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AllowedExternalPositionTypesPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  externalPositionTypes?: InputMaybe<Array<Scalars['BigInt']>>;
  externalPositionTypes_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  externalPositionTypes_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  externalPositionTypes_not?: InputMaybe<Array<Scalars['BigInt']>>;
  externalPositionTypes_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  externalPositionTypes_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedExternalPositionTypesPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AllowedExternalPositionTypesPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  EXTERNALPOSITIONTYPES = 'externalPositionTypes',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AllowedSharesTransferRecipientsPolicy = Policy & {
  __typename: 'AllowedSharesTransferRecipientsPolicy';
  addressLists: Array<AddressList>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};


export type AllowedSharesTransferRecipientsPolicyAddressListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AddressListFilter>;
};

export type AllowedSharesTransferRecipientsPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  addressLists?: InputMaybe<Array<Scalars['String']>>;
  addressLists_?: InputMaybe<AddressListFilter>;
  addressLists_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<InputMaybe<AllowedSharesTransferRecipientsPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AllowedSharesTransferRecipientsPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AllowedSharesTransferRecipientsPolicyOrderBy {
  ADDRESSLISTS = 'addressLists',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type ArbitraryLoanFixedInterestModule = {
  __typename: 'ArbitraryLoanFixedInterestModule';
  externalPosition: ArbitraryLoanPosition;
  faceValueIsPrincipalOnly: Scalars['Boolean'];
  id: Scalars['ID'];
  maturity: Scalars['Int'];
  repaymentTrackingType: RepaymentTrackingType;
  scaledPerSecondRatePostMaturity: Scalars['BigInt'];
  scaledPerSecondRatePreMaturity: Scalars['BigInt'];
  totalInterestCached: Scalars['BigDecimal'];
  totalInterestCachedTimestamp: Scalars['Int'];
  totalPrincipalRepaid: Scalars['BigDecimal'];
};

export type ArbitraryLoanFixedInterestModuleFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ArbitraryLoanFixedInterestModuleFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ArbitraryLoanPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  faceValueIsPrincipalOnly?: InputMaybe<Scalars['Boolean']>;
  faceValueIsPrincipalOnly_in?: InputMaybe<Array<Scalars['Boolean']>>;
  faceValueIsPrincipalOnly_not?: InputMaybe<Scalars['Boolean']>;
  faceValueIsPrincipalOnly_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maturity?: InputMaybe<Scalars['Int']>;
  maturity_gt?: InputMaybe<Scalars['Int']>;
  maturity_gte?: InputMaybe<Scalars['Int']>;
  maturity_in?: InputMaybe<Array<Scalars['Int']>>;
  maturity_lt?: InputMaybe<Scalars['Int']>;
  maturity_lte?: InputMaybe<Scalars['Int']>;
  maturity_not?: InputMaybe<Scalars['Int']>;
  maturity_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<ArbitraryLoanFixedInterestModuleFilter>>>;
  repaymentTrackingType?: InputMaybe<RepaymentTrackingType>;
  repaymentTrackingType_in?: InputMaybe<Array<RepaymentTrackingType>>;
  repaymentTrackingType_not?: InputMaybe<RepaymentTrackingType>;
  repaymentTrackingType_not_in?: InputMaybe<Array<RepaymentTrackingType>>;
  scaledPerSecondRatePostMaturity?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePostMaturity_gt?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePostMaturity_gte?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePostMaturity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  scaledPerSecondRatePostMaturity_lt?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePostMaturity_lte?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePostMaturity_not?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePostMaturity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  scaledPerSecondRatePreMaturity?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePreMaturity_gt?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePreMaturity_gte?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePreMaturity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  scaledPerSecondRatePreMaturity_lt?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePreMaturity_lte?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePreMaturity_not?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRatePreMaturity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  totalInterestCached?: InputMaybe<Scalars['BigDecimal']>;
  totalInterestCachedTimestamp?: InputMaybe<Scalars['Int']>;
  totalInterestCachedTimestamp_gt?: InputMaybe<Scalars['Int']>;
  totalInterestCachedTimestamp_gte?: InputMaybe<Scalars['Int']>;
  totalInterestCachedTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  totalInterestCachedTimestamp_lt?: InputMaybe<Scalars['Int']>;
  totalInterestCachedTimestamp_lte?: InputMaybe<Scalars['Int']>;
  totalInterestCachedTimestamp_not?: InputMaybe<Scalars['Int']>;
  totalInterestCachedTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  totalInterestCached_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalInterestCached_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalInterestCached_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalInterestCached_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalInterestCached_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalInterestCached_not?: InputMaybe<Scalars['BigDecimal']>;
  totalInterestCached_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalPrincipalRepaid?: InputMaybe<Scalars['BigDecimal']>;
  totalPrincipalRepaid_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalPrincipalRepaid_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalPrincipalRepaid_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalPrincipalRepaid_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalPrincipalRepaid_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalPrincipalRepaid_not?: InputMaybe<Scalars['BigDecimal']>;
  totalPrincipalRepaid_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export enum ArbitraryLoanFixedInterestModuleOrderBy {
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACCOUNTINGMODULE = 'externalPosition__accountingModule',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__BORROWABLEAMOUNT = 'externalPosition__borrowableAmount',
  EXTERNALPOSITION__BORROWER = 'externalPosition__borrower',
  EXTERNALPOSITION__DESCRIPTION = 'externalPosition__description',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  EXTERNALPOSITION__ISCLOSED = 'externalPosition__isClosed',
  EXTERNALPOSITION__MODULETYPE = 'externalPosition__moduleType',
  EXTERNALPOSITION__TOTALBORROWED = 'externalPosition__totalBorrowed',
  EXTERNALPOSITION__TOTALREPAID = 'externalPosition__totalRepaid',
  FACEVALUEISPRINCIPALONLY = 'faceValueIsPrincipalOnly',
  ID = 'id',
  MATURITY = 'maturity',
  REPAYMENTTRACKINGTYPE = 'repaymentTrackingType',
  SCALEDPERSECONDRATEPOSTMATURITY = 'scaledPerSecondRatePostMaturity',
  SCALEDPERSECONDRATEPREMATURITY = 'scaledPerSecondRatePreMaturity',
  TOTALINTERESTCACHED = 'totalInterestCached',
  TOTALINTERESTCACHEDTIMESTAMP = 'totalInterestCachedTimestamp',
  TOTALPRINCIPALREPAID = 'totalPrincipalRepaid'
}

export enum ArbitraryLoanModuleType {
  FIXEDINTEREST = 'FixedInterest',
  NONE = 'None',
  TOTALNOMINALDELTAORACLE = 'TotalNominalDeltaOracle'
}

export type ArbitraryLoanPosition = ExternalPosition & {
  __typename: 'ArbitraryLoanPosition';
  accountingModule?: Maybe<Scalars['Bytes']>;
  active: Scalars['Boolean'];
  borrowableAmount: Scalars['BigDecimal'];
  borrower?: Maybe<Scalars['Bytes']>;
  changes: Array<ExternalPositionChange>;
  description: Scalars['String'];
  fixedInterestModule?: Maybe<ArbitraryLoanFixedInterestModule>;
  id: Scalars['ID'];
  isClosed: Scalars['Boolean'];
  loanAsset?: Maybe<Asset>;
  moduleType?: Maybe<ArbitraryLoanModuleType>;
  totalBorrowed: Scalars['BigDecimal'];
  totalNominalDeltaOracleModule?: Maybe<ArbitraryLoanTotalNominalDeltaOracleModule>;
  totalRepaid: Scalars['BigDecimal'];
  type: ExternalPositionType;
  vault: Vault;
};


export type ArbitraryLoanPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export type ArbitraryLoanPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'ArbitraryLoanPositionChange';
  accountingModule?: Maybe<Scalars['Bytes']>;
  accountingModuleConfigData?: Maybe<Scalars['Bytes']>;
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  arbitraryLoanPositionChangeType: ArbitraryLoanPositionChangeType;
  assetAmounts?: Maybe<Array<AssetAmount>>;
  assets?: Maybe<Array<Asset>>;
  borrower?: Maybe<Scalars['Bytes']>;
  description?: Maybe<Scalars['String']>;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};


export type ArbitraryLoanPositionChangeAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};


export type ArbitraryLoanPositionChangeAssetsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetFilter>;
};

export enum ArbitraryLoanPositionChangeType {
  CALLONACCOUNTINGMODULE = 'CallOnAccountingModule',
  CLOSELOAN = 'CloseLoan',
  CONFIGURELOAN = 'ConfigureLoan',
  RECONCILE = 'Reconcile',
  UPDATEBORROWABLEAMOUNT = 'UpdateBorrowableAmount'
}

export type ArbitraryLoanPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  accountingModule?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_contains?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_gt?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_gte?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_in?: InputMaybe<Array<Scalars['Bytes']>>;
  accountingModuleConfigData_lt?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_lte?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_not?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_not_contains?: InputMaybe<Scalars['Bytes']>;
  accountingModuleConfigData_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  accountingModule_contains?: InputMaybe<Scalars['Bytes']>;
  accountingModule_gt?: InputMaybe<Scalars['Bytes']>;
  accountingModule_gte?: InputMaybe<Scalars['Bytes']>;
  accountingModule_in?: InputMaybe<Array<Scalars['Bytes']>>;
  accountingModule_lt?: InputMaybe<Scalars['Bytes']>;
  accountingModule_lte?: InputMaybe<Scalars['Bytes']>;
  accountingModule_not?: InputMaybe<Scalars['Bytes']>;
  accountingModule_not_contains?: InputMaybe<Scalars['Bytes']>;
  accountingModule_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<ArbitraryLoanPositionChangeFilter>>>;
  arbitraryLoanPositionChangeType?: InputMaybe<ArbitraryLoanPositionChangeType>;
  arbitraryLoanPositionChangeType_in?: InputMaybe<Array<ArbitraryLoanPositionChangeType>>;
  arbitraryLoanPositionChangeType_not?: InputMaybe<ArbitraryLoanPositionChangeType>;
  arbitraryLoanPositionChangeType_not_in?: InputMaybe<Array<ArbitraryLoanPositionChangeType>>;
  assetAmounts?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_?: InputMaybe<AssetAmountFilter>;
  assetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assets?: InputMaybe<Array<Scalars['String']>>;
  assets_?: InputMaybe<AssetFilter>;
  assets_contains?: InputMaybe<Array<Scalars['String']>>;
  assets_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assets_not?: InputMaybe<Array<Scalars['String']>>;
  assets_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assets_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  borrower?: InputMaybe<Scalars['Bytes']>;
  borrower_contains?: InputMaybe<Scalars['Bytes']>;
  borrower_gt?: InputMaybe<Scalars['Bytes']>;
  borrower_gte?: InputMaybe<Scalars['Bytes']>;
  borrower_in?: InputMaybe<Array<Scalars['Bytes']>>;
  borrower_lt?: InputMaybe<Scalars['Bytes']>;
  borrower_lte?: InputMaybe<Scalars['Bytes']>;
  borrower_not?: InputMaybe<Scalars['Bytes']>;
  borrower_not_contains?: InputMaybe<Scalars['Bytes']>;
  borrower_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ArbitraryLoanPositionChangeFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ArbitraryLoanPositionChangeOrderBy {
  ACCOUNTINGMODULE = 'accountingModule',
  ACCOUNTINGMODULECONFIGDATA = 'accountingModuleConfigData',
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ARBITRARYLOANPOSITIONCHANGETYPE = 'arbitraryLoanPositionChangeType',
  ASSETAMOUNTS = 'assetAmounts',
  ASSETS = 'assets',
  BORROWER = 'borrower',
  DESCRIPTION = 'description',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ArbitraryLoanPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  accountingModule?: InputMaybe<Scalars['Bytes']>;
  accountingModule_contains?: InputMaybe<Scalars['Bytes']>;
  accountingModule_gt?: InputMaybe<Scalars['Bytes']>;
  accountingModule_gte?: InputMaybe<Scalars['Bytes']>;
  accountingModule_in?: InputMaybe<Array<Scalars['Bytes']>>;
  accountingModule_lt?: InputMaybe<Scalars['Bytes']>;
  accountingModule_lte?: InputMaybe<Scalars['Bytes']>;
  accountingModule_not?: InputMaybe<Scalars['Bytes']>;
  accountingModule_not_contains?: InputMaybe<Scalars['Bytes']>;
  accountingModule_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<ArbitraryLoanPositionFilter>>>;
  borrowableAmount?: InputMaybe<Scalars['BigDecimal']>;
  borrowableAmount_gt?: InputMaybe<Scalars['BigDecimal']>;
  borrowableAmount_gte?: InputMaybe<Scalars['BigDecimal']>;
  borrowableAmount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  borrowableAmount_lt?: InputMaybe<Scalars['BigDecimal']>;
  borrowableAmount_lte?: InputMaybe<Scalars['BigDecimal']>;
  borrowableAmount_not?: InputMaybe<Scalars['BigDecimal']>;
  borrowableAmount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  borrower?: InputMaybe<Scalars['Bytes']>;
  borrower_contains?: InputMaybe<Scalars['Bytes']>;
  borrower_gt?: InputMaybe<Scalars['Bytes']>;
  borrower_gte?: InputMaybe<Scalars['Bytes']>;
  borrower_in?: InputMaybe<Array<Scalars['Bytes']>>;
  borrower_lt?: InputMaybe<Scalars['Bytes']>;
  borrower_lte?: InputMaybe<Scalars['Bytes']>;
  borrower_not?: InputMaybe<Scalars['Bytes']>;
  borrower_not_contains?: InputMaybe<Scalars['Bytes']>;
  borrower_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fixedInterestModule_?: InputMaybe<ArbitraryLoanFixedInterestModuleFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isClosed?: InputMaybe<Scalars['Boolean']>;
  isClosed_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isClosed_not?: InputMaybe<Scalars['Boolean']>;
  isClosed_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  loanAsset?: InputMaybe<Scalars['String']>;
  loanAsset_?: InputMaybe<AssetFilter>;
  loanAsset_contains?: InputMaybe<Scalars['String']>;
  loanAsset_contains_nocase?: InputMaybe<Scalars['String']>;
  loanAsset_ends_with?: InputMaybe<Scalars['String']>;
  loanAsset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  loanAsset_gt?: InputMaybe<Scalars['String']>;
  loanAsset_gte?: InputMaybe<Scalars['String']>;
  loanAsset_in?: InputMaybe<Array<Scalars['String']>>;
  loanAsset_lt?: InputMaybe<Scalars['String']>;
  loanAsset_lte?: InputMaybe<Scalars['String']>;
  loanAsset_not?: InputMaybe<Scalars['String']>;
  loanAsset_not_contains?: InputMaybe<Scalars['String']>;
  loanAsset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  loanAsset_not_ends_with?: InputMaybe<Scalars['String']>;
  loanAsset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  loanAsset_not_in?: InputMaybe<Array<Scalars['String']>>;
  loanAsset_not_starts_with?: InputMaybe<Scalars['String']>;
  loanAsset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  loanAsset_starts_with?: InputMaybe<Scalars['String']>;
  loanAsset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  moduleType?: InputMaybe<ArbitraryLoanModuleType>;
  moduleType_in?: InputMaybe<Array<ArbitraryLoanModuleType>>;
  moduleType_not?: InputMaybe<ArbitraryLoanModuleType>;
  moduleType_not_in?: InputMaybe<Array<ArbitraryLoanModuleType>>;
  or?: InputMaybe<Array<InputMaybe<ArbitraryLoanPositionFilter>>>;
  totalBorrowed?: InputMaybe<Scalars['BigDecimal']>;
  totalBorrowed_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalBorrowed_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalBorrowed_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalBorrowed_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalBorrowed_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalBorrowed_not?: InputMaybe<Scalars['BigDecimal']>;
  totalBorrowed_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalNominalDeltaOracleModule_?: InputMaybe<ArbitraryLoanTotalNominalDeltaOracleModuleFilter>;
  totalRepaid?: InputMaybe<Scalars['BigDecimal']>;
  totalRepaid_gt?: InputMaybe<Scalars['BigDecimal']>;
  totalRepaid_gte?: InputMaybe<Scalars['BigDecimal']>;
  totalRepaid_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  totalRepaid_lt?: InputMaybe<Scalars['BigDecimal']>;
  totalRepaid_lte?: InputMaybe<Scalars['BigDecimal']>;
  totalRepaid_not?: InputMaybe<Scalars['BigDecimal']>;
  totalRepaid_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ArbitraryLoanPositionOrderBy {
  ACCOUNTINGMODULE = 'accountingModule',
  ACTIVE = 'active',
  BORROWABLEAMOUNT = 'borrowableAmount',
  BORROWER = 'borrower',
  CHANGES = 'changes',
  DESCRIPTION = 'description',
  FIXEDINTERESTMODULE = 'fixedInterestModule',
  FIXEDINTERESTMODULE__FACEVALUEISPRINCIPALONLY = 'fixedInterestModule__faceValueIsPrincipalOnly',
  FIXEDINTERESTMODULE__ID = 'fixedInterestModule__id',
  FIXEDINTERESTMODULE__MATURITY = 'fixedInterestModule__maturity',
  FIXEDINTERESTMODULE__REPAYMENTTRACKINGTYPE = 'fixedInterestModule__repaymentTrackingType',
  FIXEDINTERESTMODULE__SCALEDPERSECONDRATEPOSTMATURITY = 'fixedInterestModule__scaledPerSecondRatePostMaturity',
  FIXEDINTERESTMODULE__SCALEDPERSECONDRATEPREMATURITY = 'fixedInterestModule__scaledPerSecondRatePreMaturity',
  FIXEDINTERESTMODULE__TOTALINTERESTCACHED = 'fixedInterestModule__totalInterestCached',
  FIXEDINTERESTMODULE__TOTALINTERESTCACHEDTIMESTAMP = 'fixedInterestModule__totalInterestCachedTimestamp',
  FIXEDINTERESTMODULE__TOTALPRINCIPALREPAID = 'fixedInterestModule__totalPrincipalRepaid',
  ID = 'id',
  ISCLOSED = 'isClosed',
  LOANASSET = 'loanAsset',
  LOANASSET__DECIMALS = 'loanAsset__decimals',
  LOANASSET__ID = 'loanAsset__id',
  LOANASSET__NAME = 'loanAsset__name',
  LOANASSET__SYMBOL = 'loanAsset__symbol',
  MODULETYPE = 'moduleType',
  TOTALBORROWED = 'totalBorrowed',
  TOTALNOMINALDELTAORACLEMODULE = 'totalNominalDeltaOracleModule',
  TOTALNOMINALDELTAORACLEMODULE__ID = 'totalNominalDeltaOracleModule__id',
  TOTALNOMINALDELTAORACLEMODULE__ORACLE = 'totalNominalDeltaOracleModule__oracle',
  TOTALNOMINALDELTAORACLEMODULE__STALENESSTHRESHOLD = 'totalNominalDeltaOracleModule__stalenessThreshold',
  TOTALREPAID = 'totalRepaid',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ArbitraryLoanTotalNominalDeltaOracleModule = {
  __typename: 'ArbitraryLoanTotalNominalDeltaOracleModule';
  externalPosition: ArbitraryLoanPosition;
  id: Scalars['ID'];
  oracle: Scalars['Bytes'];
  stalenessThreshold: Scalars['Int'];
};

export type ArbitraryLoanTotalNominalDeltaOracleModuleFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ArbitraryLoanTotalNominalDeltaOracleModuleFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ArbitraryLoanPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ArbitraryLoanTotalNominalDeltaOracleModuleFilter>>>;
  oracle?: InputMaybe<Scalars['Bytes']>;
  oracle_contains?: InputMaybe<Scalars['Bytes']>;
  oracle_gt?: InputMaybe<Scalars['Bytes']>;
  oracle_gte?: InputMaybe<Scalars['Bytes']>;
  oracle_in?: InputMaybe<Array<Scalars['Bytes']>>;
  oracle_lt?: InputMaybe<Scalars['Bytes']>;
  oracle_lte?: InputMaybe<Scalars['Bytes']>;
  oracle_not?: InputMaybe<Scalars['Bytes']>;
  oracle_not_contains?: InputMaybe<Scalars['Bytes']>;
  oracle_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  stalenessThreshold?: InputMaybe<Scalars['Int']>;
  stalenessThreshold_gt?: InputMaybe<Scalars['Int']>;
  stalenessThreshold_gte?: InputMaybe<Scalars['Int']>;
  stalenessThreshold_in?: InputMaybe<Array<Scalars['Int']>>;
  stalenessThreshold_lt?: InputMaybe<Scalars['Int']>;
  stalenessThreshold_lte?: InputMaybe<Scalars['Int']>;
  stalenessThreshold_not?: InputMaybe<Scalars['Int']>;
  stalenessThreshold_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum ArbitraryLoanTotalNominalDeltaOracleModuleOrderBy {
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACCOUNTINGMODULE = 'externalPosition__accountingModule',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__BORROWABLEAMOUNT = 'externalPosition__borrowableAmount',
  EXTERNALPOSITION__BORROWER = 'externalPosition__borrower',
  EXTERNALPOSITION__DESCRIPTION = 'externalPosition__description',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  EXTERNALPOSITION__ISCLOSED = 'externalPosition__isClosed',
  EXTERNALPOSITION__MODULETYPE = 'externalPosition__moduleType',
  EXTERNALPOSITION__TOTALBORROWED = 'externalPosition__totalBorrowed',
  EXTERNALPOSITION__TOTALREPAID = 'externalPosition__totalRepaid',
  ID = 'id',
  ORACLE = 'oracle',
  STALENESSTHRESHOLD = 'stalenessThreshold'
}

export type Asset = {
  __typename: 'Asset';
  decimals: Scalars['Int'];
  id: Scalars['ID'];
  name: Scalars['String'];
  symbol: Scalars['String'];
  trackingVaults: Array<Vault>;
};


export type AssetTrackingVaultsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VaultFilter>;
};

export type AssetAdded = Activity & NetworkActivity & {
  __typename: 'AssetAdded';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  asset: Asset;
  id: Scalars['ID'];
  release: Release;
  timestamp: Scalars['Int'];
};

export type AssetAddedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<AssetAddedFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AssetAddedFilter>>>;
  release?: InputMaybe<Scalars['String']>;
  release_?: InputMaybe<ReleaseFilter>;
  release_contains?: InputMaybe<Scalars['String']>;
  release_contains_nocase?: InputMaybe<Scalars['String']>;
  release_ends_with?: InputMaybe<Scalars['String']>;
  release_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_gt?: InputMaybe<Scalars['String']>;
  release_gte?: InputMaybe<Scalars['String']>;
  release_in?: InputMaybe<Array<Scalars['String']>>;
  release_lt?: InputMaybe<Scalars['String']>;
  release_lte?: InputMaybe<Scalars['String']>;
  release_not?: InputMaybe<Scalars['String']>;
  release_not_contains?: InputMaybe<Scalars['String']>;
  release_not_contains_nocase?: InputMaybe<Scalars['String']>;
  release_not_ends_with?: InputMaybe<Scalars['String']>;
  release_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_not_in?: InputMaybe<Array<Scalars['String']>>;
  release_not_starts_with?: InputMaybe<Scalars['String']>;
  release_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  release_starts_with?: InputMaybe<Scalars['String']>;
  release_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum AssetAddedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id',
  RELEASE = 'release',
  RELEASE__CLOSE = 'release__close',
  RELEASE__CURRENT = 'release__current',
  RELEASE__DUSTTOLERANCEFORASSETSINWETH = 'release__dustToleranceForAssetsInWeth',
  RELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'release__dustToleranceForExternalPositionsInWeth',
  RELEASE__ID = 'release__id',
  RELEASE__ISLIVE = 'release__isLive',
  RELEASE__OPEN = 'release__open',
  TIMESTAMP = 'timestamp'
}

export type AssetAmount = {
  __typename: 'AssetAmount';
  amount: Scalars['BigDecimal'];
  asset: Asset;
  denominationAsset: Asset;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  valueAud: Scalars['BigDecimal'];
  valueBtc: Scalars['BigDecimal'];
  valueChf: Scalars['BigDecimal'];
  valueDenomination: Scalars['BigDecimal'];
  valueEth: Scalars['BigDecimal'];
  valueEur: Scalars['BigDecimal'];
  valueGbp: Scalars['BigDecimal'];
  valueJpy: Scalars['BigDecimal'];
  valueUsd: Scalars['BigDecimal'];
};

export type AssetAmountFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  amount?: InputMaybe<Scalars['BigDecimal']>;
  amount_gt?: InputMaybe<Scalars['BigDecimal']>;
  amount_gte?: InputMaybe<Scalars['BigDecimal']>;
  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  amount_lt?: InputMaybe<Scalars['BigDecimal']>;
  amount_lte?: InputMaybe<Scalars['BigDecimal']>;
  amount_not?: InputMaybe<Scalars['BigDecimal']>;
  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<AssetAmountFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  denominationAsset?: InputMaybe<Scalars['String']>;
  denominationAsset_?: InputMaybe<AssetFilter>;
  denominationAsset_contains?: InputMaybe<Scalars['String']>;
  denominationAsset_contains_nocase?: InputMaybe<Scalars['String']>;
  denominationAsset_ends_with?: InputMaybe<Scalars['String']>;
  denominationAsset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  denominationAsset_gt?: InputMaybe<Scalars['String']>;
  denominationAsset_gte?: InputMaybe<Scalars['String']>;
  denominationAsset_in?: InputMaybe<Array<Scalars['String']>>;
  denominationAsset_lt?: InputMaybe<Scalars['String']>;
  denominationAsset_lte?: InputMaybe<Scalars['String']>;
  denominationAsset_not?: InputMaybe<Scalars['String']>;
  denominationAsset_not_contains?: InputMaybe<Scalars['String']>;
  denominationAsset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  denominationAsset_not_ends_with?: InputMaybe<Scalars['String']>;
  denominationAsset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  denominationAsset_not_in?: InputMaybe<Array<Scalars['String']>>;
  denominationAsset_not_starts_with?: InputMaybe<Scalars['String']>;
  denominationAsset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  denominationAsset_starts_with?: InputMaybe<Scalars['String']>;
  denominationAsset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AssetAmountFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  valueAud?: InputMaybe<Scalars['BigDecimal']>;
  valueAud_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueAud_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueAud_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueAud_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueAud_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueAud_not?: InputMaybe<Scalars['BigDecimal']>;
  valueAud_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueBtc?: InputMaybe<Scalars['BigDecimal']>;
  valueBtc_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueBtc_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueBtc_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueBtc_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueBtc_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueBtc_not?: InputMaybe<Scalars['BigDecimal']>;
  valueBtc_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueChf?: InputMaybe<Scalars['BigDecimal']>;
  valueChf_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueChf_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueChf_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueChf_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueChf_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueChf_not?: InputMaybe<Scalars['BigDecimal']>;
  valueChf_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueDenomination?: InputMaybe<Scalars['BigDecimal']>;
  valueDenomination_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueDenomination_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueDenomination_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueDenomination_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueDenomination_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueDenomination_not?: InputMaybe<Scalars['BigDecimal']>;
  valueDenomination_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueEth?: InputMaybe<Scalars['BigDecimal']>;
  valueEth_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueEth_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueEth_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueEth_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueEth_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueEth_not?: InputMaybe<Scalars['BigDecimal']>;
  valueEth_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueEur?: InputMaybe<Scalars['BigDecimal']>;
  valueEur_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueEur_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueEur_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueEur_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueEur_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueEur_not?: InputMaybe<Scalars['BigDecimal']>;
  valueEur_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueGbp?: InputMaybe<Scalars['BigDecimal']>;
  valueGbp_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueGbp_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueGbp_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueGbp_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueGbp_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueGbp_not?: InputMaybe<Scalars['BigDecimal']>;
  valueGbp_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueJpy?: InputMaybe<Scalars['BigDecimal']>;
  valueJpy_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueJpy_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueJpy_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueJpy_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueJpy_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueJpy_not?: InputMaybe<Scalars['BigDecimal']>;
  valueJpy_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueUsd?: InputMaybe<Scalars['BigDecimal']>;
  valueUsd_gt?: InputMaybe<Scalars['BigDecimal']>;
  valueUsd_gte?: InputMaybe<Scalars['BigDecimal']>;
  valueUsd_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  valueUsd_lt?: InputMaybe<Scalars['BigDecimal']>;
  valueUsd_lte?: InputMaybe<Scalars['BigDecimal']>;
  valueUsd_not?: InputMaybe<Scalars['BigDecimal']>;
  valueUsd_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export enum AssetAmountOrderBy {
  AMOUNT = 'amount',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  DENOMINATIONASSET = 'denominationAsset',
  DENOMINATIONASSET__DECIMALS = 'denominationAsset__decimals',
  DENOMINATIONASSET__ID = 'denominationAsset__id',
  DENOMINATIONASSET__NAME = 'denominationAsset__name',
  DENOMINATIONASSET__SYMBOL = 'denominationAsset__symbol',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VALUEAUD = 'valueAud',
  VALUEBTC = 'valueBtc',
  VALUECHF = 'valueChf',
  VALUEDENOMINATION = 'valueDenomination',
  VALUEETH = 'valueEth',
  VALUEEUR = 'valueEur',
  VALUEGBP = 'valueGbp',
  VALUEJPY = 'valueJpy',
  VALUEUSD = 'valueUsd'
}

export type AssetBalance = {
  __typename: 'AssetBalance';
  amount: Scalars['BigDecimal'];
  asset: Asset;
  id: Scalars['ID'];
};

export type AssetBalanceFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  amount?: InputMaybe<Scalars['BigDecimal']>;
  amount_gt?: InputMaybe<Scalars['BigDecimal']>;
  amount_gte?: InputMaybe<Scalars['BigDecimal']>;
  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  amount_lt?: InputMaybe<Scalars['BigDecimal']>;
  amount_lte?: InputMaybe<Scalars['BigDecimal']>;
  amount_not?: InputMaybe<Scalars['BigDecimal']>;
  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<AssetBalanceFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AssetBalanceFilter>>>;
};

export enum AssetBalanceOrderBy {
  AMOUNT = 'amount',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id'
}

export type AssetBlacklistPolicy = Policy & {
  __typename: 'AssetBlacklistPolicy';
  assets: Array<Scalars['Bytes']>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type AssetBlacklistPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AssetBlacklistPolicyFilter>>>;
  assets?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_not?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AssetBlacklistPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AssetBlacklistPolicyOrderBy {
  ASSETS = 'assets',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AssetPrice = {
  __typename: 'AssetPrice';
  asset: Asset;
  id: Scalars['ID'];
  price: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
};

export type AssetPriceFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AssetPriceFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AssetPriceFilter>>>;
  price?: InputMaybe<Scalars['BigDecimal']>;
  price_gt?: InputMaybe<Scalars['BigDecimal']>;
  price_gte?: InputMaybe<Scalars['BigDecimal']>;
  price_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  price_lt?: InputMaybe<Scalars['BigDecimal']>;
  price_lte?: InputMaybe<Scalars['BigDecimal']>;
  price_not?: InputMaybe<Scalars['BigDecimal']>;
  price_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum AssetPriceOrderBy {
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id',
  PRICE = 'price',
  TIMESTAMP = 'timestamp'
}

export type AssetRemoved = Activity & NetworkActivity & {
  __typename: 'AssetRemoved';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  asset: Asset;
  id: Scalars['ID'];
  release: Release;
  timestamp: Scalars['Int'];
};

export type AssetRemovedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<AssetRemovedFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AssetRemovedFilter>>>;
  release?: InputMaybe<Scalars['String']>;
  release_?: InputMaybe<ReleaseFilter>;
  release_contains?: InputMaybe<Scalars['String']>;
  release_contains_nocase?: InputMaybe<Scalars['String']>;
  release_ends_with?: InputMaybe<Scalars['String']>;
  release_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_gt?: InputMaybe<Scalars['String']>;
  release_gte?: InputMaybe<Scalars['String']>;
  release_in?: InputMaybe<Array<Scalars['String']>>;
  release_lt?: InputMaybe<Scalars['String']>;
  release_lte?: InputMaybe<Scalars['String']>;
  release_not?: InputMaybe<Scalars['String']>;
  release_not_contains?: InputMaybe<Scalars['String']>;
  release_not_contains_nocase?: InputMaybe<Scalars['String']>;
  release_not_ends_with?: InputMaybe<Scalars['String']>;
  release_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_not_in?: InputMaybe<Array<Scalars['String']>>;
  release_not_starts_with?: InputMaybe<Scalars['String']>;
  release_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  release_starts_with?: InputMaybe<Scalars['String']>;
  release_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum AssetRemovedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id',
  RELEASE = 'release',
  RELEASE__CLOSE = 'release__close',
  RELEASE__CURRENT = 'release__current',
  RELEASE__DUSTTOLERANCEFORASSETSINWETH = 'release__dustToleranceForAssetsInWeth',
  RELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'release__dustToleranceForExternalPositionsInWeth',
  RELEASE__ID = 'release__id',
  RELEASE__ISLIVE = 'release__isLive',
  RELEASE__OPEN = 'release__open',
  TIMESTAMP = 'timestamp'
}

export type AssetWhitelistPolicy = Policy & {
  __typename: 'AssetWhitelistPolicy';
  assets: Array<Scalars['Bytes']>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type AssetWhitelistPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AssetWhitelistPolicyFilter>>>;
  assets?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_not?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  assets_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<AssetWhitelistPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum AssetWhitelistPolicyOrderBy {
  ASSETS = 'assets',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type AssetFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<AssetFilter>>>;
  decimals?: InputMaybe<Scalars['Int']>;
  decimals_gt?: InputMaybe<Scalars['Int']>;
  decimals_gte?: InputMaybe<Scalars['Int']>;
  decimals_in?: InputMaybe<Array<Scalars['Int']>>;
  decimals_lt?: InputMaybe<Scalars['Int']>;
  decimals_lte?: InputMaybe<Scalars['Int']>;
  decimals_not?: InputMaybe<Scalars['Int']>;
  decimals_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<AssetFilter>>>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  trackingVaults_?: InputMaybe<VaultFilter>;
};

export enum AssetOrderBy {
  DECIMALS = 'decimals',
  ID = 'id',
  NAME = 'name',
  SYMBOL = 'symbol',
  TRACKINGVAULTS = 'trackingVaults'
}

export type BlockChangedFilter = {
  number_gte: Scalars['Int'];
};

export type BlockHeight = {
  hash?: InputMaybe<Scalars['Bytes']>;
  number?: InputMaybe<Scalars['Int']>;
  number_gte?: InputMaybe<Scalars['Int']>;
};

export type BuySharesCallerWhitelistPolicy = Policy & {
  __typename: 'BuySharesCallerWhitelistPolicy';
  callers: Array<Scalars['Bytes']>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  updatedAt: Scalars['Int'];
};

export type BuySharesCallerWhitelistPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<BuySharesCallerWhitelistPolicyFilter>>>;
  callers?: InputMaybe<Array<Scalars['Bytes']>>;
  callers_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  callers_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  callers_not?: InputMaybe<Array<Scalars['Bytes']>>;
  callers_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  callers_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<BuySharesCallerWhitelistPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum BuySharesCallerWhitelistPolicyOrderBy {
  CALLERS = 'callers',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  UPDATEDAT = 'updatedAt'
}

export type CompoundDebtPosition = ExternalPosition & {
  __typename: 'CompoundDebtPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  id: Scalars['ID'];
  type: ExternalPositionType;
  vault: Vault;
};


export type CompoundDebtPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export type CompoundDebtPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'CompoundDebtPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  assetAmounts?: Maybe<Array<AssetAmount>>;
  compoundDebtPositionChangeType: CompoundDebtPositionChangeType;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};


export type CompoundDebtPositionChangeAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};

export enum CompoundDebtPositionChangeType {
  ADDCOLLATERAL = 'AddCollateral',
  BORROW = 'Borrow',
  CLAIMCOMP = 'ClaimComp',
  REMOVECOLLATERAL = 'RemoveCollateral',
  REPAYBORROW = 'RepayBorrow'
}

export type CompoundDebtPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<CompoundDebtPositionChangeFilter>>>;
  assetAmounts?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_?: InputMaybe<AssetAmountFilter>;
  assetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  compoundDebtPositionChangeType?: InputMaybe<CompoundDebtPositionChangeType>;
  compoundDebtPositionChangeType_in?: InputMaybe<Array<CompoundDebtPositionChangeType>>;
  compoundDebtPositionChangeType_not?: InputMaybe<CompoundDebtPositionChangeType>;
  compoundDebtPositionChangeType_not_in?: InputMaybe<Array<CompoundDebtPositionChangeType>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<CompoundDebtPositionChangeFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum CompoundDebtPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSETAMOUNTS = 'assetAmounts',
  COMPOUNDDEBTPOSITIONCHANGETYPE = 'compoundDebtPositionChangeType',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type CompoundDebtPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<CompoundDebtPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<CompoundDebtPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum CompoundDebtPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  ID = 'id',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type Comptroller = {
  __typename: 'Comptroller';
  activation: Scalars['Int'];
  authUsers: Array<Account>;
  autoProtocolFeeSharesBuyback: Scalars['Boolean'];
  creation: Scalars['Int'];
  creator: Account;
  denomination: Asset;
  destruction?: Maybe<Scalars['Int']>;
  fees: Array<Fee>;
  gasRelayer?: Maybe<GasRelayer>;
  id: Scalars['ID'];
  policies: Array<Policy>;
  release: Release;
  sharesActionTimelock: Scalars['BigInt'];
  status: ComptrollerStatus;
  vault?: Maybe<Vault>;
};


export type ComptrollerAuthUsersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AccountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AccountFilter>;
};


export type ComptrollerFeesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<FeeFilter>;
};


export type ComptrollerPoliciesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<PolicyFilter>;
};

export enum ComptrollerStatus {
  COMMITTED = 'COMMITTED',
  DESTRUCTED = 'DESTRUCTED',
  FREE = 'FREE',
  SIGNALLED = 'SIGNALLED'
}

export type ComptrollerFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activation?: InputMaybe<Scalars['Int']>;
  activation_gt?: InputMaybe<Scalars['Int']>;
  activation_gte?: InputMaybe<Scalars['Int']>;
  activation_in?: InputMaybe<Array<Scalars['Int']>>;
  activation_lt?: InputMaybe<Scalars['Int']>;
  activation_lte?: InputMaybe<Scalars['Int']>;
  activation_not?: InputMaybe<Scalars['Int']>;
  activation_not_in?: InputMaybe<Array<Scalars['Int']>>;
  and?: InputMaybe<Array<InputMaybe<ComptrollerFilter>>>;
  authUsers?: InputMaybe<Array<Scalars['String']>>;
  authUsers_?: InputMaybe<AccountFilter>;
  authUsers_contains?: InputMaybe<Array<Scalars['String']>>;
  authUsers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  authUsers_not?: InputMaybe<Array<Scalars['String']>>;
  authUsers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  authUsers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  autoProtocolFeeSharesBuyback?: InputMaybe<Scalars['Boolean']>;
  autoProtocolFeeSharesBuyback_in?: InputMaybe<Array<Scalars['Boolean']>>;
  autoProtocolFeeSharesBuyback_not?: InputMaybe<Scalars['Boolean']>;
  autoProtocolFeeSharesBuyback_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  creation?: InputMaybe<Scalars['Int']>;
  creation_gt?: InputMaybe<Scalars['Int']>;
  creation_gte?: InputMaybe<Scalars['Int']>;
  creation_in?: InputMaybe<Array<Scalars['Int']>>;
  creation_lt?: InputMaybe<Scalars['Int']>;
  creation_lte?: InputMaybe<Scalars['Int']>;
  creation_not?: InputMaybe<Scalars['Int']>;
  creation_not_in?: InputMaybe<Array<Scalars['Int']>>;
  creator?: InputMaybe<Scalars['String']>;
  creator_?: InputMaybe<AccountFilter>;
  creator_contains?: InputMaybe<Scalars['String']>;
  creator_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_ends_with?: InputMaybe<Scalars['String']>;
  creator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_gt?: InputMaybe<Scalars['String']>;
  creator_gte?: InputMaybe<Scalars['String']>;
  creator_in?: InputMaybe<Array<Scalars['String']>>;
  creator_lt?: InputMaybe<Scalars['String']>;
  creator_lte?: InputMaybe<Scalars['String']>;
  creator_not?: InputMaybe<Scalars['String']>;
  creator_not_contains?: InputMaybe<Scalars['String']>;
  creator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_not_ends_with?: InputMaybe<Scalars['String']>;
  creator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_not_in?: InputMaybe<Array<Scalars['String']>>;
  creator_not_starts_with?: InputMaybe<Scalars['String']>;
  creator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  creator_starts_with?: InputMaybe<Scalars['String']>;
  creator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  denomination?: InputMaybe<Scalars['String']>;
  denomination_?: InputMaybe<AssetFilter>;
  denomination_contains?: InputMaybe<Scalars['String']>;
  denomination_contains_nocase?: InputMaybe<Scalars['String']>;
  denomination_ends_with?: InputMaybe<Scalars['String']>;
  denomination_ends_with_nocase?: InputMaybe<Scalars['String']>;
  denomination_gt?: InputMaybe<Scalars['String']>;
  denomination_gte?: InputMaybe<Scalars['String']>;
  denomination_in?: InputMaybe<Array<Scalars['String']>>;
  denomination_lt?: InputMaybe<Scalars['String']>;
  denomination_lte?: InputMaybe<Scalars['String']>;
  denomination_not?: InputMaybe<Scalars['String']>;
  denomination_not_contains?: InputMaybe<Scalars['String']>;
  denomination_not_contains_nocase?: InputMaybe<Scalars['String']>;
  denomination_not_ends_with?: InputMaybe<Scalars['String']>;
  denomination_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  denomination_not_in?: InputMaybe<Array<Scalars['String']>>;
  denomination_not_starts_with?: InputMaybe<Scalars['String']>;
  denomination_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  denomination_starts_with?: InputMaybe<Scalars['String']>;
  denomination_starts_with_nocase?: InputMaybe<Scalars['String']>;
  destruction?: InputMaybe<Scalars['Int']>;
  destruction_gt?: InputMaybe<Scalars['Int']>;
  destruction_gte?: InputMaybe<Scalars['Int']>;
  destruction_in?: InputMaybe<Array<Scalars['Int']>>;
  destruction_lt?: InputMaybe<Scalars['Int']>;
  destruction_lte?: InputMaybe<Scalars['Int']>;
  destruction_not?: InputMaybe<Scalars['Int']>;
  destruction_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fees_?: InputMaybe<FeeFilter>;
  gasRelayer?: InputMaybe<Scalars['String']>;
  gasRelayer_?: InputMaybe<GasRelayerFilter>;
  gasRelayer_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_gt?: InputMaybe<Scalars['String']>;
  gasRelayer_gte?: InputMaybe<Scalars['String']>;
  gasRelayer_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_lt?: InputMaybe<Scalars['String']>;
  gasRelayer_lte?: InputMaybe<Scalars['String']>;
  gasRelayer_not?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_not_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ComptrollerFilter>>>;
  policies_?: InputMaybe<PolicyFilter>;
  release?: InputMaybe<Scalars['String']>;
  release_?: InputMaybe<ReleaseFilter>;
  release_contains?: InputMaybe<Scalars['String']>;
  release_contains_nocase?: InputMaybe<Scalars['String']>;
  release_ends_with?: InputMaybe<Scalars['String']>;
  release_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_gt?: InputMaybe<Scalars['String']>;
  release_gte?: InputMaybe<Scalars['String']>;
  release_in?: InputMaybe<Array<Scalars['String']>>;
  release_lt?: InputMaybe<Scalars['String']>;
  release_lte?: InputMaybe<Scalars['String']>;
  release_not?: InputMaybe<Scalars['String']>;
  release_not_contains?: InputMaybe<Scalars['String']>;
  release_not_contains_nocase?: InputMaybe<Scalars['String']>;
  release_not_ends_with?: InputMaybe<Scalars['String']>;
  release_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_not_in?: InputMaybe<Array<Scalars['String']>>;
  release_not_starts_with?: InputMaybe<Scalars['String']>;
  release_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  release_starts_with?: InputMaybe<Scalars['String']>;
  release_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sharesActionTimelock?: InputMaybe<Scalars['BigInt']>;
  sharesActionTimelock_gt?: InputMaybe<Scalars['BigInt']>;
  sharesActionTimelock_gte?: InputMaybe<Scalars['BigInt']>;
  sharesActionTimelock_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sharesActionTimelock_lt?: InputMaybe<Scalars['BigInt']>;
  sharesActionTimelock_lte?: InputMaybe<Scalars['BigInt']>;
  sharesActionTimelock_not?: InputMaybe<Scalars['BigInt']>;
  sharesActionTimelock_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  status?: InputMaybe<ComptrollerStatus>;
  status_in?: InputMaybe<Array<ComptrollerStatus>>;
  status_not?: InputMaybe<ComptrollerStatus>;
  status_not_in?: InputMaybe<Array<ComptrollerStatus>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ComptrollerOrderBy {
  ACTIVATION = 'activation',
  AUTHUSERS = 'authUsers',
  AUTOPROTOCOLFEESHARESBUYBACK = 'autoProtocolFeeSharesBuyback',
  CREATION = 'creation',
  CREATOR = 'creator',
  CREATOR__ASSETMANAGERSINCE = 'creator__assetManagerSince',
  CREATOR__AUTHUSERSINCE = 'creator__authUserSince',
  CREATOR__DEPOSITORSINCE = 'creator__depositorSince',
  CREATOR__ID = 'creator__id',
  CREATOR__ISASSETMANAGER = 'creator__isAssetManager',
  CREATOR__ISAUTHUSER = 'creator__isAuthUser',
  CREATOR__ISDEPOSITOR = 'creator__isDepositor',
  CREATOR__ISOWNER = 'creator__isOwner',
  CREATOR__OWNERSINCE = 'creator__ownerSince',
  DENOMINATION = 'denomination',
  DENOMINATION__DECIMALS = 'denomination__decimals',
  DENOMINATION__ID = 'denomination__id',
  DENOMINATION__NAME = 'denomination__name',
  DENOMINATION__SYMBOL = 'denomination__symbol',
  DESTRUCTION = 'destruction',
  FEES = 'fees',
  GASRELAYER = 'gasRelayer',
  GASRELAYER__BALANCE = 'gasRelayer__balance',
  GASRELAYER__ID = 'gasRelayer__id',
  ID = 'id',
  POLICIES = 'policies',
  RELEASE = 'release',
  RELEASE__CLOSE = 'release__close',
  RELEASE__CURRENT = 'release__current',
  RELEASE__DUSTTOLERANCEFORASSETSINWETH = 'release__dustToleranceForAssetsInWeth',
  RELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'release__dustToleranceForExternalPositionsInWeth',
  RELEASE__ID = 'release__id',
  RELEASE__ISLIVE = 'release__isLive',
  RELEASE__OPEN = 'release__open',
  SHARESACTIONTIMELOCK = 'sharesActionTimelock',
  STATUS = 'status',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ConvexCurveLpStakingWrapper = {
  __typename: 'ConvexCurveLpStakingWrapper';
  id: Scalars['ID'];
  lpToken: Asset;
  pid: Scalars['Int'];
  timestamp: Scalars['Int'];
};

export type ConvexCurveLpStakingWrapperFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ConvexCurveLpStakingWrapperFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lpToken?: InputMaybe<Scalars['String']>;
  lpToken_?: InputMaybe<AssetFilter>;
  lpToken_contains?: InputMaybe<Scalars['String']>;
  lpToken_contains_nocase?: InputMaybe<Scalars['String']>;
  lpToken_ends_with?: InputMaybe<Scalars['String']>;
  lpToken_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lpToken_gt?: InputMaybe<Scalars['String']>;
  lpToken_gte?: InputMaybe<Scalars['String']>;
  lpToken_in?: InputMaybe<Array<Scalars['String']>>;
  lpToken_lt?: InputMaybe<Scalars['String']>;
  lpToken_lte?: InputMaybe<Scalars['String']>;
  lpToken_not?: InputMaybe<Scalars['String']>;
  lpToken_not_contains?: InputMaybe<Scalars['String']>;
  lpToken_not_contains_nocase?: InputMaybe<Scalars['String']>;
  lpToken_not_ends_with?: InputMaybe<Scalars['String']>;
  lpToken_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lpToken_not_in?: InputMaybe<Array<Scalars['String']>>;
  lpToken_not_starts_with?: InputMaybe<Scalars['String']>;
  lpToken_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  lpToken_starts_with?: InputMaybe<Scalars['String']>;
  lpToken_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<ConvexCurveLpStakingWrapperFilter>>>;
  pid?: InputMaybe<Scalars['Int']>;
  pid_gt?: InputMaybe<Scalars['Int']>;
  pid_gte?: InputMaybe<Scalars['Int']>;
  pid_in?: InputMaybe<Array<Scalars['Int']>>;
  pid_lt?: InputMaybe<Scalars['Int']>;
  pid_lte?: InputMaybe<Scalars['Int']>;
  pid_not?: InputMaybe<Scalars['Int']>;
  pid_not_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum ConvexCurveLpStakingWrapperOrderBy {
  ID = 'id',
  LPTOKEN = 'lpToken',
  LPTOKEN__DECIMALS = 'lpToken__decimals',
  LPTOKEN__ID = 'lpToken__id',
  LPTOKEN__NAME = 'lpToken__name',
  LPTOKEN__SYMBOL = 'lpToken__symbol',
  PID = 'pid',
  TIMESTAMP = 'timestamp'
}

export type ConvexVotingPosition = ExternalPosition & {
  __typename: 'ConvexVotingPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  claimedVotiumMerkleProofsHashes: Array<Scalars['String']>;
  delegate?: Maybe<Scalars['Bytes']>;
  id: Scalars['ID'];
  lastWithdrawOrRelockTimestamp: Scalars['Int'];
  locksCounter: Scalars['Int'];
  type: ExternalPositionType;
  vault: Vault;
};


export type ConvexVotingPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export type ConvexVotingPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'ConvexVotingPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  assetAmounts?: Maybe<Array<AssetAmount>>;
  assets?: Maybe<Array<Asset>>;
  convexVotingPositionChangeType: ConvexVotingPositionChangeType;
  delegate?: Maybe<Scalars['Bytes']>;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};


export type ConvexVotingPositionChangeAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};


export type ConvexVotingPositionChangeAssetsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetFilter>;
};

export enum ConvexVotingPositionChangeType {
  CLAIMREWARDS = 'ClaimRewards',
  DELEGATE = 'Delegate',
  LOCK = 'Lock',
  RELOCK = 'Relock',
  WITHDRAW = 'Withdraw'
}

export type ConvexVotingPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<ConvexVotingPositionChangeFilter>>>;
  assetAmounts?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_?: InputMaybe<AssetAmountFilter>;
  assetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assets?: InputMaybe<Array<Scalars['String']>>;
  assets_?: InputMaybe<AssetFilter>;
  assets_contains?: InputMaybe<Array<Scalars['String']>>;
  assets_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assets_not?: InputMaybe<Array<Scalars['String']>>;
  assets_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assets_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  convexVotingPositionChangeType?: InputMaybe<ConvexVotingPositionChangeType>;
  convexVotingPositionChangeType_in?: InputMaybe<Array<ConvexVotingPositionChangeType>>;
  convexVotingPositionChangeType_not?: InputMaybe<ConvexVotingPositionChangeType>;
  convexVotingPositionChangeType_not_in?: InputMaybe<Array<ConvexVotingPositionChangeType>>;
  delegate?: InputMaybe<Scalars['Bytes']>;
  delegate_contains?: InputMaybe<Scalars['Bytes']>;
  delegate_gt?: InputMaybe<Scalars['Bytes']>;
  delegate_gte?: InputMaybe<Scalars['Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['Bytes']>>;
  delegate_lt?: InputMaybe<Scalars['Bytes']>;
  delegate_lte?: InputMaybe<Scalars['Bytes']>;
  delegate_not?: InputMaybe<Scalars['Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['Bytes']>;
  delegate_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ConvexVotingPositionChangeFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ConvexVotingPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSETAMOUNTS = 'assetAmounts',
  ASSETS = 'assets',
  CONVEXVOTINGPOSITIONCHANGETYPE = 'convexVotingPositionChangeType',
  DELEGATE = 'delegate',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ConvexVotingPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<ConvexVotingPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  claimedVotiumMerkleProofsHashes?: InputMaybe<Array<Scalars['String']>>;
  claimedVotiumMerkleProofsHashes_contains?: InputMaybe<Array<Scalars['String']>>;
  claimedVotiumMerkleProofsHashes_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  claimedVotiumMerkleProofsHashes_not?: InputMaybe<Array<Scalars['String']>>;
  claimedVotiumMerkleProofsHashes_not_contains?: InputMaybe<Array<Scalars['String']>>;
  claimedVotiumMerkleProofsHashes_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  delegate?: InputMaybe<Scalars['Bytes']>;
  delegate_contains?: InputMaybe<Scalars['Bytes']>;
  delegate_gt?: InputMaybe<Scalars['Bytes']>;
  delegate_gte?: InputMaybe<Scalars['Bytes']>;
  delegate_in?: InputMaybe<Array<Scalars['Bytes']>>;
  delegate_lt?: InputMaybe<Scalars['Bytes']>;
  delegate_lte?: InputMaybe<Scalars['Bytes']>;
  delegate_not?: InputMaybe<Scalars['Bytes']>;
  delegate_not_contains?: InputMaybe<Scalars['Bytes']>;
  delegate_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastWithdrawOrRelockTimestamp?: InputMaybe<Scalars['Int']>;
  lastWithdrawOrRelockTimestamp_gt?: InputMaybe<Scalars['Int']>;
  lastWithdrawOrRelockTimestamp_gte?: InputMaybe<Scalars['Int']>;
  lastWithdrawOrRelockTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  lastWithdrawOrRelockTimestamp_lt?: InputMaybe<Scalars['Int']>;
  lastWithdrawOrRelockTimestamp_lte?: InputMaybe<Scalars['Int']>;
  lastWithdrawOrRelockTimestamp_not?: InputMaybe<Scalars['Int']>;
  lastWithdrawOrRelockTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  locksCounter?: InputMaybe<Scalars['Int']>;
  locksCounter_gt?: InputMaybe<Scalars['Int']>;
  locksCounter_gte?: InputMaybe<Scalars['Int']>;
  locksCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  locksCounter_lt?: InputMaybe<Scalars['Int']>;
  locksCounter_lte?: InputMaybe<Scalars['Int']>;
  locksCounter_not?: InputMaybe<Scalars['Int']>;
  locksCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<ConvexVotingPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ConvexVotingPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  CLAIMEDVOTIUMMERKLEPROOFSHASHES = 'claimedVotiumMerkleProofsHashes',
  DELEGATE = 'delegate',
  ID = 'id',
  LASTWITHDRAWORRELOCKTIMESTAMP = 'lastWithdrawOrRelockTimestamp',
  LOCKSCOUNTER = 'locksCounter',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type Counter = {
  __typename: 'Counter';
  count: Scalars['Int'];
  id: Scalars['ID'];
};

export type CounterFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<CounterFilter>>>;
  count?: InputMaybe<Scalars['Int']>;
  count_gt?: InputMaybe<Scalars['Int']>;
  count_gte?: InputMaybe<Scalars['Int']>;
  count_in?: InputMaybe<Array<Scalars['Int']>>;
  count_lt?: InputMaybe<Scalars['Int']>;
  count_lte?: InputMaybe<Scalars['Int']>;
  count_not?: InputMaybe<Scalars['Int']>;
  count_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<CounterFilter>>>;
};

export enum CounterOrderBy {
  COUNT = 'count',
  ID = 'id'
}

export type CumulativeSlippageTolerancePolicy = Policy & {
  __typename: 'CumulativeSlippageTolerancePolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  cumulativeSlippage: Scalars['BigDecimal'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  lastSlippageTimestamp: Scalars['Int'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  tolerance: Scalars['BigDecimal'];
};

export type CumulativeSlippageTolerancePolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<CumulativeSlippageTolerancePolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  cumulativeSlippage?: InputMaybe<Scalars['BigDecimal']>;
  cumulativeSlippage_gt?: InputMaybe<Scalars['BigDecimal']>;
  cumulativeSlippage_gte?: InputMaybe<Scalars['BigDecimal']>;
  cumulativeSlippage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  cumulativeSlippage_lt?: InputMaybe<Scalars['BigDecimal']>;
  cumulativeSlippage_lte?: InputMaybe<Scalars['BigDecimal']>;
  cumulativeSlippage_not?: InputMaybe<Scalars['BigDecimal']>;
  cumulativeSlippage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastSlippageTimestamp?: InputMaybe<Scalars['Int']>;
  lastSlippageTimestamp_gt?: InputMaybe<Scalars['Int']>;
  lastSlippageTimestamp_gte?: InputMaybe<Scalars['Int']>;
  lastSlippageTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSlippageTimestamp_lt?: InputMaybe<Scalars['Int']>;
  lastSlippageTimestamp_lte?: InputMaybe<Scalars['Int']>;
  lastSlippageTimestamp_not?: InputMaybe<Scalars['Int']>;
  lastSlippageTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<CumulativeSlippageTolerancePolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  tolerance?: InputMaybe<Scalars['BigDecimal']>;
  tolerance_gt?: InputMaybe<Scalars['BigDecimal']>;
  tolerance_gte?: InputMaybe<Scalars['BigDecimal']>;
  tolerance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  tolerance_lt?: InputMaybe<Scalars['BigDecimal']>;
  tolerance_lte?: InputMaybe<Scalars['BigDecimal']>;
  tolerance_not?: InputMaybe<Scalars['BigDecimal']>;
  tolerance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export enum CumulativeSlippageTolerancePolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  CUMULATIVESLIPPAGE = 'cumulativeSlippage',
  ENABLED = 'enabled',
  ID = 'id',
  LASTSLIPPAGETIMESTAMP = 'lastSlippageTimestamp',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  TOLERANCE = 'tolerance'
}

export type CurrencyPrice = {
  __typename: 'CurrencyPrice';
  ethAud: Scalars['BigDecimal'];
  ethBtc: Scalars['BigDecimal'];
  ethChf: Scalars['BigDecimal'];
  ethEur: Scalars['BigDecimal'];
  ethGbp: Scalars['BigDecimal'];
  ethJpy: Scalars['BigDecimal'];
  ethUsd: Scalars['BigDecimal'];
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
};

export type CurrencyPriceFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<CurrencyPriceFilter>>>;
  ethAud?: InputMaybe<Scalars['BigDecimal']>;
  ethAud_gt?: InputMaybe<Scalars['BigDecimal']>;
  ethAud_gte?: InputMaybe<Scalars['BigDecimal']>;
  ethAud_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethAud_lt?: InputMaybe<Scalars['BigDecimal']>;
  ethAud_lte?: InputMaybe<Scalars['BigDecimal']>;
  ethAud_not?: InputMaybe<Scalars['BigDecimal']>;
  ethAud_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethBtc?: InputMaybe<Scalars['BigDecimal']>;
  ethBtc_gt?: InputMaybe<Scalars['BigDecimal']>;
  ethBtc_gte?: InputMaybe<Scalars['BigDecimal']>;
  ethBtc_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethBtc_lt?: InputMaybe<Scalars['BigDecimal']>;
  ethBtc_lte?: InputMaybe<Scalars['BigDecimal']>;
  ethBtc_not?: InputMaybe<Scalars['BigDecimal']>;
  ethBtc_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethChf?: InputMaybe<Scalars['BigDecimal']>;
  ethChf_gt?: InputMaybe<Scalars['BigDecimal']>;
  ethChf_gte?: InputMaybe<Scalars['BigDecimal']>;
  ethChf_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethChf_lt?: InputMaybe<Scalars['BigDecimal']>;
  ethChf_lte?: InputMaybe<Scalars['BigDecimal']>;
  ethChf_not?: InputMaybe<Scalars['BigDecimal']>;
  ethChf_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethEur?: InputMaybe<Scalars['BigDecimal']>;
  ethEur_gt?: InputMaybe<Scalars['BigDecimal']>;
  ethEur_gte?: InputMaybe<Scalars['BigDecimal']>;
  ethEur_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethEur_lt?: InputMaybe<Scalars['BigDecimal']>;
  ethEur_lte?: InputMaybe<Scalars['BigDecimal']>;
  ethEur_not?: InputMaybe<Scalars['BigDecimal']>;
  ethEur_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethGbp?: InputMaybe<Scalars['BigDecimal']>;
  ethGbp_gt?: InputMaybe<Scalars['BigDecimal']>;
  ethGbp_gte?: InputMaybe<Scalars['BigDecimal']>;
  ethGbp_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethGbp_lt?: InputMaybe<Scalars['BigDecimal']>;
  ethGbp_lte?: InputMaybe<Scalars['BigDecimal']>;
  ethGbp_not?: InputMaybe<Scalars['BigDecimal']>;
  ethGbp_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethJpy?: InputMaybe<Scalars['BigDecimal']>;
  ethJpy_gt?: InputMaybe<Scalars['BigDecimal']>;
  ethJpy_gte?: InputMaybe<Scalars['BigDecimal']>;
  ethJpy_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethJpy_lt?: InputMaybe<Scalars['BigDecimal']>;
  ethJpy_lte?: InputMaybe<Scalars['BigDecimal']>;
  ethJpy_not?: InputMaybe<Scalars['BigDecimal']>;
  ethJpy_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethUsd?: InputMaybe<Scalars['BigDecimal']>;
  ethUsd_gt?: InputMaybe<Scalars['BigDecimal']>;
  ethUsd_gte?: InputMaybe<Scalars['BigDecimal']>;
  ethUsd_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  ethUsd_lt?: InputMaybe<Scalars['BigDecimal']>;
  ethUsd_lte?: InputMaybe<Scalars['BigDecimal']>;
  ethUsd_not?: InputMaybe<Scalars['BigDecimal']>;
  ethUsd_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<CurrencyPriceFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum CurrencyPriceOrderBy {
  ETHAUD = 'ethAud',
  ETHBTC = 'ethBtc',
  ETHCHF = 'ethChf',
  ETHEUR = 'ethEur',
  ETHGBP = 'ethGbp',
  ETHJPY = 'ethJpy',
  ETHUSD = 'ethUsd',
  ID = 'id',
  TIMESTAMP = 'timestamp'
}

export type Deposit = {
  __typename: 'Deposit';
  depositor: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChanges: Array<SharesChange>;
  since: Scalars['Int'];
  vault: Vault;
};


export type DepositSharesChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SharesChangeFilter>;
};

export type DepositFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<DepositFilter>>>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<DepositFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChanges_?: InputMaybe<SharesChangeFilter>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  since?: InputMaybe<Scalars['Int']>;
  since_gt?: InputMaybe<Scalars['Int']>;
  since_gte?: InputMaybe<Scalars['Int']>;
  since_in?: InputMaybe<Array<Scalars['Int']>>;
  since_lt?: InputMaybe<Scalars['Int']>;
  since_lte?: InputMaybe<Scalars['Int']>;
  since_not?: InputMaybe<Scalars['Int']>;
  since_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum DepositOrderBy {
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGES = 'sharesChanges',
  SINCE = 'since',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type DepositorActivity = {
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  depositor: Account;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type DepositorActivityFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<DepositorActivityFilter>>>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<DepositorActivityFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum DepositorActivityOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type DepositorWhitelistPolicy = Policy & {
  __typename: 'DepositorWhitelistPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  depositors: Array<Scalars['Bytes']>;
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  updatedAt: Scalars['Int'];
};

export type DepositorWhitelistPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<DepositorWhitelistPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  depositors?: InputMaybe<Array<Scalars['Bytes']>>;
  depositors_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  depositors_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  depositors_not?: InputMaybe<Array<Scalars['Bytes']>>;
  depositors_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  depositors_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<DepositorWhitelistPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum DepositorWhitelistPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  DEPOSITORS = 'depositors',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  UPDATEDAT = 'updatedAt'
}

export type EntranceRateBurnFee = Fee & {
  __typename: 'EntranceRateBurnFee';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  lastSettled: Scalars['Int'];
  rate: Scalars['BigDecimal'];
  settings: Scalars['String'];
};

export type EntranceRateBurnFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<EntranceRateBurnFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<EntranceRateBurnFeeFilter>>>;
  rate?: InputMaybe<Scalars['BigDecimal']>;
  rate_gt?: InputMaybe<Scalars['BigDecimal']>;
  rate_gte?: InputMaybe<Scalars['BigDecimal']>;
  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  rate_lt?: InputMaybe<Scalars['BigDecimal']>;
  rate_lte?: InputMaybe<Scalars['BigDecimal']>;
  rate_not?: InputMaybe<Scalars['BigDecimal']>;
  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum EntranceRateBurnFeeOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  LASTSETTLED = 'lastSettled',
  RATE = 'rate',
  SETTINGS = 'settings'
}

export type EntranceRateDirectFee = Fee & {
  __typename: 'EntranceRateDirectFee';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  lastSettled: Scalars['Int'];
  rate: Scalars['BigDecimal'];
  recipient?: Maybe<Account>;
  settings: Scalars['String'];
};

export type EntranceRateDirectFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<EntranceRateDirectFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<EntranceRateDirectFeeFilter>>>;
  rate?: InputMaybe<Scalars['BigDecimal']>;
  rate_gt?: InputMaybe<Scalars['BigDecimal']>;
  rate_gte?: InputMaybe<Scalars['BigDecimal']>;
  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  rate_lt?: InputMaybe<Scalars['BigDecimal']>;
  rate_lte?: InputMaybe<Scalars['BigDecimal']>;
  rate_not?: InputMaybe<Scalars['BigDecimal']>;
  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  recipient?: InputMaybe<Scalars['String']>;
  recipient_?: InputMaybe<AccountFilter>;
  recipient_contains?: InputMaybe<Scalars['String']>;
  recipient_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_ends_with?: InputMaybe<Scalars['String']>;
  recipient_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_gt?: InputMaybe<Scalars['String']>;
  recipient_gte?: InputMaybe<Scalars['String']>;
  recipient_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_lt?: InputMaybe<Scalars['String']>;
  recipient_lte?: InputMaybe<Scalars['String']>;
  recipient_not?: InputMaybe<Scalars['String']>;
  recipient_not_contains?: InputMaybe<Scalars['String']>;
  recipient_not_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_not_starts_with?: InputMaybe<Scalars['String']>;
  recipient_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_starts_with?: InputMaybe<Scalars['String']>;
  recipient_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum EntranceRateDirectFeeOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  LASTSETTLED = 'lastSettled',
  RATE = 'rate',
  RECIPIENT = 'recipient',
  RECIPIENT__ASSETMANAGERSINCE = 'recipient__assetManagerSince',
  RECIPIENT__AUTHUSERSINCE = 'recipient__authUserSince',
  RECIPIENT__DEPOSITORSINCE = 'recipient__depositorSince',
  RECIPIENT__ID = 'recipient__id',
  RECIPIENT__ISASSETMANAGER = 'recipient__isAssetManager',
  RECIPIENT__ISAUTHUSER = 'recipient__isAuthUser',
  RECIPIENT__ISDEPOSITOR = 'recipient__isDepositor',
  RECIPIENT__ISOWNER = 'recipient__isOwner',
  RECIPIENT__OWNERSINCE = 'recipient__ownerSince',
  SETTINGS = 'settings'
}

export type ExitRateBurnFee = Fee & {
  __typename: 'ExitRateBurnFee';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  inKindRate: Scalars['BigDecimal'];
  lastSettled: Scalars['Int'];
  settings: Scalars['String'];
  specificAssetsRate: Scalars['BigDecimal'];
};

export type ExitRateBurnFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ExitRateBurnFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  inKindRate?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_gt?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_gte?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  inKindRate_lt?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_lte?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_not?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<ExitRateBurnFeeFilter>>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  specificAssetsRate?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_gt?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_gte?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  specificAssetsRate_lt?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_lte?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_not?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export enum ExitRateBurnFeeOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  INKINDRATE = 'inKindRate',
  LASTSETTLED = 'lastSettled',
  SETTINGS = 'settings',
  SPECIFICASSETSRATE = 'specificAssetsRate'
}

export type ExitRateDirectFee = Fee & {
  __typename: 'ExitRateDirectFee';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  inKindRate: Scalars['BigDecimal'];
  lastSettled: Scalars['Int'];
  recipient?: Maybe<Account>;
  settings: Scalars['String'];
  specificAssetsRate: Scalars['BigDecimal'];
};

export type ExitRateDirectFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ExitRateDirectFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  inKindRate?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_gt?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_gte?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  inKindRate_lt?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_lte?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_not?: InputMaybe<Scalars['BigDecimal']>;
  inKindRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<ExitRateDirectFeeFilter>>>;
  recipient?: InputMaybe<Scalars['String']>;
  recipient_?: InputMaybe<AccountFilter>;
  recipient_contains?: InputMaybe<Scalars['String']>;
  recipient_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_ends_with?: InputMaybe<Scalars['String']>;
  recipient_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_gt?: InputMaybe<Scalars['String']>;
  recipient_gte?: InputMaybe<Scalars['String']>;
  recipient_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_lt?: InputMaybe<Scalars['String']>;
  recipient_lte?: InputMaybe<Scalars['String']>;
  recipient_not?: InputMaybe<Scalars['String']>;
  recipient_not_contains?: InputMaybe<Scalars['String']>;
  recipient_not_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_not_starts_with?: InputMaybe<Scalars['String']>;
  recipient_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_starts_with?: InputMaybe<Scalars['String']>;
  recipient_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  specificAssetsRate?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_gt?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_gte?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  specificAssetsRate_lt?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_lte?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_not?: InputMaybe<Scalars['BigDecimal']>;
  specificAssetsRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export enum ExitRateDirectFeeOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  INKINDRATE = 'inKindRate',
  LASTSETTLED = 'lastSettled',
  RECIPIENT = 'recipient',
  RECIPIENT__ASSETMANAGERSINCE = 'recipient__assetManagerSince',
  RECIPIENT__AUTHUSERSINCE = 'recipient__authUserSince',
  RECIPIENT__DEPOSITORSINCE = 'recipient__depositorSince',
  RECIPIENT__ID = 'recipient__id',
  RECIPIENT__ISASSETMANAGER = 'recipient__isAssetManager',
  RECIPIENT__ISAUTHUSER = 'recipient__isAuthUser',
  RECIPIENT__ISDEPOSITOR = 'recipient__isDepositor',
  RECIPIENT__ISOWNER = 'recipient__isOwner',
  RECIPIENT__OWNERSINCE = 'recipient__ownerSince',
  SETTINGS = 'settings',
  SPECIFICASSETSRATE = 'specificAssetsRate'
}

export type ExternalPosition = {
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  id: Scalars['ID'];
  type: ExternalPositionType;
  vault: Vault;
};


export type ExternalPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export type ExternalPositionAddedEvent = Activity & VaultActivity & {
  __typename: 'ExternalPositionAddedEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type ExternalPositionAddedEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<ExternalPositionAddedEventFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ExternalPositionAddedEventFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ExternalPositionAddedEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ExternalPositionChange = {
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
};

export type ExternalPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ExternalPositionChangeFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ExternalPositionChangeFilter>>>;
};

export enum ExternalPositionChangeOrderBy {
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id'
}

export type ExternalPositionRemovedEvent = Activity & VaultActivity & {
  __typename: 'ExternalPositionRemovedEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type ExternalPositionRemovedEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<ExternalPositionRemovedEventFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ExternalPositionRemovedEventFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ExternalPositionRemovedEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ExternalPositionType = {
  __typename: 'ExternalPositionType';
  externalPositions: Array<ExternalPosition>;
  id: Scalars['ID'];
  label: Scalars['String'];
};


export type ExternalPositionTypeExternalPositionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionFilter>;
};

export type ExternalPositionTypeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ExternalPositionTypeFilter>>>;
  externalPositions_?: InputMaybe<ExternalPositionFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  label?: InputMaybe<Scalars['String']>;
  label_contains?: InputMaybe<Scalars['String']>;
  label_contains_nocase?: InputMaybe<Scalars['String']>;
  label_ends_with?: InputMaybe<Scalars['String']>;
  label_ends_with_nocase?: InputMaybe<Scalars['String']>;
  label_gt?: InputMaybe<Scalars['String']>;
  label_gte?: InputMaybe<Scalars['String']>;
  label_in?: InputMaybe<Array<Scalars['String']>>;
  label_lt?: InputMaybe<Scalars['String']>;
  label_lte?: InputMaybe<Scalars['String']>;
  label_not?: InputMaybe<Scalars['String']>;
  label_not_contains?: InputMaybe<Scalars['String']>;
  label_not_contains_nocase?: InputMaybe<Scalars['String']>;
  label_not_ends_with?: InputMaybe<Scalars['String']>;
  label_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  label_not_in?: InputMaybe<Array<Scalars['String']>>;
  label_not_starts_with?: InputMaybe<Scalars['String']>;
  label_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  label_starts_with?: InputMaybe<Scalars['String']>;
  label_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<ExternalPositionTypeFilter>>>;
};

export enum ExternalPositionTypeOrderBy {
  EXTERNALPOSITIONS = 'externalPositions',
  ID = 'id',
  LABEL = 'label'
}

export type ExternalPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<ExternalPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ExternalPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ExternalPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  ID = 'id',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type Fee = {
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  settings: Scalars['String'];
};

export type FeeSharesAllocationChangedEvent = Activity & DepositorActivity & SharesChange & VaultActivity & {
  __typename: 'FeeSharesAllocationChangedEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  fee?: Maybe<Fee>;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type FeeSharesAllocationChangedEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<FeeSharesAllocationChangedEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee?: InputMaybe<Scalars['String']>;
  fee_?: InputMaybe<FeeFilter>;
  fee_contains?: InputMaybe<Scalars['String']>;
  fee_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_ends_with?: InputMaybe<Scalars['String']>;
  fee_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_gt?: InputMaybe<Scalars['String']>;
  fee_gte?: InputMaybe<Scalars['String']>;
  fee_in?: InputMaybe<Array<Scalars['String']>>;
  fee_lt?: InputMaybe<Scalars['String']>;
  fee_lte?: InputMaybe<Scalars['String']>;
  fee_not?: InputMaybe<Scalars['String']>;
  fee_not_contains?: InputMaybe<Scalars['String']>;
  fee_not_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_not_ends_with?: InputMaybe<Scalars['String']>;
  fee_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_not_in?: InputMaybe<Array<Scalars['String']>>;
  fee_not_starts_with?: InputMaybe<Scalars['String']>;
  fee_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee_starts_with?: InputMaybe<Scalars['String']>;
  fee_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<FeeSharesAllocationChangedEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum FeeSharesAllocationChangedEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  FEE = 'fee',
  FEE__CREATEDAT = 'fee__createdAt',
  FEE__FEE = 'fee__fee',
  FEE__FEETYPE = 'fee__feeType',
  FEE__ID = 'fee__id',
  FEE__SETTINGS = 'fee__settings',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type FeeSharesBurnedEvent = Activity & SharesChange & VaultActivity & {
  __typename: 'FeeSharesBurnedEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  fee?: Maybe<Fee>;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type FeeSharesBurnedEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<FeeSharesBurnedEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee?: InputMaybe<Scalars['String']>;
  fee_?: InputMaybe<FeeFilter>;
  fee_contains?: InputMaybe<Scalars['String']>;
  fee_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_ends_with?: InputMaybe<Scalars['String']>;
  fee_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_gt?: InputMaybe<Scalars['String']>;
  fee_gte?: InputMaybe<Scalars['String']>;
  fee_in?: InputMaybe<Array<Scalars['String']>>;
  fee_lt?: InputMaybe<Scalars['String']>;
  fee_lte?: InputMaybe<Scalars['String']>;
  fee_not?: InputMaybe<Scalars['String']>;
  fee_not_contains?: InputMaybe<Scalars['String']>;
  fee_not_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_not_ends_with?: InputMaybe<Scalars['String']>;
  fee_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_not_in?: InputMaybe<Array<Scalars['String']>>;
  fee_not_starts_with?: InputMaybe<Scalars['String']>;
  fee_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee_starts_with?: InputMaybe<Scalars['String']>;
  fee_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<FeeSharesBurnedEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum FeeSharesBurnedEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  FEE = 'fee',
  FEE__CREATEDAT = 'fee__createdAt',
  FEE__FEE = 'fee__fee',
  FEE__FEETYPE = 'fee__feeType',
  FEE__ID = 'fee__id',
  FEE__SETTINGS = 'fee__settings',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type FeeSharesPaidEvent = Activity & DepositorActivity & SharesChange & VaultActivity & {
  __typename: 'FeeSharesPaidEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  fee?: Maybe<Fee>;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type FeeSharesPaidEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<FeeSharesPaidEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee?: InputMaybe<Scalars['String']>;
  fee_?: InputMaybe<FeeFilter>;
  fee_contains?: InputMaybe<Scalars['String']>;
  fee_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_ends_with?: InputMaybe<Scalars['String']>;
  fee_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_gt?: InputMaybe<Scalars['String']>;
  fee_gte?: InputMaybe<Scalars['String']>;
  fee_in?: InputMaybe<Array<Scalars['String']>>;
  fee_lt?: InputMaybe<Scalars['String']>;
  fee_lte?: InputMaybe<Scalars['String']>;
  fee_not?: InputMaybe<Scalars['String']>;
  fee_not_contains?: InputMaybe<Scalars['String']>;
  fee_not_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_not_ends_with?: InputMaybe<Scalars['String']>;
  fee_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_not_in?: InputMaybe<Array<Scalars['String']>>;
  fee_not_starts_with?: InputMaybe<Scalars['String']>;
  fee_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee_starts_with?: InputMaybe<Scalars['String']>;
  fee_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<FeeSharesPaidEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum FeeSharesPaidEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  FEE = 'fee',
  FEE__CREATEDAT = 'fee__createdAt',
  FEE__FEE = 'fee__fee',
  FEE__FEETYPE = 'fee__feeType',
  FEE__ID = 'fee__id',
  FEE__SETTINGS = 'fee__settings',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type FeeSharesReceivedEvent = Activity & DepositorActivity & SharesChange & VaultActivity & {
  __typename: 'FeeSharesReceivedEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  fee?: Maybe<Fee>;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type FeeSharesReceivedEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<FeeSharesReceivedEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee?: InputMaybe<Scalars['String']>;
  fee_?: InputMaybe<FeeFilter>;
  fee_contains?: InputMaybe<Scalars['String']>;
  fee_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_ends_with?: InputMaybe<Scalars['String']>;
  fee_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_gt?: InputMaybe<Scalars['String']>;
  fee_gte?: InputMaybe<Scalars['String']>;
  fee_in?: InputMaybe<Array<Scalars['String']>>;
  fee_lt?: InputMaybe<Scalars['String']>;
  fee_lte?: InputMaybe<Scalars['String']>;
  fee_not?: InputMaybe<Scalars['String']>;
  fee_not_contains?: InputMaybe<Scalars['String']>;
  fee_not_contains_nocase?: InputMaybe<Scalars['String']>;
  fee_not_ends_with?: InputMaybe<Scalars['String']>;
  fee_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  fee_not_in?: InputMaybe<Array<Scalars['String']>>;
  fee_not_starts_with?: InputMaybe<Scalars['String']>;
  fee_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee_starts_with?: InputMaybe<Scalars['String']>;
  fee_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<FeeSharesReceivedEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum FeeSharesReceivedEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  FEE = 'fee',
  FEE__CREATEDAT = 'fee__createdAt',
  FEE__FEE = 'fee__fee',
  FEE__FEETYPE = 'fee__feeType',
  FEE__ID = 'fee__id',
  FEE__SETTINGS = 'fee__settings',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export enum FeeType {
  ENTRANCERATEBURN = 'EntranceRateBurn',
  ENTRANCERATEDIRECT = 'EntranceRateDirect',
  EXITRATEBURN = 'ExitRateBurn',
  EXITRATEDIRECT = 'ExitRateDirect',
  MANAGEMENT = 'Management',
  MINSHARESSUPPLY = 'MinSharesSupply',
  PERFORMANCE = 'Performance',
  UNKNOWN = 'Unknown'
}

export type FeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<FeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<FeeFilter>>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum FeeOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  SETTINGS = 'settings'
}

export type FreelyTransferableSharesSetEvent = Activity & VaultActivity & {
  __typename: 'FreelyTransferableSharesSetEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type FreelyTransferableSharesSetEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<FreelyTransferableSharesSetEventFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<FreelyTransferableSharesSetEventFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum FreelyTransferableSharesSetEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type GasRelayer = {
  __typename: 'GasRelayer';
  balance: Scalars['BigDecimal'];
  comptroller: Comptroller;
  deposited: Array<GasRelayerDeposited>;
  id: Scalars['ID'];
  transactions: Array<GasRelayerTransaction>;
  withdrawn: Array<GasRelayerWithdrawn>;
};


export type GasRelayerDepositedArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerDepositedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GasRelayerDepositedFilter>;
};


export type GasRelayerTransactionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerTransactionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GasRelayerTransactionFilter>;
};


export type GasRelayerWithdrawnArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerWithdrawnOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GasRelayerWithdrawnFilter>;
};

export type GasRelayerDeposited = Activity & VaultActivity & {
  __typename: 'GasRelayerDeposited';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  gasRelayer: GasRelayer;
  gasRelayerAssetAmount: AssetAmount;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type GasRelayerDepositedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<GasRelayerDepositedFilter>>>;
  gasRelayer?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_?: InputMaybe<AssetAmountFilter>;
  gasRelayerAssetAmount_contains?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_gt?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_gte?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayerAssetAmount_lt?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_lte?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_contains?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayerAssetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_?: InputMaybe<GasRelayerFilter>;
  gasRelayer_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_gt?: InputMaybe<Scalars['String']>;
  gasRelayer_gte?: InputMaybe<Scalars['String']>;
  gasRelayer_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_lt?: InputMaybe<Scalars['String']>;
  gasRelayer_lte?: InputMaybe<Scalars['String']>;
  gasRelayer_not?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_not_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GasRelayerDepositedFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GasRelayerDepositedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  GASRELAYER = 'gasRelayer',
  GASRELAYERASSETAMOUNT = 'gasRelayerAssetAmount',
  GASRELAYERASSETAMOUNT__AMOUNT = 'gasRelayerAssetAmount__amount',
  GASRELAYERASSETAMOUNT__ID = 'gasRelayerAssetAmount__id',
  GASRELAYERASSETAMOUNT__TIMESTAMP = 'gasRelayerAssetAmount__timestamp',
  GASRELAYERASSETAMOUNT__VALUEAUD = 'gasRelayerAssetAmount__valueAud',
  GASRELAYERASSETAMOUNT__VALUEBTC = 'gasRelayerAssetAmount__valueBtc',
  GASRELAYERASSETAMOUNT__VALUECHF = 'gasRelayerAssetAmount__valueChf',
  GASRELAYERASSETAMOUNT__VALUEDENOMINATION = 'gasRelayerAssetAmount__valueDenomination',
  GASRELAYERASSETAMOUNT__VALUEETH = 'gasRelayerAssetAmount__valueEth',
  GASRELAYERASSETAMOUNT__VALUEEUR = 'gasRelayerAssetAmount__valueEur',
  GASRELAYERASSETAMOUNT__VALUEGBP = 'gasRelayerAssetAmount__valueGbp',
  GASRELAYERASSETAMOUNT__VALUEJPY = 'gasRelayerAssetAmount__valueJpy',
  GASRELAYERASSETAMOUNT__VALUEUSD = 'gasRelayerAssetAmount__valueUsd',
  GASRELAYER__BALANCE = 'gasRelayer__balance',
  GASRELAYER__ID = 'gasRelayer__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type GasRelayerTransaction = {
  __typename: 'GasRelayerTransaction';
  authorizer: Scalars['Bytes'];
  gasRelayer: GasRelayer;
  id: Scalars['ID'];
  invokedSelector: Scalars['String'];
  successful: Scalars['Boolean'];
};

export type GasRelayerTransactionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<GasRelayerTransactionFilter>>>;
  authorizer?: InputMaybe<Scalars['Bytes']>;
  authorizer_contains?: InputMaybe<Scalars['Bytes']>;
  authorizer_gt?: InputMaybe<Scalars['Bytes']>;
  authorizer_gte?: InputMaybe<Scalars['Bytes']>;
  authorizer_in?: InputMaybe<Array<Scalars['Bytes']>>;
  authorizer_lt?: InputMaybe<Scalars['Bytes']>;
  authorizer_lte?: InputMaybe<Scalars['Bytes']>;
  authorizer_not?: InputMaybe<Scalars['Bytes']>;
  authorizer_not_contains?: InputMaybe<Scalars['Bytes']>;
  authorizer_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  gasRelayer?: InputMaybe<Scalars['String']>;
  gasRelayer_?: InputMaybe<GasRelayerFilter>;
  gasRelayer_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_gt?: InputMaybe<Scalars['String']>;
  gasRelayer_gte?: InputMaybe<Scalars['String']>;
  gasRelayer_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_lt?: InputMaybe<Scalars['String']>;
  gasRelayer_lte?: InputMaybe<Scalars['String']>;
  gasRelayer_not?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_not_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  invokedSelector?: InputMaybe<Scalars['String']>;
  invokedSelector_contains?: InputMaybe<Scalars['String']>;
  invokedSelector_contains_nocase?: InputMaybe<Scalars['String']>;
  invokedSelector_ends_with?: InputMaybe<Scalars['String']>;
  invokedSelector_ends_with_nocase?: InputMaybe<Scalars['String']>;
  invokedSelector_gt?: InputMaybe<Scalars['String']>;
  invokedSelector_gte?: InputMaybe<Scalars['String']>;
  invokedSelector_in?: InputMaybe<Array<Scalars['String']>>;
  invokedSelector_lt?: InputMaybe<Scalars['String']>;
  invokedSelector_lte?: InputMaybe<Scalars['String']>;
  invokedSelector_not?: InputMaybe<Scalars['String']>;
  invokedSelector_not_contains?: InputMaybe<Scalars['String']>;
  invokedSelector_not_contains_nocase?: InputMaybe<Scalars['String']>;
  invokedSelector_not_ends_with?: InputMaybe<Scalars['String']>;
  invokedSelector_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  invokedSelector_not_in?: InputMaybe<Array<Scalars['String']>>;
  invokedSelector_not_starts_with?: InputMaybe<Scalars['String']>;
  invokedSelector_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  invokedSelector_starts_with?: InputMaybe<Scalars['String']>;
  invokedSelector_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<GasRelayerTransactionFilter>>>;
  successful?: InputMaybe<Scalars['Boolean']>;
  successful_in?: InputMaybe<Array<Scalars['Boolean']>>;
  successful_not?: InputMaybe<Scalars['Boolean']>;
  successful_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
};

export enum GasRelayerTransactionOrderBy {
  AUTHORIZER = 'authorizer',
  GASRELAYER = 'gasRelayer',
  GASRELAYER__BALANCE = 'gasRelayer__balance',
  GASRELAYER__ID = 'gasRelayer__id',
  ID = 'id',
  INVOKEDSELECTOR = 'invokedSelector',
  SUCCESSFUL = 'successful'
}

export type GasRelayerWithdrawn = Activity & VaultActivity & {
  __typename: 'GasRelayerWithdrawn';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  gasRelayer: GasRelayer;
  gasRelayerAssetAmount: AssetAmount;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type GasRelayerWithdrawnFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<GasRelayerWithdrawnFilter>>>;
  gasRelayer?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_?: InputMaybe<AssetAmountFilter>;
  gasRelayerAssetAmount_contains?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_gt?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_gte?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayerAssetAmount_lt?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_lte?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_contains?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayerAssetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayerAssetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_?: InputMaybe<GasRelayerFilter>;
  gasRelayer_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_gt?: InputMaybe<Scalars['String']>;
  gasRelayer_gte?: InputMaybe<Scalars['String']>;
  gasRelayer_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_lt?: InputMaybe<Scalars['String']>;
  gasRelayer_lte?: InputMaybe<Scalars['String']>;
  gasRelayer_not?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains?: InputMaybe<Scalars['String']>;
  gasRelayer_not_contains_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_not_in?: InputMaybe<Array<Scalars['String']>>;
  gasRelayer_not_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with?: InputMaybe<Scalars['String']>;
  gasRelayer_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GasRelayerWithdrawnFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GasRelayerWithdrawnOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  GASRELAYER = 'gasRelayer',
  GASRELAYERASSETAMOUNT = 'gasRelayerAssetAmount',
  GASRELAYERASSETAMOUNT__AMOUNT = 'gasRelayerAssetAmount__amount',
  GASRELAYERASSETAMOUNT__ID = 'gasRelayerAssetAmount__id',
  GASRELAYERASSETAMOUNT__TIMESTAMP = 'gasRelayerAssetAmount__timestamp',
  GASRELAYERASSETAMOUNT__VALUEAUD = 'gasRelayerAssetAmount__valueAud',
  GASRELAYERASSETAMOUNT__VALUEBTC = 'gasRelayerAssetAmount__valueBtc',
  GASRELAYERASSETAMOUNT__VALUECHF = 'gasRelayerAssetAmount__valueChf',
  GASRELAYERASSETAMOUNT__VALUEDENOMINATION = 'gasRelayerAssetAmount__valueDenomination',
  GASRELAYERASSETAMOUNT__VALUEETH = 'gasRelayerAssetAmount__valueEth',
  GASRELAYERASSETAMOUNT__VALUEEUR = 'gasRelayerAssetAmount__valueEur',
  GASRELAYERASSETAMOUNT__VALUEGBP = 'gasRelayerAssetAmount__valueGbp',
  GASRELAYERASSETAMOUNT__VALUEJPY = 'gasRelayerAssetAmount__valueJpy',
  GASRELAYERASSETAMOUNT__VALUEUSD = 'gasRelayerAssetAmount__valueUsd',
  GASRELAYER__BALANCE = 'gasRelayer__balance',
  GASRELAYER__ID = 'gasRelayer__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type GasRelayerFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<GasRelayerFilter>>>;
  balance?: InputMaybe<Scalars['BigDecimal']>;
  balance_gt?: InputMaybe<Scalars['BigDecimal']>;
  balance_gte?: InputMaybe<Scalars['BigDecimal']>;
  balance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  balance_lt?: InputMaybe<Scalars['BigDecimal']>;
  balance_lte?: InputMaybe<Scalars['BigDecimal']>;
  balance_not?: InputMaybe<Scalars['BigDecimal']>;
  balance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposited_?: InputMaybe<GasRelayerDepositedFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GasRelayerFilter>>>;
  transactions_?: InputMaybe<GasRelayerTransactionFilter>;
  withdrawn_?: InputMaybe<GasRelayerWithdrawnFilter>;
};

export enum GasRelayerOrderBy {
  BALANCE = 'balance',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  DEPOSITED = 'deposited',
  ID = 'id',
  TRANSACTIONS = 'transactions',
  WITHDRAWN = 'withdrawn'
}

export type GatedRedemptionQueueSharesWrapper = {
  __typename: 'GatedRedemptionQueueSharesWrapper';
  balances: Array<GatedRedemptionQueueSharesWrapperDepositorBalance>;
  depositApprovals: Array<GatedRedemptionQueueSharesWrapperDepositApproval>;
  duration: Scalars['BigInt'];
  firstWindowStart: Scalars['BigInt'];
  frequency: Scalars['BigInt'];
  id: Scalars['ID'];
  managers: Array<Account>;
  redemptionApprovals: Array<GatedRedemptionQueueSharesWrapperRedemptionApproval>;
  redemptionAsset: Asset;
  redemptionRequests: Array<GatedRedemptionQueueSharesWrapperRedemptionRequest>;
  relativeSharesCap: Scalars['BigDecimal'];
  sharesChanges: Array<GatedRedemptionQueueSharesWrapperSharesChange>;
  transferApprovals: Array<GatedRedemptionQueueSharesWrapperTransferApproval>;
  useDepositApprovals: Scalars['Boolean'];
  useRedemptionApprovals: Scalars['Boolean'];
  useTransferApprovals: Scalars['Boolean'];
  vault: Vault;
};


export type GatedRedemptionQueueSharesWrapperBalancesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceFilter>;
};


export type GatedRedemptionQueueSharesWrapperDepositApprovalsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalFilter>;
};


export type GatedRedemptionQueueSharesWrapperManagersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AccountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AccountFilter>;
};


export type GatedRedemptionQueueSharesWrapperRedemptionApprovalsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalFilter>;
};


export type GatedRedemptionQueueSharesWrapperRedemptionRequestsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestFilter>;
};


export type GatedRedemptionQueueSharesWrapperSharesChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeFilter>;
};


export type GatedRedemptionQueueSharesWrapperTransferApprovalsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalFilter>;
};

export type GatedRedemptionQueueSharesWrapperDeposit = GatedRedemptionQueueSharesWrapperSharesChange & {
  __typename: 'GatedRedemptionQueueSharesWrapperDeposit';
  account: Account;
  amount: Scalars['BigDecimal'];
  asset: Asset;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperDepositApproval = {
  __typename: 'GatedRedemptionQueueSharesWrapperDepositApproval';
  account: Account;
  amount: Scalars['BigDecimal'];
  asset: Asset;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperDepositApprovalFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  account?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<AccountFilter>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['BigDecimal']>;
  amount_gt?: InputMaybe<Scalars['BigDecimal']>;
  amount_gte?: InputMaybe<Scalars['BigDecimal']>;
  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  amount_lt?: InputMaybe<Scalars['BigDecimal']>;
  amount_lte?: InputMaybe<Scalars['BigDecimal']>;
  amount_not?: InputMaybe<Scalars['BigDecimal']>;
  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperDepositApprovalOrderBy {
  ACCOUNT = 'account',
  ACCOUNT__ASSETMANAGERSINCE = 'account__assetManagerSince',
  ACCOUNT__AUTHUSERSINCE = 'account__authUserSince',
  ACCOUNT__DEPOSITORSINCE = 'account__depositorSince',
  ACCOUNT__ID = 'account__id',
  ACCOUNT__ISASSETMANAGER = 'account__isAssetManager',
  ACCOUNT__ISAUTHUSER = 'account__isAuthUser',
  ACCOUNT__ISDEPOSITOR = 'account__isDepositor',
  ACCOUNT__ISOWNER = 'account__isOwner',
  ACCOUNT__OWNERSINCE = 'account__ownerSince',
  AMOUNT = 'amount',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperDepositFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  account?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<AccountFilter>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['BigDecimal']>;
  amount_gt?: InputMaybe<Scalars['BigDecimal']>;
  amount_gte?: InputMaybe<Scalars['BigDecimal']>;
  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  amount_lt?: InputMaybe<Scalars['BigDecimal']>;
  amount_lte?: InputMaybe<Scalars['BigDecimal']>;
  amount_not?: InputMaybe<Scalars['BigDecimal']>;
  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperDepositFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperDepositFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperDepositOrderBy {
  ACCOUNT = 'account',
  ACCOUNT__ASSETMANAGERSINCE = 'account__assetManagerSince',
  ACCOUNT__AUTHUSERSINCE = 'account__authUserSince',
  ACCOUNT__DEPOSITORSINCE = 'account__depositorSince',
  ACCOUNT__ID = 'account__id',
  ACCOUNT__ISASSETMANAGER = 'account__isAssetManager',
  ACCOUNT__ISAUTHUSER = 'account__isAuthUser',
  ACCOUNT__ISDEPOSITOR = 'account__isDepositor',
  ACCOUNT__ISOWNER = 'account__isOwner',
  ACCOUNT__OWNERSINCE = 'account__ownerSince',
  AMOUNT = 'amount',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id',
  SHARES = 'shares',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperDepositorBalance = {
  __typename: 'GatedRedemptionQueueSharesWrapperDepositorBalance';
  account: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperDepositorBalanceFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  account?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<AccountFilter>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperDepositorBalanceOrderBy {
  ACCOUNT = 'account',
  ACCOUNT__ASSETMANAGERSINCE = 'account__assetManagerSince',
  ACCOUNT__AUTHUSERSINCE = 'account__authUserSince',
  ACCOUNT__DEPOSITORSINCE = 'account__depositorSince',
  ACCOUNT__ID = 'account__id',
  ACCOUNT__ISASSETMANAGER = 'account__isAssetManager',
  ACCOUNT__ISAUTHUSER = 'account__isAuthUser',
  ACCOUNT__ISDEPOSITOR = 'account__isDepositor',
  ACCOUNT__ISOWNER = 'account__isOwner',
  ACCOUNT__OWNERSINCE = 'account__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperKick = GatedRedemptionQueueSharesWrapperSharesChange & {
  __typename: 'GatedRedemptionQueueSharesWrapperKick';
  account: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperKickFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  account?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<AccountFilter>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperKickFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperKickFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperKickOrderBy {
  ACCOUNT = 'account',
  ACCOUNT__ASSETMANAGERSINCE = 'account__assetManagerSince',
  ACCOUNT__AUTHUSERSINCE = 'account__authUserSince',
  ACCOUNT__DEPOSITORSINCE = 'account__depositorSince',
  ACCOUNT__ID = 'account__id',
  ACCOUNT__ISASSETMANAGER = 'account__isAssetManager',
  ACCOUNT__ISAUTHUSER = 'account__isAuthUser',
  ACCOUNT__ISDEPOSITOR = 'account__isDepositor',
  ACCOUNT__ISOWNER = 'account__isOwner',
  ACCOUNT__OWNERSINCE = 'account__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperRedemption = GatedRedemptionQueueSharesWrapperSharesChange & {
  __typename: 'GatedRedemptionQueueSharesWrapperRedemption';
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperRedemptionApproval = {
  __typename: 'GatedRedemptionQueueSharesWrapperRedemptionApproval';
  account: Account;
  amount: Scalars['BigDecimal'];
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperRedemptionApprovalFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  account?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<AccountFilter>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  amount?: InputMaybe<Scalars['BigDecimal']>;
  amount_gt?: InputMaybe<Scalars['BigDecimal']>;
  amount_gte?: InputMaybe<Scalars['BigDecimal']>;
  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  amount_lt?: InputMaybe<Scalars['BigDecimal']>;
  amount_lte?: InputMaybe<Scalars['BigDecimal']>;
  amount_not?: InputMaybe<Scalars['BigDecimal']>;
  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperRedemptionApprovalOrderBy {
  ACCOUNT = 'account',
  ACCOUNT__ASSETMANAGERSINCE = 'account__assetManagerSince',
  ACCOUNT__AUTHUSERSINCE = 'account__authUserSince',
  ACCOUNT__DEPOSITORSINCE = 'account__depositorSince',
  ACCOUNT__ID = 'account__id',
  ACCOUNT__ISASSETMANAGER = 'account__isAssetManager',
  ACCOUNT__ISAUTHUSER = 'account__isAuthUser',
  ACCOUNT__ISDEPOSITOR = 'account__isDepositor',
  ACCOUNT__ISOWNER = 'account__isOwner',
  ACCOUNT__OWNERSINCE = 'account__ownerSince',
  AMOUNT = 'amount',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperRedemptionRequest = {
  __typename: 'GatedRedemptionQueueSharesWrapperRedemptionRequest';
  account: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  updatedAt: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperRedemptionRequestFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  account?: InputMaybe<Scalars['String']>;
  account_?: InputMaybe<AccountFilter>;
  account_contains?: InputMaybe<Scalars['String']>;
  account_contains_nocase?: InputMaybe<Scalars['String']>;
  account_ends_with?: InputMaybe<Scalars['String']>;
  account_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_gt?: InputMaybe<Scalars['String']>;
  account_gte?: InputMaybe<Scalars['String']>;
  account_in?: InputMaybe<Array<Scalars['String']>>;
  account_lt?: InputMaybe<Scalars['String']>;
  account_lte?: InputMaybe<Scalars['String']>;
  account_not?: InputMaybe<Scalars['String']>;
  account_not_contains?: InputMaybe<Scalars['String']>;
  account_not_contains_nocase?: InputMaybe<Scalars['String']>;
  account_not_ends_with?: InputMaybe<Scalars['String']>;
  account_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  account_not_in?: InputMaybe<Array<Scalars['String']>>;
  account_not_starts_with?: InputMaybe<Scalars['String']>;
  account_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  account_starts_with?: InputMaybe<Scalars['String']>;
  account_starts_with_nocase?: InputMaybe<Scalars['String']>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperRedemptionRequestOrderBy {
  ACCOUNT = 'account',
  ACCOUNT__ASSETMANAGERSINCE = 'account__assetManagerSince',
  ACCOUNT__AUTHUSERSINCE = 'account__authUserSince',
  ACCOUNT__DEPOSITORSINCE = 'account__depositorSince',
  ACCOUNT__ID = 'account__id',
  ACCOUNT__ISASSETMANAGER = 'account__isAssetManager',
  ACCOUNT__ISAUTHUSER = 'account__isAuthUser',
  ACCOUNT__ISDEPOSITOR = 'account__isDepositor',
  ACCOUNT__ISOWNER = 'account__isOwner',
  ACCOUNT__OWNERSINCE = 'account__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  TIMESTAMP = 'timestamp',
  UPDATEDAT = 'updatedAt',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperRedemptionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperRedemptionOrderBy {
  ID = 'id',
  SHARES = 'shares',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperSharesChange = {
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperSharesChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperSharesChangeOrderBy {
  ID = 'id',
  SHARES = 'shares',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperTransfer = GatedRedemptionQueueSharesWrapperSharesChange & {
  __typename: 'GatedRedemptionQueueSharesWrapperTransfer';
  id: Scalars['ID'];
  recipient: Account;
  sender: Account;
  shares: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperTransferApproval = {
  __typename: 'GatedRedemptionQueueSharesWrapperTransferApproval';
  amount: Scalars['BigDecimal'];
  id: Scalars['ID'];
  recipient: Account;
  sender: Account;
  timestamp: Scalars['Int'];
  vault: Vault;
  wrapper: GatedRedemptionQueueSharesWrapper;
};

export type GatedRedemptionQueueSharesWrapperTransferApprovalFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  amount?: InputMaybe<Scalars['BigDecimal']>;
  amount_gt?: InputMaybe<Scalars['BigDecimal']>;
  amount_gte?: InputMaybe<Scalars['BigDecimal']>;
  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  amount_lt?: InputMaybe<Scalars['BigDecimal']>;
  amount_lte?: InputMaybe<Scalars['BigDecimal']>;
  amount_not?: InputMaybe<Scalars['BigDecimal']>;
  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalFilter>>>;
  recipient?: InputMaybe<Scalars['String']>;
  recipient_?: InputMaybe<AccountFilter>;
  recipient_contains?: InputMaybe<Scalars['String']>;
  recipient_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_ends_with?: InputMaybe<Scalars['String']>;
  recipient_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_gt?: InputMaybe<Scalars['String']>;
  recipient_gte?: InputMaybe<Scalars['String']>;
  recipient_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_lt?: InputMaybe<Scalars['String']>;
  recipient_lte?: InputMaybe<Scalars['String']>;
  recipient_not?: InputMaybe<Scalars['String']>;
  recipient_not_contains?: InputMaybe<Scalars['String']>;
  recipient_not_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_not_starts_with?: InputMaybe<Scalars['String']>;
  recipient_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_starts_with?: InputMaybe<Scalars['String']>;
  recipient_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['String']>;
  sender_?: InputMaybe<AccountFilter>;
  sender_contains?: InputMaybe<Scalars['String']>;
  sender_contains_nocase?: InputMaybe<Scalars['String']>;
  sender_ends_with?: InputMaybe<Scalars['String']>;
  sender_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender_gt?: InputMaybe<Scalars['String']>;
  sender_gte?: InputMaybe<Scalars['String']>;
  sender_in?: InputMaybe<Array<Scalars['String']>>;
  sender_lt?: InputMaybe<Scalars['String']>;
  sender_lte?: InputMaybe<Scalars['String']>;
  sender_not?: InputMaybe<Scalars['String']>;
  sender_not_contains?: InputMaybe<Scalars['String']>;
  sender_not_contains_nocase?: InputMaybe<Scalars['String']>;
  sender_not_ends_with?: InputMaybe<Scalars['String']>;
  sender_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender_not_in?: InputMaybe<Array<Scalars['String']>>;
  sender_not_starts_with?: InputMaybe<Scalars['String']>;
  sender_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sender_starts_with?: InputMaybe<Scalars['String']>;
  sender_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperTransferApprovalOrderBy {
  AMOUNT = 'amount',
  ID = 'id',
  RECIPIENT = 'recipient',
  RECIPIENT__ASSETMANAGERSINCE = 'recipient__assetManagerSince',
  RECIPIENT__AUTHUSERSINCE = 'recipient__authUserSince',
  RECIPIENT__DEPOSITORSINCE = 'recipient__depositorSince',
  RECIPIENT__ID = 'recipient__id',
  RECIPIENT__ISASSETMANAGER = 'recipient__isAssetManager',
  RECIPIENT__ISAUTHUSER = 'recipient__isAuthUser',
  RECIPIENT__ISDEPOSITOR = 'recipient__isDepositor',
  RECIPIENT__ISOWNER = 'recipient__isOwner',
  RECIPIENT__OWNERSINCE = 'recipient__ownerSince',
  SENDER = 'sender',
  SENDER__ASSETMANAGERSINCE = 'sender__assetManagerSince',
  SENDER__AUTHUSERSINCE = 'sender__authUserSince',
  SENDER__DEPOSITORSINCE = 'sender__depositorSince',
  SENDER__ID = 'sender__id',
  SENDER__ISASSETMANAGER = 'sender__isAssetManager',
  SENDER__ISAUTHUSER = 'sender__isAuthUser',
  SENDER__ISDEPOSITOR = 'sender__isDepositor',
  SENDER__ISOWNER = 'sender__isOwner',
  SENDER__OWNERSINCE = 'sender__ownerSince',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperTransferFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperTransferFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperTransferFilter>>>;
  recipient?: InputMaybe<Scalars['String']>;
  recipient_?: InputMaybe<AccountFilter>;
  recipient_contains?: InputMaybe<Scalars['String']>;
  recipient_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_ends_with?: InputMaybe<Scalars['String']>;
  recipient_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_gt?: InputMaybe<Scalars['String']>;
  recipient_gte?: InputMaybe<Scalars['String']>;
  recipient_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_lt?: InputMaybe<Scalars['String']>;
  recipient_lte?: InputMaybe<Scalars['String']>;
  recipient_not?: InputMaybe<Scalars['String']>;
  recipient_not_contains?: InputMaybe<Scalars['String']>;
  recipient_not_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_not_starts_with?: InputMaybe<Scalars['String']>;
  recipient_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_starts_with?: InputMaybe<Scalars['String']>;
  recipient_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sender?: InputMaybe<Scalars['String']>;
  sender_?: InputMaybe<AccountFilter>;
  sender_contains?: InputMaybe<Scalars['String']>;
  sender_contains_nocase?: InputMaybe<Scalars['String']>;
  sender_ends_with?: InputMaybe<Scalars['String']>;
  sender_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender_gt?: InputMaybe<Scalars['String']>;
  sender_gte?: InputMaybe<Scalars['String']>;
  sender_in?: InputMaybe<Array<Scalars['String']>>;
  sender_lt?: InputMaybe<Scalars['String']>;
  sender_lte?: InputMaybe<Scalars['String']>;
  sender_not?: InputMaybe<Scalars['String']>;
  sender_not_contains?: InputMaybe<Scalars['String']>;
  sender_not_contains_nocase?: InputMaybe<Scalars['String']>;
  sender_not_ends_with?: InputMaybe<Scalars['String']>;
  sender_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sender_not_in?: InputMaybe<Array<Scalars['String']>>;
  sender_not_starts_with?: InputMaybe<Scalars['String']>;
  sender_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sender_starts_with?: InputMaybe<Scalars['String']>;
  sender_starts_with_nocase?: InputMaybe<Scalars['String']>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper?: InputMaybe<Scalars['String']>;
  wrapper_?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
  wrapper_contains?: InputMaybe<Scalars['String']>;
  wrapper_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_gt?: InputMaybe<Scalars['String']>;
  wrapper_gte?: InputMaybe<Scalars['String']>;
  wrapper_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_lt?: InputMaybe<Scalars['String']>;
  wrapper_lte?: InputMaybe<Scalars['String']>;
  wrapper_not?: InputMaybe<Scalars['String']>;
  wrapper_not_contains?: InputMaybe<Scalars['String']>;
  wrapper_not_contains_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with?: InputMaybe<Scalars['String']>;
  wrapper_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_not_in?: InputMaybe<Array<Scalars['String']>>;
  wrapper_not_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  wrapper_starts_with?: InputMaybe<Scalars['String']>;
  wrapper_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperTransferOrderBy {
  ID = 'id',
  RECIPIENT = 'recipient',
  RECIPIENT__ASSETMANAGERSINCE = 'recipient__assetManagerSince',
  RECIPIENT__AUTHUSERSINCE = 'recipient__authUserSince',
  RECIPIENT__DEPOSITORSINCE = 'recipient__depositorSince',
  RECIPIENT__ID = 'recipient__id',
  RECIPIENT__ISASSETMANAGER = 'recipient__isAssetManager',
  RECIPIENT__ISAUTHUSER = 'recipient__isAuthUser',
  RECIPIENT__ISDEPOSITOR = 'recipient__isDepositor',
  RECIPIENT__ISOWNER = 'recipient__isOwner',
  RECIPIENT__OWNERSINCE = 'recipient__ownerSince',
  SENDER = 'sender',
  SENDER__ASSETMANAGERSINCE = 'sender__assetManagerSince',
  SENDER__AUTHUSERSINCE = 'sender__authUserSince',
  SENDER__DEPOSITORSINCE = 'sender__depositorSince',
  SENDER__ID = 'sender__id',
  SENDER__ISASSETMANAGER = 'sender__isAssetManager',
  SENDER__ISAUTHUSER = 'sender__isAuthUser',
  SENDER__ISDEPOSITOR = 'sender__isDepositor',
  SENDER__ISOWNER = 'sender__isOwner',
  SENDER__OWNERSINCE = 'sender__ownerSince',
  SHARES = 'shares',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WRAPPER = 'wrapper',
  WRAPPER__DURATION = 'wrapper__duration',
  WRAPPER__FIRSTWINDOWSTART = 'wrapper__firstWindowStart',
  WRAPPER__FREQUENCY = 'wrapper__frequency',
  WRAPPER__ID = 'wrapper__id',
  WRAPPER__RELATIVESHARESCAP = 'wrapper__relativeSharesCap',
  WRAPPER__USEDEPOSITAPPROVALS = 'wrapper__useDepositApprovals',
  WRAPPER__USEREDEMPTIONAPPROVALS = 'wrapper__useRedemptionApprovals',
  WRAPPER__USETRANSFERAPPROVALS = 'wrapper__useTransferApprovals'
}

export type GatedRedemptionQueueSharesWrapperFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperFilter>>>;
  balances_?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceFilter>;
  depositApprovals_?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalFilter>;
  duration?: InputMaybe<Scalars['BigInt']>;
  duration_gt?: InputMaybe<Scalars['BigInt']>;
  duration_gte?: InputMaybe<Scalars['BigInt']>;
  duration_in?: InputMaybe<Array<Scalars['BigInt']>>;
  duration_lt?: InputMaybe<Scalars['BigInt']>;
  duration_lte?: InputMaybe<Scalars['BigInt']>;
  duration_not?: InputMaybe<Scalars['BigInt']>;
  duration_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  firstWindowStart?: InputMaybe<Scalars['BigInt']>;
  firstWindowStart_gt?: InputMaybe<Scalars['BigInt']>;
  firstWindowStart_gte?: InputMaybe<Scalars['BigInt']>;
  firstWindowStart_in?: InputMaybe<Array<Scalars['BigInt']>>;
  firstWindowStart_lt?: InputMaybe<Scalars['BigInt']>;
  firstWindowStart_lte?: InputMaybe<Scalars['BigInt']>;
  firstWindowStart_not?: InputMaybe<Scalars['BigInt']>;
  firstWindowStart_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  frequency?: InputMaybe<Scalars['BigInt']>;
  frequency_gt?: InputMaybe<Scalars['BigInt']>;
  frequency_gte?: InputMaybe<Scalars['BigInt']>;
  frequency_in?: InputMaybe<Array<Scalars['BigInt']>>;
  frequency_lt?: InputMaybe<Scalars['BigInt']>;
  frequency_lte?: InputMaybe<Scalars['BigInt']>;
  frequency_not?: InputMaybe<Scalars['BigInt']>;
  frequency_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  managers?: InputMaybe<Array<Scalars['String']>>;
  managers_?: InputMaybe<AccountFilter>;
  managers_contains?: InputMaybe<Array<Scalars['String']>>;
  managers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  managers_not?: InputMaybe<Array<Scalars['String']>>;
  managers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  managers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  or?: InputMaybe<Array<InputMaybe<GatedRedemptionQueueSharesWrapperFilter>>>;
  redemptionApprovals_?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalFilter>;
  redemptionAsset?: InputMaybe<Scalars['String']>;
  redemptionAsset_?: InputMaybe<AssetFilter>;
  redemptionAsset_contains?: InputMaybe<Scalars['String']>;
  redemptionAsset_contains_nocase?: InputMaybe<Scalars['String']>;
  redemptionAsset_ends_with?: InputMaybe<Scalars['String']>;
  redemptionAsset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  redemptionAsset_gt?: InputMaybe<Scalars['String']>;
  redemptionAsset_gte?: InputMaybe<Scalars['String']>;
  redemptionAsset_in?: InputMaybe<Array<Scalars['String']>>;
  redemptionAsset_lt?: InputMaybe<Scalars['String']>;
  redemptionAsset_lte?: InputMaybe<Scalars['String']>;
  redemptionAsset_not?: InputMaybe<Scalars['String']>;
  redemptionAsset_not_contains?: InputMaybe<Scalars['String']>;
  redemptionAsset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  redemptionAsset_not_ends_with?: InputMaybe<Scalars['String']>;
  redemptionAsset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  redemptionAsset_not_in?: InputMaybe<Array<Scalars['String']>>;
  redemptionAsset_not_starts_with?: InputMaybe<Scalars['String']>;
  redemptionAsset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  redemptionAsset_starts_with?: InputMaybe<Scalars['String']>;
  redemptionAsset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  redemptionRequests_?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestFilter>;
  relativeSharesCap?: InputMaybe<Scalars['BigDecimal']>;
  relativeSharesCap_gt?: InputMaybe<Scalars['BigDecimal']>;
  relativeSharesCap_gte?: InputMaybe<Scalars['BigDecimal']>;
  relativeSharesCap_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  relativeSharesCap_lt?: InputMaybe<Scalars['BigDecimal']>;
  relativeSharesCap_lte?: InputMaybe<Scalars['BigDecimal']>;
  relativeSharesCap_not?: InputMaybe<Scalars['BigDecimal']>;
  relativeSharesCap_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sharesChanges_?: InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeFilter>;
  transferApprovals_?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalFilter>;
  useDepositApprovals?: InputMaybe<Scalars['Boolean']>;
  useDepositApprovals_in?: InputMaybe<Array<Scalars['Boolean']>>;
  useDepositApprovals_not?: InputMaybe<Scalars['Boolean']>;
  useDepositApprovals_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  useRedemptionApprovals?: InputMaybe<Scalars['Boolean']>;
  useRedemptionApprovals_in?: InputMaybe<Array<Scalars['Boolean']>>;
  useRedemptionApprovals_not?: InputMaybe<Scalars['Boolean']>;
  useRedemptionApprovals_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  useTransferApprovals?: InputMaybe<Scalars['Boolean']>;
  useTransferApprovals_in?: InputMaybe<Array<Scalars['Boolean']>>;
  useTransferApprovals_not?: InputMaybe<Scalars['Boolean']>;
  useTransferApprovals_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum GatedRedemptionQueueSharesWrapperOrderBy {
  BALANCES = 'balances',
  DEPOSITAPPROVALS = 'depositApprovals',
  DURATION = 'duration',
  FIRSTWINDOWSTART = 'firstWindowStart',
  FREQUENCY = 'frequency',
  ID = 'id',
  MANAGERS = 'managers',
  REDEMPTIONAPPROVALS = 'redemptionApprovals',
  REDEMPTIONASSET = 'redemptionAsset',
  REDEMPTIONASSET__DECIMALS = 'redemptionAsset__decimals',
  REDEMPTIONASSET__ID = 'redemptionAsset__id',
  REDEMPTIONASSET__NAME = 'redemptionAsset__name',
  REDEMPTIONASSET__SYMBOL = 'redemptionAsset__symbol',
  REDEMPTIONREQUESTS = 'redemptionRequests',
  RELATIVESHARESCAP = 'relativeSharesCap',
  SHARESCHANGES = 'sharesChanges',
  TRANSFERAPPROVALS = 'transferApprovals',
  USEDEPOSITAPPROVALS = 'useDepositApprovals',
  USEREDEMPTIONAPPROVALS = 'useRedemptionApprovals',
  USETRANSFERAPPROVALS = 'useTransferApprovals',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type GuaranteedRedemptionPolicy = Policy & {
  __typename: 'GuaranteedRedemptionPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  duration: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  startTimestamp: Scalars['Int'];
};

export type GuaranteedRedemptionPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<GuaranteedRedemptionPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  duration?: InputMaybe<Scalars['Int']>;
  duration_gt?: InputMaybe<Scalars['Int']>;
  duration_gte?: InputMaybe<Scalars['Int']>;
  duration_in?: InputMaybe<Array<Scalars['Int']>>;
  duration_lt?: InputMaybe<Scalars['Int']>;
  duration_lte?: InputMaybe<Scalars['Int']>;
  duration_not?: InputMaybe<Scalars['Int']>;
  duration_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<GuaranteedRedemptionPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  startTimestamp?: InputMaybe<Scalars['Int']>;
  startTimestamp_gt?: InputMaybe<Scalars['Int']>;
  startTimestamp_gte?: InputMaybe<Scalars['Int']>;
  startTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  startTimestamp_lt?: InputMaybe<Scalars['Int']>;
  startTimestamp_lte?: InputMaybe<Scalars['Int']>;
  startTimestamp_not?: InputMaybe<Scalars['Int']>;
  startTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum GuaranteedRedemptionPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  DURATION = 'duration',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  STARTTIMESTAMP = 'startTimestamp'
}

export type KilnStaking = {
  __typename: 'KilnStaking';
  id: Scalars['ID'];
};

export type KilnStakingPosition = ExternalPosition & {
  __typename: 'KilnStakingPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  id: Scalars['ID'];
  publicKeys: Array<Scalars['Bytes']>;
  stakedEthAmount: Scalars['BigDecimal'];
  type: ExternalPositionType;
  vault: Vault;
};


export type KilnStakingPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export enum KilnStakingPositionActionClaimType {
  ALL = 'All',
  CONSENSUSLAYER = 'ConsensusLayer',
  EXECUTIONLAYER = 'ExecutionLayer'
}

export type KilnStakingPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'KilnStakingPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  assetAmount?: Maybe<AssetAmount>;
  claimType?: Maybe<KilnStakingPositionActionClaimType>;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  kilnStakingPositionChangeType: KilnStakingPositionChangeType;
  publicKeys: Array<Scalars['Bytes']>;
  stakingContractAddress?: Maybe<Scalars['Bytes']>;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export enum KilnStakingPositionChangeType {
  CLAIMFEES = 'ClaimFees',
  STAKE = 'Stake',
  WITHDRAWETH = 'WithdrawEth'
}

export type KilnStakingPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<KilnStakingPositionChangeFilter>>>;
  assetAmount?: InputMaybe<Scalars['String']>;
  assetAmount_?: InputMaybe<AssetAmountFilter>;
  assetAmount_contains?: InputMaybe<Scalars['String']>;
  assetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_ends_with?: InputMaybe<Scalars['String']>;
  assetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_gt?: InputMaybe<Scalars['String']>;
  assetAmount_gte?: InputMaybe<Scalars['String']>;
  assetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  assetAmount_lt?: InputMaybe<Scalars['String']>;
  assetAmount_lte?: InputMaybe<Scalars['String']>;
  assetAmount_not?: InputMaybe<Scalars['String']>;
  assetAmount_not_contains?: InputMaybe<Scalars['String']>;
  assetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  assetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  assetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  assetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_starts_with?: InputMaybe<Scalars['String']>;
  assetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  claimType?: InputMaybe<KilnStakingPositionActionClaimType>;
  claimType_in?: InputMaybe<Array<KilnStakingPositionActionClaimType>>;
  claimType_not?: InputMaybe<KilnStakingPositionActionClaimType>;
  claimType_not_in?: InputMaybe<Array<KilnStakingPositionActionClaimType>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  kilnStakingPositionChangeType?: InputMaybe<KilnStakingPositionChangeType>;
  kilnStakingPositionChangeType_in?: InputMaybe<Array<KilnStakingPositionChangeType>>;
  kilnStakingPositionChangeType_not?: InputMaybe<KilnStakingPositionChangeType>;
  kilnStakingPositionChangeType_not_in?: InputMaybe<Array<KilnStakingPositionChangeType>>;
  or?: InputMaybe<Array<InputMaybe<KilnStakingPositionChangeFilter>>>;
  publicKeys?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_not?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  stakingContractAddress?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_contains?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_gt?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_gte?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;
  stakingContractAddress_lt?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_lte?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_not?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_not_contains?: InputMaybe<Scalars['Bytes']>;
  stakingContractAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum KilnStakingPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSETAMOUNT = 'assetAmount',
  ASSETAMOUNT__AMOUNT = 'assetAmount__amount',
  ASSETAMOUNT__ID = 'assetAmount__id',
  ASSETAMOUNT__TIMESTAMP = 'assetAmount__timestamp',
  ASSETAMOUNT__VALUEAUD = 'assetAmount__valueAud',
  ASSETAMOUNT__VALUEBTC = 'assetAmount__valueBtc',
  ASSETAMOUNT__VALUECHF = 'assetAmount__valueChf',
  ASSETAMOUNT__VALUEDENOMINATION = 'assetAmount__valueDenomination',
  ASSETAMOUNT__VALUEETH = 'assetAmount__valueEth',
  ASSETAMOUNT__VALUEEUR = 'assetAmount__valueEur',
  ASSETAMOUNT__VALUEGBP = 'assetAmount__valueGbp',
  ASSETAMOUNT__VALUEJPY = 'assetAmount__valueJpy',
  ASSETAMOUNT__VALUEUSD = 'assetAmount__valueUsd',
  CLAIMTYPE = 'claimType',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  KILNSTAKINGPOSITIONCHANGETYPE = 'kilnStakingPositionChangeType',
  PUBLICKEYS = 'publicKeys',
  STAKINGCONTRACTADDRESS = 'stakingContractAddress',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type KilnStakingPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<KilnStakingPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<KilnStakingPositionFilter>>>;
  publicKeys?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_not?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_not_contains?: InputMaybe<Array<Scalars['Bytes']>>;
  publicKeys_not_contains_nocase?: InputMaybe<Array<Scalars['Bytes']>>;
  stakedEthAmount?: InputMaybe<Scalars['BigDecimal']>;
  stakedEthAmount_gt?: InputMaybe<Scalars['BigDecimal']>;
  stakedEthAmount_gte?: InputMaybe<Scalars['BigDecimal']>;
  stakedEthAmount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  stakedEthAmount_lt?: InputMaybe<Scalars['BigDecimal']>;
  stakedEthAmount_lte?: InputMaybe<Scalars['BigDecimal']>;
  stakedEthAmount_not?: InputMaybe<Scalars['BigDecimal']>;
  stakedEthAmount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum KilnStakingPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  ID = 'id',
  PUBLICKEYS = 'publicKeys',
  STAKEDETHAMOUNT = 'stakedEthAmount',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type KilnStakingFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<KilnStakingFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<KilnStakingFilter>>>;
};

export enum KilnStakingOrderBy {
  ID = 'id'
}

export type LiquityDebtPosition = ExternalPosition & {
  __typename: 'LiquityDebtPosition';
  active: Scalars['Boolean'];
  borrowedBalance: Scalars['BigDecimal'];
  changes: Array<ExternalPositionChange>;
  collateralBalance: Scalars['BigDecimal'];
  id: Scalars['ID'];
  type: ExternalPositionType;
  vault: Vault;
};


export type LiquityDebtPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export type LiquityDebtPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'LiquityDebtPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  externalPosition: ExternalPosition;
  feeAssetAmount?: Maybe<AssetAmount>;
  id: Scalars['ID'];
  incomingAssetAmounts: Array<AssetAmount>;
  liquityDebtPositionChangeType: LiquityDebtPositionChangeType;
  lusdGasCompensationAssetAmount?: Maybe<AssetAmount>;
  outgoingAssetAmount?: Maybe<AssetAmount>;
  timestamp: Scalars['Int'];
  vault: Vault;
};


export type LiquityDebtPositionChangeIncomingAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};

export enum LiquityDebtPositionChangeType {
  ADDCOLLATERAL = 'AddCollateral',
  BORROW = 'Borrow',
  CLOSETROVE = 'CloseTrove',
  OPENTROVE = 'OpenTrove',
  REMOVECOLLATERAL = 'RemoveCollateral',
  REPAY = 'Repay'
}

export type LiquityDebtPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<LiquityDebtPositionChangeFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  feeAssetAmount?: InputMaybe<Scalars['String']>;
  feeAssetAmount_?: InputMaybe<AssetAmountFilter>;
  feeAssetAmount_contains?: InputMaybe<Scalars['String']>;
  feeAssetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  feeAssetAmount_ends_with?: InputMaybe<Scalars['String']>;
  feeAssetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  feeAssetAmount_gt?: InputMaybe<Scalars['String']>;
  feeAssetAmount_gte?: InputMaybe<Scalars['String']>;
  feeAssetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  feeAssetAmount_lt?: InputMaybe<Scalars['String']>;
  feeAssetAmount_lte?: InputMaybe<Scalars['String']>;
  feeAssetAmount_not?: InputMaybe<Scalars['String']>;
  feeAssetAmount_not_contains?: InputMaybe<Scalars['String']>;
  feeAssetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  feeAssetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  feeAssetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  feeAssetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  feeAssetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  feeAssetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  feeAssetAmount_starts_with?: InputMaybe<Scalars['String']>;
  feeAssetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  incomingAssetAmounts?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_?: InputMaybe<AssetAmountFilter>;
  incomingAssetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  liquityDebtPositionChangeType?: InputMaybe<LiquityDebtPositionChangeType>;
  liquityDebtPositionChangeType_in?: InputMaybe<Array<LiquityDebtPositionChangeType>>;
  liquityDebtPositionChangeType_not?: InputMaybe<LiquityDebtPositionChangeType>;
  liquityDebtPositionChangeType_not_in?: InputMaybe<Array<LiquityDebtPositionChangeType>>;
  lusdGasCompensationAssetAmount?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_?: InputMaybe<AssetAmountFilter>;
  lusdGasCompensationAssetAmount_contains?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_ends_with?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_gt?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_gte?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  lusdGasCompensationAssetAmount_lt?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_lte?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_not?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_not_contains?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  lusdGasCompensationAssetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_starts_with?: InputMaybe<Scalars['String']>;
  lusdGasCompensationAssetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<LiquityDebtPositionChangeFilter>>>;
  outgoingAssetAmount?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_?: InputMaybe<AssetAmountFilter>;
  outgoingAssetAmount_contains?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_ends_with?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_gt?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_gte?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssetAmount_lt?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_lte?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_not?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_not_contains?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_starts_with?: InputMaybe<Scalars['String']>;
  outgoingAssetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum LiquityDebtPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  FEEASSETAMOUNT = 'feeAssetAmount',
  FEEASSETAMOUNT__AMOUNT = 'feeAssetAmount__amount',
  FEEASSETAMOUNT__ID = 'feeAssetAmount__id',
  FEEASSETAMOUNT__TIMESTAMP = 'feeAssetAmount__timestamp',
  FEEASSETAMOUNT__VALUEAUD = 'feeAssetAmount__valueAud',
  FEEASSETAMOUNT__VALUEBTC = 'feeAssetAmount__valueBtc',
  FEEASSETAMOUNT__VALUECHF = 'feeAssetAmount__valueChf',
  FEEASSETAMOUNT__VALUEDENOMINATION = 'feeAssetAmount__valueDenomination',
  FEEASSETAMOUNT__VALUEETH = 'feeAssetAmount__valueEth',
  FEEASSETAMOUNT__VALUEEUR = 'feeAssetAmount__valueEur',
  FEEASSETAMOUNT__VALUEGBP = 'feeAssetAmount__valueGbp',
  FEEASSETAMOUNT__VALUEJPY = 'feeAssetAmount__valueJpy',
  FEEASSETAMOUNT__VALUEUSD = 'feeAssetAmount__valueUsd',
  ID = 'id',
  INCOMINGASSETAMOUNTS = 'incomingAssetAmounts',
  LIQUITYDEBTPOSITIONCHANGETYPE = 'liquityDebtPositionChangeType',
  LUSDGASCOMPENSATIONASSETAMOUNT = 'lusdGasCompensationAssetAmount',
  LUSDGASCOMPENSATIONASSETAMOUNT__AMOUNT = 'lusdGasCompensationAssetAmount__amount',
  LUSDGASCOMPENSATIONASSETAMOUNT__ID = 'lusdGasCompensationAssetAmount__id',
  LUSDGASCOMPENSATIONASSETAMOUNT__TIMESTAMP = 'lusdGasCompensationAssetAmount__timestamp',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEAUD = 'lusdGasCompensationAssetAmount__valueAud',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEBTC = 'lusdGasCompensationAssetAmount__valueBtc',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUECHF = 'lusdGasCompensationAssetAmount__valueChf',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEDENOMINATION = 'lusdGasCompensationAssetAmount__valueDenomination',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEETH = 'lusdGasCompensationAssetAmount__valueEth',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEEUR = 'lusdGasCompensationAssetAmount__valueEur',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEGBP = 'lusdGasCompensationAssetAmount__valueGbp',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEJPY = 'lusdGasCompensationAssetAmount__valueJpy',
  LUSDGASCOMPENSATIONASSETAMOUNT__VALUEUSD = 'lusdGasCompensationAssetAmount__valueUsd',
  OUTGOINGASSETAMOUNT = 'outgoingAssetAmount',
  OUTGOINGASSETAMOUNT__AMOUNT = 'outgoingAssetAmount__amount',
  OUTGOINGASSETAMOUNT__ID = 'outgoingAssetAmount__id',
  OUTGOINGASSETAMOUNT__TIMESTAMP = 'outgoingAssetAmount__timestamp',
  OUTGOINGASSETAMOUNT__VALUEAUD = 'outgoingAssetAmount__valueAud',
  OUTGOINGASSETAMOUNT__VALUEBTC = 'outgoingAssetAmount__valueBtc',
  OUTGOINGASSETAMOUNT__VALUECHF = 'outgoingAssetAmount__valueChf',
  OUTGOINGASSETAMOUNT__VALUEDENOMINATION = 'outgoingAssetAmount__valueDenomination',
  OUTGOINGASSETAMOUNT__VALUEETH = 'outgoingAssetAmount__valueEth',
  OUTGOINGASSETAMOUNT__VALUEEUR = 'outgoingAssetAmount__valueEur',
  OUTGOINGASSETAMOUNT__VALUEGBP = 'outgoingAssetAmount__valueGbp',
  OUTGOINGASSETAMOUNT__VALUEJPY = 'outgoingAssetAmount__valueJpy',
  OUTGOINGASSETAMOUNT__VALUEUSD = 'outgoingAssetAmount__valueUsd',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type LiquityDebtPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<LiquityDebtPositionFilter>>>;
  borrowedBalance?: InputMaybe<Scalars['BigDecimal']>;
  borrowedBalance_gt?: InputMaybe<Scalars['BigDecimal']>;
  borrowedBalance_gte?: InputMaybe<Scalars['BigDecimal']>;
  borrowedBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  borrowedBalance_lt?: InputMaybe<Scalars['BigDecimal']>;
  borrowedBalance_lte?: InputMaybe<Scalars['BigDecimal']>;
  borrowedBalance_not?: InputMaybe<Scalars['BigDecimal']>;
  borrowedBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  collateralBalance?: InputMaybe<Scalars['BigDecimal']>;
  collateralBalance_gt?: InputMaybe<Scalars['BigDecimal']>;
  collateralBalance_gte?: InputMaybe<Scalars['BigDecimal']>;
  collateralBalance_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  collateralBalance_lt?: InputMaybe<Scalars['BigDecimal']>;
  collateralBalance_lte?: InputMaybe<Scalars['BigDecimal']>;
  collateralBalance_not?: InputMaybe<Scalars['BigDecimal']>;
  collateralBalance_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<LiquityDebtPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum LiquityDebtPositionOrderBy {
  ACTIVE = 'active',
  BORROWEDBALANCE = 'borrowedBalance',
  CHANGES = 'changes',
  COLLATERALBALANCE = 'collateralBalance',
  ID = 'id',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ManagementFee = Fee & {
  __typename: 'ManagementFee';
  activatedForMigratedFundAt: Scalars['Int'];
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  lastSettled: Scalars['Int'];
  recipient?: Maybe<Account>;
  scaledPerSecondRate: Scalars['BigInt'];
  settings: Scalars['String'];
};

export type ManagementFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activatedForMigratedFundAt?: InputMaybe<Scalars['Int']>;
  activatedForMigratedFundAt_gt?: InputMaybe<Scalars['Int']>;
  activatedForMigratedFundAt_gte?: InputMaybe<Scalars['Int']>;
  activatedForMigratedFundAt_in?: InputMaybe<Array<Scalars['Int']>>;
  activatedForMigratedFundAt_lt?: InputMaybe<Scalars['Int']>;
  activatedForMigratedFundAt_lte?: InputMaybe<Scalars['Int']>;
  activatedForMigratedFundAt_not?: InputMaybe<Scalars['Int']>;
  activatedForMigratedFundAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  and?: InputMaybe<Array<InputMaybe<ManagementFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<ManagementFeeFilter>>>;
  recipient?: InputMaybe<Scalars['String']>;
  recipient_?: InputMaybe<AccountFilter>;
  recipient_contains?: InputMaybe<Scalars['String']>;
  recipient_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_ends_with?: InputMaybe<Scalars['String']>;
  recipient_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_gt?: InputMaybe<Scalars['String']>;
  recipient_gte?: InputMaybe<Scalars['String']>;
  recipient_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_lt?: InputMaybe<Scalars['String']>;
  recipient_lte?: InputMaybe<Scalars['String']>;
  recipient_not?: InputMaybe<Scalars['String']>;
  recipient_not_contains?: InputMaybe<Scalars['String']>;
  recipient_not_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_not_starts_with?: InputMaybe<Scalars['String']>;
  recipient_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_starts_with?: InputMaybe<Scalars['String']>;
  recipient_starts_with_nocase?: InputMaybe<Scalars['String']>;
  scaledPerSecondRate?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRate_gt?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRate_gte?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRate_in?: InputMaybe<Array<Scalars['BigInt']>>;
  scaledPerSecondRate_lt?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRate_lte?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRate_not?: InputMaybe<Scalars['BigInt']>;
  scaledPerSecondRate_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ManagementFeeOrderBy {
  ACTIVATEDFORMIGRATEDFUNDAT = 'activatedForMigratedFundAt',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  LASTSETTLED = 'lastSettled',
  RECIPIENT = 'recipient',
  RECIPIENT__ASSETMANAGERSINCE = 'recipient__assetManagerSince',
  RECIPIENT__AUTHUSERSINCE = 'recipient__authUserSince',
  RECIPIENT__DEPOSITORSINCE = 'recipient__depositorSince',
  RECIPIENT__ID = 'recipient__id',
  RECIPIENT__ISASSETMANAGER = 'recipient__isAssetManager',
  RECIPIENT__ISAUTHUSER = 'recipient__isAuthUser',
  RECIPIENT__ISDEPOSITOR = 'recipient__isDepositor',
  RECIPIENT__ISOWNER = 'recipient__isOwner',
  RECIPIENT__OWNERSINCE = 'recipient__ownerSince',
  SCALEDPERSECONDRATE = 'scaledPerSecondRate',
  SETTINGS = 'settings'
}

export type MapleLiquidityPoolV1 = {
  __typename: 'MapleLiquidityPoolV1';
  id: Scalars['ID'];
  liquidityAsset: Asset;
  rewardsContract?: Maybe<Scalars['Bytes']>;
};

export type MapleLiquidityPoolV1Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<MapleLiquidityPoolV1Filter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityAsset?: InputMaybe<Scalars['String']>;
  liquidityAsset_?: InputMaybe<AssetFilter>;
  liquidityAsset_contains?: InputMaybe<Scalars['String']>;
  liquidityAsset_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_ends_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_gt?: InputMaybe<Scalars['String']>;
  liquidityAsset_gte?: InputMaybe<Scalars['String']>;
  liquidityAsset_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityAsset_lt?: InputMaybe<Scalars['String']>;
  liquidityAsset_lte?: InputMaybe<Scalars['String']>;
  liquidityAsset_not?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_contains?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityAsset_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_starts_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<MapleLiquidityPoolV1Filter>>>;
  rewardsContract?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_contains?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_gt?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_gte?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_in?: InputMaybe<Array<Scalars['Bytes']>>;
  rewardsContract_lt?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_lte?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_not?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_not_contains?: InputMaybe<Scalars['Bytes']>;
  rewardsContract_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
};

export enum MapleLiquidityPoolV1OrderBy {
  ID = 'id',
  LIQUIDITYASSET = 'liquidityAsset',
  LIQUIDITYASSET__DECIMALS = 'liquidityAsset__decimals',
  LIQUIDITYASSET__ID = 'liquidityAsset__id',
  LIQUIDITYASSET__NAME = 'liquidityAsset__name',
  LIQUIDITYASSET__SYMBOL = 'liquidityAsset__symbol',
  REWARDSCONTRACT = 'rewardsContract'
}

export type MapleLiquidityPoolV2 = {
  __typename: 'MapleLiquidityPoolV2';
  id: Scalars['ID'];
  liquidityAsset: Asset;
  manager: Scalars['Bytes'];
};

export type MapleLiquidityPoolV2Filter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<MapleLiquidityPoolV2Filter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidityAsset?: InputMaybe<Scalars['String']>;
  liquidityAsset_?: InputMaybe<AssetFilter>;
  liquidityAsset_contains?: InputMaybe<Scalars['String']>;
  liquidityAsset_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_ends_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_gt?: InputMaybe<Scalars['String']>;
  liquidityAsset_gte?: InputMaybe<Scalars['String']>;
  liquidityAsset_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityAsset_lt?: InputMaybe<Scalars['String']>;
  liquidityAsset_lte?: InputMaybe<Scalars['String']>;
  liquidityAsset_not?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_contains?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_ends_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_in?: InputMaybe<Array<Scalars['String']>>;
  liquidityAsset_not_starts_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  liquidityAsset_starts_with?: InputMaybe<Scalars['String']>;
  liquidityAsset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  manager?: InputMaybe<Scalars['Bytes']>;
  manager_contains?: InputMaybe<Scalars['Bytes']>;
  manager_gt?: InputMaybe<Scalars['Bytes']>;
  manager_gte?: InputMaybe<Scalars['Bytes']>;
  manager_in?: InputMaybe<Array<Scalars['Bytes']>>;
  manager_lt?: InputMaybe<Scalars['Bytes']>;
  manager_lte?: InputMaybe<Scalars['Bytes']>;
  manager_not?: InputMaybe<Scalars['Bytes']>;
  manager_not_contains?: InputMaybe<Scalars['Bytes']>;
  manager_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  or?: InputMaybe<Array<InputMaybe<MapleLiquidityPoolV2Filter>>>;
};

export enum MapleLiquidityPoolV2OrderBy {
  ID = 'id',
  LIQUIDITYASSET = 'liquidityAsset',
  LIQUIDITYASSET__DECIMALS = 'liquidityAsset__decimals',
  LIQUIDITYASSET__ID = 'liquidityAsset__id',
  LIQUIDITYASSET__NAME = 'liquidityAsset__name',
  LIQUIDITYASSET__SYMBOL = 'liquidityAsset__symbol',
  MANAGER = 'manager'
}

export type MapleLiquidityPosition = ExternalPosition & {
  __typename: 'MapleLiquidityPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  id: Scalars['ID'];
  pools: Array<MapleLiquidityPoolV2>;
  type: ExternalPositionType;
  vault: Vault;
};


export type MapleLiquidityPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};


export type MapleLiquidityPositionPoolsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPoolV2OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MapleLiquidityPoolV2Filter>;
};

export type MapleLiquidityPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'MapleLiquidityPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  asset?: Maybe<Asset>;
  assetAmount?: Maybe<AssetAmount>;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  mapleLiquidityPositionChangeType: MapleLiquidityPositionChangeType;
  poolV1?: Maybe<MapleLiquidityPoolV1>;
  poolV2?: Maybe<MapleLiquidityPoolV2>;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export enum MapleLiquidityPositionChangeType {
  CANCELREDEEMV2 = 'CancelRedeemV2',
  CLAIMINTERESTV1 = 'ClaimInterestV1',
  CLAIMREWARDSV1 = 'ClaimRewardsV1',
  INTENDTOREDEEMV1 = 'IntendToRedeemV1',
  LENDANDSTAKEV1 = 'LendAndStakeV1',
  LENDV1 = 'LendV1',
  LENDV2 = 'LendV2',
  REDEEMV1 = 'RedeemV1',
  REDEEMV2 = 'RedeemV2',
  REQUESTREDEEMV2 = 'RequestRedeemV2',
  STAKEV1 = 'StakeV1',
  UNSTAKEANDREDEEMV1 = 'UnstakeAndRedeemV1',
  UNSTAKEV1 = 'UnstakeV1'
}

export type MapleLiquidityPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<MapleLiquidityPositionChangeFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  assetAmount?: InputMaybe<Scalars['String']>;
  assetAmount_?: InputMaybe<AssetAmountFilter>;
  assetAmount_contains?: InputMaybe<Scalars['String']>;
  assetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_ends_with?: InputMaybe<Scalars['String']>;
  assetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_gt?: InputMaybe<Scalars['String']>;
  assetAmount_gte?: InputMaybe<Scalars['String']>;
  assetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  assetAmount_lt?: InputMaybe<Scalars['String']>;
  assetAmount_lte?: InputMaybe<Scalars['String']>;
  assetAmount_not?: InputMaybe<Scalars['String']>;
  assetAmount_not_contains?: InputMaybe<Scalars['String']>;
  assetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  assetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  assetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  assetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_starts_with?: InputMaybe<Scalars['String']>;
  assetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  mapleLiquidityPositionChangeType?: InputMaybe<MapleLiquidityPositionChangeType>;
  mapleLiquidityPositionChangeType_in?: InputMaybe<Array<MapleLiquidityPositionChangeType>>;
  mapleLiquidityPositionChangeType_not?: InputMaybe<MapleLiquidityPositionChangeType>;
  mapleLiquidityPositionChangeType_not_in?: InputMaybe<Array<MapleLiquidityPositionChangeType>>;
  or?: InputMaybe<Array<InputMaybe<MapleLiquidityPositionChangeFilter>>>;
  poolV1?: InputMaybe<Scalars['String']>;
  poolV1_?: InputMaybe<MapleLiquidityPoolV1Filter>;
  poolV1_contains?: InputMaybe<Scalars['String']>;
  poolV1_contains_nocase?: InputMaybe<Scalars['String']>;
  poolV1_ends_with?: InputMaybe<Scalars['String']>;
  poolV1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolV1_gt?: InputMaybe<Scalars['String']>;
  poolV1_gte?: InputMaybe<Scalars['String']>;
  poolV1_in?: InputMaybe<Array<Scalars['String']>>;
  poolV1_lt?: InputMaybe<Scalars['String']>;
  poolV1_lte?: InputMaybe<Scalars['String']>;
  poolV1_not?: InputMaybe<Scalars['String']>;
  poolV1_not_contains?: InputMaybe<Scalars['String']>;
  poolV1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  poolV1_not_ends_with?: InputMaybe<Scalars['String']>;
  poolV1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolV1_not_in?: InputMaybe<Array<Scalars['String']>>;
  poolV1_not_starts_with?: InputMaybe<Scalars['String']>;
  poolV1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  poolV1_starts_with?: InputMaybe<Scalars['String']>;
  poolV1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  poolV2?: InputMaybe<Scalars['String']>;
  poolV2_?: InputMaybe<MapleLiquidityPoolV2Filter>;
  poolV2_contains?: InputMaybe<Scalars['String']>;
  poolV2_contains_nocase?: InputMaybe<Scalars['String']>;
  poolV2_ends_with?: InputMaybe<Scalars['String']>;
  poolV2_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolV2_gt?: InputMaybe<Scalars['String']>;
  poolV2_gte?: InputMaybe<Scalars['String']>;
  poolV2_in?: InputMaybe<Array<Scalars['String']>>;
  poolV2_lt?: InputMaybe<Scalars['String']>;
  poolV2_lte?: InputMaybe<Scalars['String']>;
  poolV2_not?: InputMaybe<Scalars['String']>;
  poolV2_not_contains?: InputMaybe<Scalars['String']>;
  poolV2_not_contains_nocase?: InputMaybe<Scalars['String']>;
  poolV2_not_ends_with?: InputMaybe<Scalars['String']>;
  poolV2_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  poolV2_not_in?: InputMaybe<Array<Scalars['String']>>;
  poolV2_not_starts_with?: InputMaybe<Scalars['String']>;
  poolV2_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  poolV2_starts_with?: InputMaybe<Scalars['String']>;
  poolV2_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum MapleLiquidityPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSET = 'asset',
  ASSETAMOUNT = 'assetAmount',
  ASSETAMOUNT__AMOUNT = 'assetAmount__amount',
  ASSETAMOUNT__ID = 'assetAmount__id',
  ASSETAMOUNT__TIMESTAMP = 'assetAmount__timestamp',
  ASSETAMOUNT__VALUEAUD = 'assetAmount__valueAud',
  ASSETAMOUNT__VALUEBTC = 'assetAmount__valueBtc',
  ASSETAMOUNT__VALUECHF = 'assetAmount__valueChf',
  ASSETAMOUNT__VALUEDENOMINATION = 'assetAmount__valueDenomination',
  ASSETAMOUNT__VALUEETH = 'assetAmount__valueEth',
  ASSETAMOUNT__VALUEEUR = 'assetAmount__valueEur',
  ASSETAMOUNT__VALUEGBP = 'assetAmount__valueGbp',
  ASSETAMOUNT__VALUEJPY = 'assetAmount__valueJpy',
  ASSETAMOUNT__VALUEUSD = 'assetAmount__valueUsd',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  MAPLELIQUIDITYPOSITIONCHANGETYPE = 'mapleLiquidityPositionChangeType',
  POOLV1 = 'poolV1',
  POOLV1__ID = 'poolV1__id',
  POOLV1__REWARDSCONTRACT = 'poolV1__rewardsContract',
  POOLV2 = 'poolV2',
  POOLV2__ID = 'poolV2__id',
  POOLV2__MANAGER = 'poolV2__manager',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type MapleLiquidityPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<MapleLiquidityPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<MapleLiquidityPositionFilter>>>;
  pools?: InputMaybe<Array<Scalars['String']>>;
  pools_?: InputMaybe<MapleLiquidityPoolV2Filter>;
  pools_contains?: InputMaybe<Array<Scalars['String']>>;
  pools_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  pools_not?: InputMaybe<Array<Scalars['String']>>;
  pools_not_contains?: InputMaybe<Array<Scalars['String']>>;
  pools_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum MapleLiquidityPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  ID = 'id',
  POOLS = 'pools',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type MaxConcentrationPolicy = Policy & {
  __typename: 'MaxConcentrationPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  maxConcentration: Scalars['BigDecimal'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type MaxConcentrationPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<MaxConcentrationPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxConcentration?: InputMaybe<Scalars['BigDecimal']>;
  maxConcentration_gt?: InputMaybe<Scalars['BigDecimal']>;
  maxConcentration_gte?: InputMaybe<Scalars['BigDecimal']>;
  maxConcentration_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  maxConcentration_lt?: InputMaybe<Scalars['BigDecimal']>;
  maxConcentration_lte?: InputMaybe<Scalars['BigDecimal']>;
  maxConcentration_not?: InputMaybe<Scalars['BigDecimal']>;
  maxConcentration_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  or?: InputMaybe<Array<InputMaybe<MaxConcentrationPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum MaxConcentrationPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  MAXCONCENTRATION = 'maxConcentration',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type Migration = {
  __typename: 'Migration';
  cancelled: Scalars['Boolean'];
  cancelledTimestamp?: Maybe<Scalars['Int']>;
  comptroller: Comptroller;
  executableTimestamp: Scalars['Int'];
  executed: Scalars['Boolean'];
  executedTimestamp?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  nextRelease: Release;
  prevRelease: Release;
  vault: Vault;
};

export type MigrationFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<MigrationFilter>>>;
  cancelled?: InputMaybe<Scalars['Boolean']>;
  cancelledTimestamp?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_gt?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_gte?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  cancelledTimestamp_lt?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_lte?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_not?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  cancelled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  cancelled_not?: InputMaybe<Scalars['Boolean']>;
  cancelled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  executableTimestamp?: InputMaybe<Scalars['Int']>;
  executableTimestamp_gt?: InputMaybe<Scalars['Int']>;
  executableTimestamp_gte?: InputMaybe<Scalars['Int']>;
  executableTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  executableTimestamp_lt?: InputMaybe<Scalars['Int']>;
  executableTimestamp_lte?: InputMaybe<Scalars['Int']>;
  executableTimestamp_not?: InputMaybe<Scalars['Int']>;
  executableTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  executed?: InputMaybe<Scalars['Boolean']>;
  executedTimestamp?: InputMaybe<Scalars['Int']>;
  executedTimestamp_gt?: InputMaybe<Scalars['Int']>;
  executedTimestamp_gte?: InputMaybe<Scalars['Int']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  executedTimestamp_lt?: InputMaybe<Scalars['Int']>;
  executedTimestamp_lte?: InputMaybe<Scalars['Int']>;
  executedTimestamp_not?: InputMaybe<Scalars['Int']>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  executed_in?: InputMaybe<Array<Scalars['Boolean']>>;
  executed_not?: InputMaybe<Scalars['Boolean']>;
  executed_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nextRelease?: InputMaybe<Scalars['String']>;
  nextRelease_?: InputMaybe<ReleaseFilter>;
  nextRelease_contains?: InputMaybe<Scalars['String']>;
  nextRelease_contains_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_ends_with?: InputMaybe<Scalars['String']>;
  nextRelease_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_gt?: InputMaybe<Scalars['String']>;
  nextRelease_gte?: InputMaybe<Scalars['String']>;
  nextRelease_in?: InputMaybe<Array<Scalars['String']>>;
  nextRelease_lt?: InputMaybe<Scalars['String']>;
  nextRelease_lte?: InputMaybe<Scalars['String']>;
  nextRelease_not?: InputMaybe<Scalars['String']>;
  nextRelease_not_contains?: InputMaybe<Scalars['String']>;
  nextRelease_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_not_ends_with?: InputMaybe<Scalars['String']>;
  nextRelease_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_not_in?: InputMaybe<Array<Scalars['String']>>;
  nextRelease_not_starts_with?: InputMaybe<Scalars['String']>;
  nextRelease_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_starts_with?: InputMaybe<Scalars['String']>;
  nextRelease_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<MigrationFilter>>>;
  prevRelease?: InputMaybe<Scalars['String']>;
  prevRelease_?: InputMaybe<ReleaseFilter>;
  prevRelease_contains?: InputMaybe<Scalars['String']>;
  prevRelease_contains_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_ends_with?: InputMaybe<Scalars['String']>;
  prevRelease_ends_with_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_gt?: InputMaybe<Scalars['String']>;
  prevRelease_gte?: InputMaybe<Scalars['String']>;
  prevRelease_in?: InputMaybe<Array<Scalars['String']>>;
  prevRelease_lt?: InputMaybe<Scalars['String']>;
  prevRelease_lte?: InputMaybe<Scalars['String']>;
  prevRelease_not?: InputMaybe<Scalars['String']>;
  prevRelease_not_contains?: InputMaybe<Scalars['String']>;
  prevRelease_not_contains_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_not_ends_with?: InputMaybe<Scalars['String']>;
  prevRelease_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_not_in?: InputMaybe<Array<Scalars['String']>>;
  prevRelease_not_starts_with?: InputMaybe<Scalars['String']>;
  prevRelease_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_starts_with?: InputMaybe<Scalars['String']>;
  prevRelease_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum MigrationOrderBy {
  CANCELLED = 'cancelled',
  CANCELLEDTIMESTAMP = 'cancelledTimestamp',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  EXECUTABLETIMESTAMP = 'executableTimestamp',
  EXECUTED = 'executed',
  EXECUTEDTIMESTAMP = 'executedTimestamp',
  ID = 'id',
  NEXTRELEASE = 'nextRelease',
  NEXTRELEASE__CLOSE = 'nextRelease__close',
  NEXTRELEASE__CURRENT = 'nextRelease__current',
  NEXTRELEASE__DUSTTOLERANCEFORASSETSINWETH = 'nextRelease__dustToleranceForAssetsInWeth',
  NEXTRELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'nextRelease__dustToleranceForExternalPositionsInWeth',
  NEXTRELEASE__ID = 'nextRelease__id',
  NEXTRELEASE__ISLIVE = 'nextRelease__isLive',
  NEXTRELEASE__OPEN = 'nextRelease__open',
  PREVRELEASE = 'prevRelease',
  PREVRELEASE__CLOSE = 'prevRelease__close',
  PREVRELEASE__CURRENT = 'prevRelease__current',
  PREVRELEASE__DUSTTOLERANCEFORASSETSINWETH = 'prevRelease__dustToleranceForAssetsInWeth',
  PREVRELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'prevRelease__dustToleranceForExternalPositionsInWeth',
  PREVRELEASE__ID = 'prevRelease__id',
  PREVRELEASE__ISLIVE = 'prevRelease__isLive',
  PREVRELEASE__OPEN = 'prevRelease__open',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type MinAssetBalancesPostRedemptionPolicy = Policy & {
  __typename: 'MinAssetBalancesPostRedemptionPolicy';
  assetBalances: Array<AssetBalance>;
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  updatedAt: Scalars['Int'];
};


export type MinAssetBalancesPostRedemptionPolicyAssetBalancesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetBalanceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetBalanceFilter>;
};

export type MinAssetBalancesPostRedemptionPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<MinAssetBalancesPostRedemptionPolicyFilter>>>;
  assetBalances?: InputMaybe<Array<Scalars['String']>>;
  assetBalances_?: InputMaybe<AssetBalanceFilter>;
  assetBalances_contains?: InputMaybe<Array<Scalars['String']>>;
  assetBalances_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assetBalances_not?: InputMaybe<Array<Scalars['String']>>;
  assetBalances_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assetBalances_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<MinAssetBalancesPostRedemptionPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum MinAssetBalancesPostRedemptionPolicyOrderBy {
  ASSETBALANCES = 'assetBalances',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  UPDATEDAT = 'updatedAt'
}

export type MinMaxDepositPolicy = Policy & {
  __typename: 'MinMaxDepositPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  maxDepositAmount: Scalars['BigDecimal'];
  minDepositAmount: Scalars['BigDecimal'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
  updatedAt: Scalars['Int'];
};

export type MinMaxDepositPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<MinMaxDepositPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  maxDepositAmount?: InputMaybe<Scalars['BigDecimal']>;
  maxDepositAmount_gt?: InputMaybe<Scalars['BigDecimal']>;
  maxDepositAmount_gte?: InputMaybe<Scalars['BigDecimal']>;
  maxDepositAmount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  maxDepositAmount_lt?: InputMaybe<Scalars['BigDecimal']>;
  maxDepositAmount_lte?: InputMaybe<Scalars['BigDecimal']>;
  maxDepositAmount_not?: InputMaybe<Scalars['BigDecimal']>;
  maxDepositAmount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  minDepositAmount?: InputMaybe<Scalars['BigDecimal']>;
  minDepositAmount_gt?: InputMaybe<Scalars['BigDecimal']>;
  minDepositAmount_gte?: InputMaybe<Scalars['BigDecimal']>;
  minDepositAmount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  minDepositAmount_lt?: InputMaybe<Scalars['BigDecimal']>;
  minDepositAmount_lte?: InputMaybe<Scalars['BigDecimal']>;
  minDepositAmount_not?: InputMaybe<Scalars['BigDecimal']>;
  minDepositAmount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  or?: InputMaybe<Array<InputMaybe<MinMaxDepositPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum MinMaxDepositPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  MAXDEPOSITAMOUNT = 'maxDepositAmount',
  MINDEPOSITAMOUNT = 'minDepositAmount',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings',
  UPDATEDAT = 'updatedAt'
}

export type MinSharesSupplyFee = Fee & {
  __typename: 'MinSharesSupplyFee';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  lastSettled: Scalars['Int'];
  settings: Scalars['String'];
};

export type MinSharesSupplyFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<MinSharesSupplyFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<MinSharesSupplyFeeFilter>>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum MinSharesSupplyFeeOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  LASTSETTLED = 'lastSettled',
  SETTINGS = 'settings'
}

export type Network = {
  __typename: 'Network';
  currentRelease?: Maybe<Release>;
  depositors: Scalars['Int'];
  deposits: Scalars['Int'];
  id: Scalars['ID'];
  managers: Scalars['Int'];
  migrationTimelock: Scalars['Int'];
  mlnBurned: Scalars['BigDecimal'];
  nominatedOwner?: Maybe<Scalars['Bytes']>;
  owner: Scalars['Bytes'];
  protocolFeeRate: Scalars['BigDecimal'];
  releases: Array<Release>;
  sharesTokenSymbol: Scalars['String'];
  vaults: Scalars['Int'];
};


export type NetworkReleasesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReleaseOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReleaseFilter>;
};

export type NetworkActivity = {
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
};

export type NetworkActivityFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<NetworkActivityFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<NetworkActivityFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum NetworkActivityOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  TIMESTAMP = 'timestamp'
}

export type NetworkReleaseChanged = Activity & NetworkActivity & {
  __typename: 'NetworkReleaseChanged';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  nextRelease: Release;
  prevRelease?: Maybe<Release>;
  timestamp: Scalars['Int'];
};

export type NetworkReleaseChangedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<NetworkReleaseChangedFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nextRelease?: InputMaybe<Scalars['String']>;
  nextRelease_?: InputMaybe<ReleaseFilter>;
  nextRelease_contains?: InputMaybe<Scalars['String']>;
  nextRelease_contains_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_ends_with?: InputMaybe<Scalars['String']>;
  nextRelease_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_gt?: InputMaybe<Scalars['String']>;
  nextRelease_gte?: InputMaybe<Scalars['String']>;
  nextRelease_in?: InputMaybe<Array<Scalars['String']>>;
  nextRelease_lt?: InputMaybe<Scalars['String']>;
  nextRelease_lte?: InputMaybe<Scalars['String']>;
  nextRelease_not?: InputMaybe<Scalars['String']>;
  nextRelease_not_contains?: InputMaybe<Scalars['String']>;
  nextRelease_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_not_ends_with?: InputMaybe<Scalars['String']>;
  nextRelease_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_not_in?: InputMaybe<Array<Scalars['String']>>;
  nextRelease_not_starts_with?: InputMaybe<Scalars['String']>;
  nextRelease_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextRelease_starts_with?: InputMaybe<Scalars['String']>;
  nextRelease_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<NetworkReleaseChangedFilter>>>;
  prevRelease?: InputMaybe<Scalars['String']>;
  prevRelease_?: InputMaybe<ReleaseFilter>;
  prevRelease_contains?: InputMaybe<Scalars['String']>;
  prevRelease_contains_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_ends_with?: InputMaybe<Scalars['String']>;
  prevRelease_ends_with_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_gt?: InputMaybe<Scalars['String']>;
  prevRelease_gte?: InputMaybe<Scalars['String']>;
  prevRelease_in?: InputMaybe<Array<Scalars['String']>>;
  prevRelease_lt?: InputMaybe<Scalars['String']>;
  prevRelease_lte?: InputMaybe<Scalars['String']>;
  prevRelease_not?: InputMaybe<Scalars['String']>;
  prevRelease_not_contains?: InputMaybe<Scalars['String']>;
  prevRelease_not_contains_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_not_ends_with?: InputMaybe<Scalars['String']>;
  prevRelease_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_not_in?: InputMaybe<Array<Scalars['String']>>;
  prevRelease_not_starts_with?: InputMaybe<Scalars['String']>;
  prevRelease_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  prevRelease_starts_with?: InputMaybe<Scalars['String']>;
  prevRelease_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum NetworkReleaseChangedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  NEXTRELEASE = 'nextRelease',
  NEXTRELEASE__CLOSE = 'nextRelease__close',
  NEXTRELEASE__CURRENT = 'nextRelease__current',
  NEXTRELEASE__DUSTTOLERANCEFORASSETSINWETH = 'nextRelease__dustToleranceForAssetsInWeth',
  NEXTRELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'nextRelease__dustToleranceForExternalPositionsInWeth',
  NEXTRELEASE__ID = 'nextRelease__id',
  NEXTRELEASE__ISLIVE = 'nextRelease__isLive',
  NEXTRELEASE__OPEN = 'nextRelease__open',
  PREVRELEASE = 'prevRelease',
  PREVRELEASE__CLOSE = 'prevRelease__close',
  PREVRELEASE__CURRENT = 'prevRelease__current',
  PREVRELEASE__DUSTTOLERANCEFORASSETSINWETH = 'prevRelease__dustToleranceForAssetsInWeth',
  PREVRELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'prevRelease__dustToleranceForExternalPositionsInWeth',
  PREVRELEASE__ID = 'prevRelease__id',
  PREVRELEASE__ISLIVE = 'prevRelease__isLive',
  PREVRELEASE__OPEN = 'prevRelease__open',
  TIMESTAMP = 'timestamp'
}

export type NetworkFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<NetworkFilter>>>;
  currentRelease?: InputMaybe<Scalars['String']>;
  currentRelease_?: InputMaybe<ReleaseFilter>;
  currentRelease_contains?: InputMaybe<Scalars['String']>;
  currentRelease_contains_nocase?: InputMaybe<Scalars['String']>;
  currentRelease_ends_with?: InputMaybe<Scalars['String']>;
  currentRelease_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentRelease_gt?: InputMaybe<Scalars['String']>;
  currentRelease_gte?: InputMaybe<Scalars['String']>;
  currentRelease_in?: InputMaybe<Array<Scalars['String']>>;
  currentRelease_lt?: InputMaybe<Scalars['String']>;
  currentRelease_lte?: InputMaybe<Scalars['String']>;
  currentRelease_not?: InputMaybe<Scalars['String']>;
  currentRelease_not_contains?: InputMaybe<Scalars['String']>;
  currentRelease_not_contains_nocase?: InputMaybe<Scalars['String']>;
  currentRelease_not_ends_with?: InputMaybe<Scalars['String']>;
  currentRelease_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  currentRelease_not_in?: InputMaybe<Array<Scalars['String']>>;
  currentRelease_not_starts_with?: InputMaybe<Scalars['String']>;
  currentRelease_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  currentRelease_starts_with?: InputMaybe<Scalars['String']>;
  currentRelease_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositors?: InputMaybe<Scalars['Int']>;
  depositors_gt?: InputMaybe<Scalars['Int']>;
  depositors_gte?: InputMaybe<Scalars['Int']>;
  depositors_in?: InputMaybe<Array<Scalars['Int']>>;
  depositors_lt?: InputMaybe<Scalars['Int']>;
  depositors_lte?: InputMaybe<Scalars['Int']>;
  depositors_not?: InputMaybe<Scalars['Int']>;
  depositors_not_in?: InputMaybe<Array<Scalars['Int']>>;
  deposits?: InputMaybe<Scalars['Int']>;
  deposits_gt?: InputMaybe<Scalars['Int']>;
  deposits_gte?: InputMaybe<Scalars['Int']>;
  deposits_in?: InputMaybe<Array<Scalars['Int']>>;
  deposits_lt?: InputMaybe<Scalars['Int']>;
  deposits_lte?: InputMaybe<Scalars['Int']>;
  deposits_not?: InputMaybe<Scalars['Int']>;
  deposits_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  managers?: InputMaybe<Scalars['Int']>;
  managers_gt?: InputMaybe<Scalars['Int']>;
  managers_gte?: InputMaybe<Scalars['Int']>;
  managers_in?: InputMaybe<Array<Scalars['Int']>>;
  managers_lt?: InputMaybe<Scalars['Int']>;
  managers_lte?: InputMaybe<Scalars['Int']>;
  managers_not?: InputMaybe<Scalars['Int']>;
  managers_not_in?: InputMaybe<Array<Scalars['Int']>>;
  migrationTimelock?: InputMaybe<Scalars['Int']>;
  migrationTimelock_gt?: InputMaybe<Scalars['Int']>;
  migrationTimelock_gte?: InputMaybe<Scalars['Int']>;
  migrationTimelock_in?: InputMaybe<Array<Scalars['Int']>>;
  migrationTimelock_lt?: InputMaybe<Scalars['Int']>;
  migrationTimelock_lte?: InputMaybe<Scalars['Int']>;
  migrationTimelock_not?: InputMaybe<Scalars['Int']>;
  migrationTimelock_not_in?: InputMaybe<Array<Scalars['Int']>>;
  mlnBurned?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_gt?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_gte?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  mlnBurned_lt?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_lte?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_not?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  nominatedOwner?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_contains?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_gt?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_gte?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_in?: InputMaybe<Array<Scalars['Bytes']>>;
  nominatedOwner_lt?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_lte?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_not?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_not_contains?: InputMaybe<Scalars['Bytes']>;
  nominatedOwner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  or?: InputMaybe<Array<InputMaybe<NetworkFilter>>>;
  owner?: InputMaybe<Scalars['Bytes']>;
  owner_contains?: InputMaybe<Scalars['Bytes']>;
  owner_gt?: InputMaybe<Scalars['Bytes']>;
  owner_gte?: InputMaybe<Scalars['Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['Bytes']>>;
  owner_lt?: InputMaybe<Scalars['Bytes']>;
  owner_lte?: InputMaybe<Scalars['Bytes']>;
  owner_not?: InputMaybe<Scalars['Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['Bytes']>;
  owner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  protocolFeeRate?: InputMaybe<Scalars['BigDecimal']>;
  protocolFeeRate_gt?: InputMaybe<Scalars['BigDecimal']>;
  protocolFeeRate_gte?: InputMaybe<Scalars['BigDecimal']>;
  protocolFeeRate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  protocolFeeRate_lt?: InputMaybe<Scalars['BigDecimal']>;
  protocolFeeRate_lte?: InputMaybe<Scalars['BigDecimal']>;
  protocolFeeRate_not?: InputMaybe<Scalars['BigDecimal']>;
  protocolFeeRate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  releases_?: InputMaybe<ReleaseFilter>;
  sharesTokenSymbol?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_contains?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_contains_nocase?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_ends_with?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_gt?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_gte?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_in?: InputMaybe<Array<Scalars['String']>>;
  sharesTokenSymbol_lt?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_lte?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_not?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_not_contains?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_not_ends_with?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  sharesTokenSymbol_not_starts_with?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_starts_with?: InputMaybe<Scalars['String']>;
  sharesTokenSymbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vaults?: InputMaybe<Scalars['Int']>;
  vaults_gt?: InputMaybe<Scalars['Int']>;
  vaults_gte?: InputMaybe<Scalars['Int']>;
  vaults_in?: InputMaybe<Array<Scalars['Int']>>;
  vaults_lt?: InputMaybe<Scalars['Int']>;
  vaults_lte?: InputMaybe<Scalars['Int']>;
  vaults_not?: InputMaybe<Scalars['Int']>;
  vaults_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum NetworkOrderBy {
  CURRENTRELEASE = 'currentRelease',
  CURRENTRELEASE__CLOSE = 'currentRelease__close',
  CURRENTRELEASE__CURRENT = 'currentRelease__current',
  CURRENTRELEASE__DUSTTOLERANCEFORASSETSINWETH = 'currentRelease__dustToleranceForAssetsInWeth',
  CURRENTRELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'currentRelease__dustToleranceForExternalPositionsInWeth',
  CURRENTRELEASE__ID = 'currentRelease__id',
  CURRENTRELEASE__ISLIVE = 'currentRelease__isLive',
  CURRENTRELEASE__OPEN = 'currentRelease__open',
  DEPOSITORS = 'depositors',
  DEPOSITS = 'deposits',
  ID = 'id',
  MANAGERS = 'managers',
  MIGRATIONTIMELOCK = 'migrationTimelock',
  MLNBURNED = 'mlnBurned',
  NOMINATEDOWNER = 'nominatedOwner',
  OWNER = 'owner',
  PROTOCOLFEERATE = 'protocolFeeRate',
  RELEASES = 'releases',
  SHARESTOKENSYMBOL = 'sharesTokenSymbol',
  VAULTS = 'vaults'
}

export type OnlyRemoveDustExternalPositionPolicy = Policy & {
  __typename: 'OnlyRemoveDustExternalPositionPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type OnlyRemoveDustExternalPositionPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<OnlyRemoveDustExternalPositionPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<OnlyRemoveDustExternalPositionPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum OnlyRemoveDustExternalPositionPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type OnlyUntrackDustOrPricelessAssetsPolicy = Policy & {
  __typename: 'OnlyUntrackDustOrPricelessAssetsPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type OnlyUntrackDustOrPricelessAssetsPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<OnlyUntrackDustOrPricelessAssetsPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<OnlyUntrackDustOrPricelessAssetsPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum OnlyUntrackDustOrPricelessAssetsPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

/** Defines the order direction, either ascending or descending */
export enum OrderDirection {
  ASC = 'asc',
  DESC = 'desc'
}

export type PerformanceFee = Fee & {
  __typename: 'PerformanceFee';
  activatedAt: Scalars['Int'];
  aggregateValueDue: Scalars['BigDecimal'];
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  highWaterMark: Scalars['BigDecimal'];
  id: Scalars['ID'];
  lastPaid: Scalars['Int'];
  lastSettled: Scalars['Int'];
  lastSharePrice: Scalars['BigDecimal'];
  performanceFeeType: PerformanceFeeType;
  period: Scalars['Int'];
  rate: Scalars['BigDecimal'];
  recipient?: Maybe<Account>;
  settings: Scalars['String'];
  sharesOutstanding: Scalars['BigDecimal'];
};

export enum PerformanceFeeType {
  CRYSTALLIZATION_PERIOD = 'CRYSTALLIZATION_PERIOD',
  NO_CRYSTALLIZATION_PERIOD = 'NO_CRYSTALLIZATION_PERIOD'
}

export type PerformanceFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activatedAt?: InputMaybe<Scalars['Int']>;
  activatedAt_gt?: InputMaybe<Scalars['Int']>;
  activatedAt_gte?: InputMaybe<Scalars['Int']>;
  activatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  activatedAt_lt?: InputMaybe<Scalars['Int']>;
  activatedAt_lte?: InputMaybe<Scalars['Int']>;
  activatedAt_not?: InputMaybe<Scalars['Int']>;
  activatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  aggregateValueDue?: InputMaybe<Scalars['BigDecimal']>;
  aggregateValueDue_gt?: InputMaybe<Scalars['BigDecimal']>;
  aggregateValueDue_gte?: InputMaybe<Scalars['BigDecimal']>;
  aggregateValueDue_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  aggregateValueDue_lt?: InputMaybe<Scalars['BigDecimal']>;
  aggregateValueDue_lte?: InputMaybe<Scalars['BigDecimal']>;
  aggregateValueDue_not?: InputMaybe<Scalars['BigDecimal']>;
  aggregateValueDue_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<PerformanceFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  highWaterMark?: InputMaybe<Scalars['BigDecimal']>;
  highWaterMark_gt?: InputMaybe<Scalars['BigDecimal']>;
  highWaterMark_gte?: InputMaybe<Scalars['BigDecimal']>;
  highWaterMark_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  highWaterMark_lt?: InputMaybe<Scalars['BigDecimal']>;
  highWaterMark_lte?: InputMaybe<Scalars['BigDecimal']>;
  highWaterMark_not?: InputMaybe<Scalars['BigDecimal']>;
  highWaterMark_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastPaid?: InputMaybe<Scalars['Int']>;
  lastPaid_gt?: InputMaybe<Scalars['Int']>;
  lastPaid_gte?: InputMaybe<Scalars['Int']>;
  lastPaid_in?: InputMaybe<Array<Scalars['Int']>>;
  lastPaid_lt?: InputMaybe<Scalars['Int']>;
  lastPaid_lte?: InputMaybe<Scalars['Int']>;
  lastPaid_not?: InputMaybe<Scalars['Int']>;
  lastPaid_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSharePrice?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePrice_gt?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePrice_gte?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePrice_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  lastSharePrice_lt?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePrice_lte?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePrice_not?: InputMaybe<Scalars['BigDecimal']>;
  lastSharePrice_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  or?: InputMaybe<Array<InputMaybe<PerformanceFeeFilter>>>;
  performanceFeeType?: InputMaybe<PerformanceFeeType>;
  performanceFeeType_in?: InputMaybe<Array<PerformanceFeeType>>;
  performanceFeeType_not?: InputMaybe<PerformanceFeeType>;
  performanceFeeType_not_in?: InputMaybe<Array<PerformanceFeeType>>;
  period?: InputMaybe<Scalars['Int']>;
  period_gt?: InputMaybe<Scalars['Int']>;
  period_gte?: InputMaybe<Scalars['Int']>;
  period_in?: InputMaybe<Array<Scalars['Int']>>;
  period_lt?: InputMaybe<Scalars['Int']>;
  period_lte?: InputMaybe<Scalars['Int']>;
  period_not?: InputMaybe<Scalars['Int']>;
  period_not_in?: InputMaybe<Array<Scalars['Int']>>;
  rate?: InputMaybe<Scalars['BigDecimal']>;
  rate_gt?: InputMaybe<Scalars['BigDecimal']>;
  rate_gte?: InputMaybe<Scalars['BigDecimal']>;
  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  rate_lt?: InputMaybe<Scalars['BigDecimal']>;
  rate_lte?: InputMaybe<Scalars['BigDecimal']>;
  rate_not?: InputMaybe<Scalars['BigDecimal']>;
  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  recipient?: InputMaybe<Scalars['String']>;
  recipient_?: InputMaybe<AccountFilter>;
  recipient_contains?: InputMaybe<Scalars['String']>;
  recipient_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_ends_with?: InputMaybe<Scalars['String']>;
  recipient_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_gt?: InputMaybe<Scalars['String']>;
  recipient_gte?: InputMaybe<Scalars['String']>;
  recipient_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_lt?: InputMaybe<Scalars['String']>;
  recipient_lte?: InputMaybe<Scalars['String']>;
  recipient_not?: InputMaybe<Scalars['String']>;
  recipient_not_contains?: InputMaybe<Scalars['String']>;
  recipient_not_contains_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with?: InputMaybe<Scalars['String']>;
  recipient_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_not_in?: InputMaybe<Array<Scalars['String']>>;
  recipient_not_starts_with?: InputMaybe<Scalars['String']>;
  recipient_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  recipient_starts_with?: InputMaybe<Scalars['String']>;
  recipient_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sharesOutstanding?: InputMaybe<Scalars['BigDecimal']>;
  sharesOutstanding_gt?: InputMaybe<Scalars['BigDecimal']>;
  sharesOutstanding_gte?: InputMaybe<Scalars['BigDecimal']>;
  sharesOutstanding_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sharesOutstanding_lt?: InputMaybe<Scalars['BigDecimal']>;
  sharesOutstanding_lte?: InputMaybe<Scalars['BigDecimal']>;
  sharesOutstanding_not?: InputMaybe<Scalars['BigDecimal']>;
  sharesOutstanding_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export enum PerformanceFeeOrderBy {
  ACTIVATEDAT = 'activatedAt',
  AGGREGATEVALUEDUE = 'aggregateValueDue',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  HIGHWATERMARK = 'highWaterMark',
  ID = 'id',
  LASTPAID = 'lastPaid',
  LASTSETTLED = 'lastSettled',
  LASTSHAREPRICE = 'lastSharePrice',
  PERFORMANCEFEETYPE = 'performanceFeeType',
  PERIOD = 'period',
  RATE = 'rate',
  RECIPIENT = 'recipient',
  RECIPIENT__ASSETMANAGERSINCE = 'recipient__assetManagerSince',
  RECIPIENT__AUTHUSERSINCE = 'recipient__authUserSince',
  RECIPIENT__DEPOSITORSINCE = 'recipient__depositorSince',
  RECIPIENT__ID = 'recipient__id',
  RECIPIENT__ISASSETMANAGER = 'recipient__isAssetManager',
  RECIPIENT__ISAUTHUSER = 'recipient__isAuthUser',
  RECIPIENT__ISDEPOSITOR = 'recipient__isDepositor',
  RECIPIENT__ISOWNER = 'recipient__isOwner',
  RECIPIENT__OWNERSINCE = 'recipient__ownerSince',
  SETTINGS = 'settings',
  SHARESOUTSTANDING = 'sharesOutstanding'
}

export type Policy = {
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type PolicyDisabledForVault = Activity & VaultActivity & {
  __typename: 'PolicyDisabledForVault';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  policy: Policy;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type PolicyDisabledForVaultFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<PolicyDisabledForVaultFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<PolicyDisabledForVaultFilter>>>;
  policy?: InputMaybe<Scalars['String']>;
  policy_?: InputMaybe<PolicyFilter>;
  policy_contains?: InputMaybe<Scalars['String']>;
  policy_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_ends_with?: InputMaybe<Scalars['String']>;
  policy_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_gt?: InputMaybe<Scalars['String']>;
  policy_gte?: InputMaybe<Scalars['String']>;
  policy_in?: InputMaybe<Array<Scalars['String']>>;
  policy_lt?: InputMaybe<Scalars['String']>;
  policy_lte?: InputMaybe<Scalars['String']>;
  policy_not?: InputMaybe<Scalars['String']>;
  policy_not_contains?: InputMaybe<Scalars['String']>;
  policy_not_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_not_ends_with?: InputMaybe<Scalars['String']>;
  policy_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_not_in?: InputMaybe<Array<Scalars['String']>>;
  policy_not_starts_with?: InputMaybe<Scalars['String']>;
  policy_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  policy_starts_with?: InputMaybe<Scalars['String']>;
  policy_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum PolicyDisabledForVaultOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  POLICY = 'policy',
  POLICY__CREATEDAT = 'policy__createdAt',
  POLICY__ENABLED = 'policy__enabled',
  POLICY__ID = 'policy__id',
  POLICY__POLICY = 'policy__policy',
  POLICY__POLICYTYPE = 'policy__policyType',
  POLICY__SETTINGS = 'policy__settings',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type PolicyEnabledForVault = Activity & VaultActivity & {
  __typename: 'PolicyEnabledForVault';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  policy: Policy;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type PolicyEnabledForVaultFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<PolicyEnabledForVaultFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<PolicyEnabledForVaultFilter>>>;
  policy?: InputMaybe<Scalars['String']>;
  policy_?: InputMaybe<PolicyFilter>;
  policy_contains?: InputMaybe<Scalars['String']>;
  policy_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_ends_with?: InputMaybe<Scalars['String']>;
  policy_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_gt?: InputMaybe<Scalars['String']>;
  policy_gte?: InputMaybe<Scalars['String']>;
  policy_in?: InputMaybe<Array<Scalars['String']>>;
  policy_lt?: InputMaybe<Scalars['String']>;
  policy_lte?: InputMaybe<Scalars['String']>;
  policy_not?: InputMaybe<Scalars['String']>;
  policy_not_contains?: InputMaybe<Scalars['String']>;
  policy_not_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_not_ends_with?: InputMaybe<Scalars['String']>;
  policy_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_not_in?: InputMaybe<Array<Scalars['String']>>;
  policy_not_starts_with?: InputMaybe<Scalars['String']>;
  policy_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  policy_starts_with?: InputMaybe<Scalars['String']>;
  policy_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum PolicyEnabledForVaultOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  POLICY = 'policy',
  POLICY__CREATEDAT = 'policy__createdAt',
  POLICY__ENABLED = 'policy__enabled',
  POLICY__ID = 'policy__id',
  POLICY__POLICY = 'policy__policy',
  POLICY__POLICYTYPE = 'policy__policyType',
  POLICY__SETTINGS = 'policy__settings',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export enum PolicyType {
  ADAPTERBLACKLIST = 'AdapterBlacklist',
  ADAPTERWHITELIST = 'AdapterWhitelist',
  ALLOWEDADAPTERINCOMINGASSETS = 'AllowedAdapterIncomingAssets',
  ALLOWEDADAPTERS = 'AllowedAdapters',
  ALLOWEDADAPTERSPERMANAGER = 'AllowedAdaptersPerManager',
  ALLOWEDASSETSFORREDEMPTION = 'AllowedAssetsForRedemption',
  ALLOWEDDEPOSITRECIPIENTS = 'AllowedDepositRecipients',
  ALLOWEDEXTERNALPOSITIONTYPES = 'AllowedExternalPositionTypes',
  ALLOWEDEXTERNALPOSITIONTYPESPERMANAGER = 'AllowedExternalPositionTypesPerManager',
  ALLOWEDSHARESTRANSFERRECIPIENTS = 'AllowedSharesTransferRecipients',
  ASSETBLACKLIST = 'AssetBlacklist',
  ASSETWHITELIST = 'AssetWhitelist',
  BUYSHARESCALLERWHITELIST = 'BuySharesCallerWhitelist',
  CUMULATIVESLIPPAGETOLERANCE = 'CumulativeSlippageTolerance',
  DEPOSITORWHITELIST = 'DepositorWhitelist',
  GUARANTEEDREDEMPTION = 'GuaranteedRedemption',
  MAXCONCENTRATION = 'MaxConcentration',
  MINASSETBALANCESPOSTREDEMPTION = 'MinAssetBalancesPostRedemption',
  MINMAXDEPOSIT = 'MinMaxDeposit',
  ONLYREMOVEDUSTEXTERNALPOSITION = 'OnlyRemoveDustExternalPosition',
  ONLYUNTRACKDUSTORPRICELESSASSETS = 'OnlyUntrackDustOrPricelessAssets',
  UNKNOWN = 'Unknown'
}

export type PolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<PolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<PolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum PolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type PricelessAssetBypass = Activity & VaultActivity & {
  __typename: 'PricelessAssetBypass';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  asset: Asset;
  id: Scalars['ID'];
  policy: Policy;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type PricelessAssetBypassFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<PricelessAssetBypassFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<PricelessAssetBypassFilter>>>;
  policy?: InputMaybe<Scalars['String']>;
  policy_?: InputMaybe<PolicyFilter>;
  policy_contains?: InputMaybe<Scalars['String']>;
  policy_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_ends_with?: InputMaybe<Scalars['String']>;
  policy_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_gt?: InputMaybe<Scalars['String']>;
  policy_gte?: InputMaybe<Scalars['String']>;
  policy_in?: InputMaybe<Array<Scalars['String']>>;
  policy_lt?: InputMaybe<Scalars['String']>;
  policy_lte?: InputMaybe<Scalars['String']>;
  policy_not?: InputMaybe<Scalars['String']>;
  policy_not_contains?: InputMaybe<Scalars['String']>;
  policy_not_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_not_ends_with?: InputMaybe<Scalars['String']>;
  policy_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_not_in?: InputMaybe<Array<Scalars['String']>>;
  policy_not_starts_with?: InputMaybe<Scalars['String']>;
  policy_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  policy_starts_with?: InputMaybe<Scalars['String']>;
  policy_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum PricelessAssetBypassOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id',
  POLICY = 'policy',
  POLICY__CREATEDAT = 'policy__createdAt',
  POLICY__ENABLED = 'policy__enabled',
  POLICY__ID = 'policy__id',
  POLICY__POLICY = 'policy__policy',
  POLICY__POLICYTYPE = 'policy__policyType',
  POLICY__SETTINGS = 'policy__settings',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type PricelessAssetTimelock = Activity & VaultActivity & {
  __typename: 'PricelessAssetTimelock';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  asset: Asset;
  id: Scalars['ID'];
  policy: Policy;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type PricelessAssetTimelockFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<PricelessAssetTimelockFilter>>>;
  asset?: InputMaybe<Scalars['String']>;
  asset_?: InputMaybe<AssetFilter>;
  asset_contains?: InputMaybe<Scalars['String']>;
  asset_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_ends_with?: InputMaybe<Scalars['String']>;
  asset_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_gt?: InputMaybe<Scalars['String']>;
  asset_gte?: InputMaybe<Scalars['String']>;
  asset_in?: InputMaybe<Array<Scalars['String']>>;
  asset_lt?: InputMaybe<Scalars['String']>;
  asset_lte?: InputMaybe<Scalars['String']>;
  asset_not?: InputMaybe<Scalars['String']>;
  asset_not_contains?: InputMaybe<Scalars['String']>;
  asset_not_contains_nocase?: InputMaybe<Scalars['String']>;
  asset_not_ends_with?: InputMaybe<Scalars['String']>;
  asset_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  asset_not_in?: InputMaybe<Array<Scalars['String']>>;
  asset_not_starts_with?: InputMaybe<Scalars['String']>;
  asset_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  asset_starts_with?: InputMaybe<Scalars['String']>;
  asset_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<PricelessAssetTimelockFilter>>>;
  policy?: InputMaybe<Scalars['String']>;
  policy_?: InputMaybe<PolicyFilter>;
  policy_contains?: InputMaybe<Scalars['String']>;
  policy_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_ends_with?: InputMaybe<Scalars['String']>;
  policy_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_gt?: InputMaybe<Scalars['String']>;
  policy_gte?: InputMaybe<Scalars['String']>;
  policy_in?: InputMaybe<Array<Scalars['String']>>;
  policy_lt?: InputMaybe<Scalars['String']>;
  policy_lte?: InputMaybe<Scalars['String']>;
  policy_not?: InputMaybe<Scalars['String']>;
  policy_not_contains?: InputMaybe<Scalars['String']>;
  policy_not_contains_nocase?: InputMaybe<Scalars['String']>;
  policy_not_ends_with?: InputMaybe<Scalars['String']>;
  policy_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  policy_not_in?: InputMaybe<Array<Scalars['String']>>;
  policy_not_starts_with?: InputMaybe<Scalars['String']>;
  policy_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  policy_starts_with?: InputMaybe<Scalars['String']>;
  policy_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum PricelessAssetTimelockOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSET = 'asset',
  ASSET__DECIMALS = 'asset__decimals',
  ASSET__ID = 'asset__id',
  ASSET__NAME = 'asset__name',
  ASSET__SYMBOL = 'asset__symbol',
  ID = 'id',
  POLICY = 'policy',
  POLICY__CREATEDAT = 'policy__createdAt',
  POLICY__ENABLED = 'policy__enabled',
  POLICY__ID = 'policy__id',
  POLICY__POLICY = 'policy__policy',
  POLICY__POLICYTYPE = 'policy__policyType',
  POLICY__SETTINGS = 'policy__settings',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ProtocolFee = {
  __typename: 'ProtocolFee';
  feeTracker: Scalars['Bytes'];
  id: Scalars['ID'];
  lastPaid: Scalars['Int'];
  rate: Scalars['BigDecimal'];
  vault: Vault;
};

export type ProtocolFeeBurned = Activity & SharesChange & VaultActivity & {
  __typename: 'ProtocolFeeBurned';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  id: Scalars['ID'];
  mlnBurned: Scalars['BigDecimal'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type ProtocolFeeBurnedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<ProtocolFeeBurnedFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  mlnBurned?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_gt?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_gte?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  mlnBurned_lt?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_lte?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_not?: InputMaybe<Scalars['BigDecimal']>;
  mlnBurned_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  or?: InputMaybe<Array<InputMaybe<ProtocolFeeBurnedFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ProtocolFeeBurnedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  MLNBURNED = 'mlnBurned',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ProtocolFeePaid = Activity & SharesChange & VaultActivity & {
  __typename: 'ProtocolFeePaid';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type ProtocolFeePaidFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<ProtocolFeePaidFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ProtocolFeePaidFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ProtocolFeePaidOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type ProtocolFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ProtocolFeeFilter>>>;
  feeTracker?: InputMaybe<Scalars['Bytes']>;
  feeTracker_contains?: InputMaybe<Scalars['Bytes']>;
  feeTracker_gt?: InputMaybe<Scalars['Bytes']>;
  feeTracker_gte?: InputMaybe<Scalars['Bytes']>;
  feeTracker_in?: InputMaybe<Array<Scalars['Bytes']>>;
  feeTracker_lt?: InputMaybe<Scalars['Bytes']>;
  feeTracker_lte?: InputMaybe<Scalars['Bytes']>;
  feeTracker_not?: InputMaybe<Scalars['Bytes']>;
  feeTracker_not_contains?: InputMaybe<Scalars['Bytes']>;
  feeTracker_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastPaid?: InputMaybe<Scalars['Int']>;
  lastPaid_gt?: InputMaybe<Scalars['Int']>;
  lastPaid_gte?: InputMaybe<Scalars['Int']>;
  lastPaid_in?: InputMaybe<Array<Scalars['Int']>>;
  lastPaid_lt?: InputMaybe<Scalars['Int']>;
  lastPaid_lte?: InputMaybe<Scalars['Int']>;
  lastPaid_not?: InputMaybe<Scalars['Int']>;
  lastPaid_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<ProtocolFeeFilter>>>;
  rate?: InputMaybe<Scalars['BigDecimal']>;
  rate_gt?: InputMaybe<Scalars['BigDecimal']>;
  rate_gte?: InputMaybe<Scalars['BigDecimal']>;
  rate_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  rate_lt?: InputMaybe<Scalars['BigDecimal']>;
  rate_lte?: InputMaybe<Scalars['BigDecimal']>;
  rate_not?: InputMaybe<Scalars['BigDecimal']>;
  rate_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ProtocolFeeOrderBy {
  FEETRACKER = 'feeTracker',
  ID = 'id',
  LASTPAID = 'lastPaid',
  RATE = 'rate',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type Query = {
  __typename: 'Query';
  /** Access to subgraph metadata */
  _meta?: Maybe<Meta>;
  aaveDebtPosition?: Maybe<AaveDebtPosition>;
  aaveDebtPositionChange?: Maybe<AaveDebtPositionChange>;
  aaveDebtPositionChanges: Array<AaveDebtPositionChange>;
  aaveDebtPositions: Array<AaveDebtPosition>;
  account?: Maybe<Account>;
  accounts: Array<Account>;
  activities: Array<Activity>;
  activity?: Maybe<Activity>;
  adapterBlacklistPolicies: Array<AdapterBlacklistPolicy>;
  adapterBlacklistPolicy?: Maybe<AdapterBlacklistPolicy>;
  adapterWhitelistPolicies: Array<AdapterWhitelistPolicy>;
  adapterWhitelistPolicy?: Maybe<AdapterWhitelistPolicy>;
  addressList?: Maybe<AddressList>;
  addressLists: Array<AddressList>;
  allowedAdapterIncomingAssetsPolicies: Array<AllowedAdapterIncomingAssetsPolicy>;
  allowedAdapterIncomingAssetsPolicy?: Maybe<AllowedAdapterIncomingAssetsPolicy>;
  allowedAdaptersPerManagerPolicies: Array<AllowedAdaptersPerManagerPolicy>;
  allowedAdaptersPerManagerPolicy?: Maybe<AllowedAdaptersPerManagerPolicy>;
  allowedAdaptersPolicies: Array<AllowedAdaptersPolicy>;
  allowedAdaptersPolicy?: Maybe<AllowedAdaptersPolicy>;
  allowedAssetsForRedemptionPolicies: Array<AllowedAssetsForRedemptionPolicy>;
  allowedAssetsForRedemptionPolicy?: Maybe<AllowedAssetsForRedemptionPolicy>;
  allowedDepositRecipientsPolicies: Array<AllowedDepositRecipientsPolicy>;
  allowedDepositRecipientsPolicy?: Maybe<AllowedDepositRecipientsPolicy>;
  allowedExternalPositionTypesPerManagerPolicies: Array<AllowedExternalPositionTypesPerManagerPolicy>;
  allowedExternalPositionTypesPerManagerPolicy?: Maybe<AllowedExternalPositionTypesPerManagerPolicy>;
  allowedExternalPositionTypesPolicies: Array<AllowedExternalPositionTypesPolicy>;
  allowedExternalPositionTypesPolicy?: Maybe<AllowedExternalPositionTypesPolicy>;
  allowedSharesTransferRecipientsPolicies: Array<AllowedSharesTransferRecipientsPolicy>;
  allowedSharesTransferRecipientsPolicy?: Maybe<AllowedSharesTransferRecipientsPolicy>;
  arbitraryLoanFixedInterestModule?: Maybe<ArbitraryLoanFixedInterestModule>;
  arbitraryLoanFixedInterestModules: Array<ArbitraryLoanFixedInterestModule>;
  arbitraryLoanPosition?: Maybe<ArbitraryLoanPosition>;
  arbitraryLoanPositionChange?: Maybe<ArbitraryLoanPositionChange>;
  arbitraryLoanPositionChanges: Array<ArbitraryLoanPositionChange>;
  arbitraryLoanPositions: Array<ArbitraryLoanPosition>;
  arbitraryLoanTotalNominalDeltaOracleModule?: Maybe<ArbitraryLoanTotalNominalDeltaOracleModule>;
  arbitraryLoanTotalNominalDeltaOracleModules: Array<ArbitraryLoanTotalNominalDeltaOracleModule>;
  asset?: Maybe<Asset>;
  assetAdded?: Maybe<AssetAdded>;
  assetAddeds: Array<AssetAdded>;
  assetAmount?: Maybe<AssetAmount>;
  assetAmounts: Array<AssetAmount>;
  assetBalance?: Maybe<AssetBalance>;
  assetBalances: Array<AssetBalance>;
  assetBlacklistPolicies: Array<AssetBlacklistPolicy>;
  assetBlacklistPolicy?: Maybe<AssetBlacklistPolicy>;
  assetPrice?: Maybe<AssetPrice>;
  assetPrices: Array<AssetPrice>;
  assetRemoved?: Maybe<AssetRemoved>;
  assetRemoveds: Array<AssetRemoved>;
  assetWhitelistPolicies: Array<AssetWhitelistPolicy>;
  assetWhitelistPolicy?: Maybe<AssetWhitelistPolicy>;
  assets: Array<Asset>;
  buySharesCallerWhitelistPolicies: Array<BuySharesCallerWhitelistPolicy>;
  buySharesCallerWhitelistPolicy?: Maybe<BuySharesCallerWhitelistPolicy>;
  compoundDebtPosition?: Maybe<CompoundDebtPosition>;
  compoundDebtPositionChange?: Maybe<CompoundDebtPositionChange>;
  compoundDebtPositionChanges: Array<CompoundDebtPositionChange>;
  compoundDebtPositions: Array<CompoundDebtPosition>;
  comptroller?: Maybe<Comptroller>;
  comptrollers: Array<Comptroller>;
  convexCurveLpStakingWrapper?: Maybe<ConvexCurveLpStakingWrapper>;
  convexCurveLpStakingWrappers: Array<ConvexCurveLpStakingWrapper>;
  convexVotingPosition?: Maybe<ConvexVotingPosition>;
  convexVotingPositionChange?: Maybe<ConvexVotingPositionChange>;
  convexVotingPositionChanges: Array<ConvexVotingPositionChange>;
  convexVotingPositions: Array<ConvexVotingPosition>;
  counter?: Maybe<Counter>;
  counters: Array<Counter>;
  cumulativeSlippageTolerancePolicies: Array<CumulativeSlippageTolerancePolicy>;
  cumulativeSlippageTolerancePolicy?: Maybe<CumulativeSlippageTolerancePolicy>;
  currencyPrice?: Maybe<CurrencyPrice>;
  currencyPrices: Array<CurrencyPrice>;
  deposit?: Maybe<Deposit>;
  depositorActivities: Array<DepositorActivity>;
  depositorActivity?: Maybe<DepositorActivity>;
  depositorWhitelistPolicies: Array<DepositorWhitelistPolicy>;
  depositorWhitelistPolicy?: Maybe<DepositorWhitelistPolicy>;
  deposits: Array<Deposit>;
  entranceRateBurnFee?: Maybe<EntranceRateBurnFee>;
  entranceRateBurnFees: Array<EntranceRateBurnFee>;
  entranceRateDirectFee?: Maybe<EntranceRateDirectFee>;
  entranceRateDirectFees: Array<EntranceRateDirectFee>;
  exitRateBurnFee?: Maybe<ExitRateBurnFee>;
  exitRateBurnFees: Array<ExitRateBurnFee>;
  exitRateDirectFee?: Maybe<ExitRateDirectFee>;
  exitRateDirectFees: Array<ExitRateDirectFee>;
  externalPosition?: Maybe<ExternalPosition>;
  externalPositionAddedEvent?: Maybe<ExternalPositionAddedEvent>;
  externalPositionAddedEvents: Array<ExternalPositionAddedEvent>;
  externalPositionChange?: Maybe<ExternalPositionChange>;
  externalPositionChanges: Array<ExternalPositionChange>;
  externalPositionRemovedEvent?: Maybe<ExternalPositionRemovedEvent>;
  externalPositionRemovedEvents: Array<ExternalPositionRemovedEvent>;
  externalPositionType?: Maybe<ExternalPositionType>;
  externalPositionTypes: Array<ExternalPositionType>;
  externalPositions: Array<ExternalPosition>;
  fee?: Maybe<Fee>;
  feeSharesAllocationChangedEvent?: Maybe<FeeSharesAllocationChangedEvent>;
  feeSharesAllocationChangedEvents: Array<FeeSharesAllocationChangedEvent>;
  feeSharesBurnedEvent?: Maybe<FeeSharesBurnedEvent>;
  feeSharesBurnedEvents: Array<FeeSharesBurnedEvent>;
  feeSharesPaidEvent?: Maybe<FeeSharesPaidEvent>;
  feeSharesPaidEvents: Array<FeeSharesPaidEvent>;
  feeSharesReceivedEvent?: Maybe<FeeSharesReceivedEvent>;
  feeSharesReceivedEvents: Array<FeeSharesReceivedEvent>;
  fees: Array<Fee>;
  freelyTransferableSharesSetEvent?: Maybe<FreelyTransferableSharesSetEvent>;
  freelyTransferableSharesSetEvents: Array<FreelyTransferableSharesSetEvent>;
  gasRelayer?: Maybe<GasRelayer>;
  gasRelayerDeposited?: Maybe<GasRelayerDeposited>;
  gasRelayerDepositeds: Array<GasRelayerDeposited>;
  gasRelayerTransaction?: Maybe<GasRelayerTransaction>;
  gasRelayerTransactions: Array<GasRelayerTransaction>;
  gasRelayerWithdrawn?: Maybe<GasRelayerWithdrawn>;
  gasRelayerWithdrawns: Array<GasRelayerWithdrawn>;
  gasRelayers: Array<GasRelayer>;
  gatedRedemptionQueueSharesWrapper?: Maybe<GatedRedemptionQueueSharesWrapper>;
  gatedRedemptionQueueSharesWrapperDeposit?: Maybe<GatedRedemptionQueueSharesWrapperDeposit>;
  gatedRedemptionQueueSharesWrapperDepositApproval?: Maybe<GatedRedemptionQueueSharesWrapperDepositApproval>;
  gatedRedemptionQueueSharesWrapperDepositApprovals: Array<GatedRedemptionQueueSharesWrapperDepositApproval>;
  gatedRedemptionQueueSharesWrapperDepositorBalance?: Maybe<GatedRedemptionQueueSharesWrapperDepositorBalance>;
  gatedRedemptionQueueSharesWrapperDepositorBalances: Array<GatedRedemptionQueueSharesWrapperDepositorBalance>;
  gatedRedemptionQueueSharesWrapperDeposits: Array<GatedRedemptionQueueSharesWrapperDeposit>;
  gatedRedemptionQueueSharesWrapperKick?: Maybe<GatedRedemptionQueueSharesWrapperKick>;
  gatedRedemptionQueueSharesWrapperKicks: Array<GatedRedemptionQueueSharesWrapperKick>;
  gatedRedemptionQueueSharesWrapperRedemption?: Maybe<GatedRedemptionQueueSharesWrapperRedemption>;
  gatedRedemptionQueueSharesWrapperRedemptionApproval?: Maybe<GatedRedemptionQueueSharesWrapperRedemptionApproval>;
  gatedRedemptionQueueSharesWrapperRedemptionApprovals: Array<GatedRedemptionQueueSharesWrapperRedemptionApproval>;
  gatedRedemptionQueueSharesWrapperRedemptionRequest?: Maybe<GatedRedemptionQueueSharesWrapperRedemptionRequest>;
  gatedRedemptionQueueSharesWrapperRedemptionRequests: Array<GatedRedemptionQueueSharesWrapperRedemptionRequest>;
  gatedRedemptionQueueSharesWrapperRedemptions: Array<GatedRedemptionQueueSharesWrapperRedemption>;
  gatedRedemptionQueueSharesWrapperSharesChange?: Maybe<GatedRedemptionQueueSharesWrapperSharesChange>;
  gatedRedemptionQueueSharesWrapperSharesChanges: Array<GatedRedemptionQueueSharesWrapperSharesChange>;
  gatedRedemptionQueueSharesWrapperTransfer?: Maybe<GatedRedemptionQueueSharesWrapperTransfer>;
  gatedRedemptionQueueSharesWrapperTransferApproval?: Maybe<GatedRedemptionQueueSharesWrapperTransferApproval>;
  gatedRedemptionQueueSharesWrapperTransferApprovals: Array<GatedRedemptionQueueSharesWrapperTransferApproval>;
  gatedRedemptionQueueSharesWrapperTransfers: Array<GatedRedemptionQueueSharesWrapperTransfer>;
  gatedRedemptionQueueSharesWrappers: Array<GatedRedemptionQueueSharesWrapper>;
  guaranteedRedemptionPolicies: Array<GuaranteedRedemptionPolicy>;
  guaranteedRedemptionPolicy?: Maybe<GuaranteedRedemptionPolicy>;
  kilnStaking?: Maybe<KilnStaking>;
  kilnStakingPosition?: Maybe<KilnStakingPosition>;
  kilnStakingPositionChange?: Maybe<KilnStakingPositionChange>;
  kilnStakingPositionChanges: Array<KilnStakingPositionChange>;
  kilnStakingPositions: Array<KilnStakingPosition>;
  kilnStakings: Array<KilnStaking>;
  liquityDebtPosition?: Maybe<LiquityDebtPosition>;
  liquityDebtPositionChange?: Maybe<LiquityDebtPositionChange>;
  liquityDebtPositionChanges: Array<LiquityDebtPositionChange>;
  liquityDebtPositions: Array<LiquityDebtPosition>;
  managementFee?: Maybe<ManagementFee>;
  managementFees: Array<ManagementFee>;
  mapleLiquidityPoolV1?: Maybe<MapleLiquidityPoolV1>;
  mapleLiquidityPoolV1S: Array<MapleLiquidityPoolV1>;
  mapleLiquidityPoolV2?: Maybe<MapleLiquidityPoolV2>;
  mapleLiquidityPoolV2S: Array<MapleLiquidityPoolV2>;
  mapleLiquidityPosition?: Maybe<MapleLiquidityPosition>;
  mapleLiquidityPositionChange?: Maybe<MapleLiquidityPositionChange>;
  mapleLiquidityPositionChanges: Array<MapleLiquidityPositionChange>;
  mapleLiquidityPositions: Array<MapleLiquidityPosition>;
  maxConcentrationPolicies: Array<MaxConcentrationPolicy>;
  maxConcentrationPolicy?: Maybe<MaxConcentrationPolicy>;
  migration?: Maybe<Migration>;
  migrations: Array<Migration>;
  minAssetBalancesPostRedemptionPolicies: Array<MinAssetBalancesPostRedemptionPolicy>;
  minAssetBalancesPostRedemptionPolicy?: Maybe<MinAssetBalancesPostRedemptionPolicy>;
  minMaxDepositPolicies: Array<MinMaxDepositPolicy>;
  minMaxDepositPolicy?: Maybe<MinMaxDepositPolicy>;
  minSharesSupplyFee?: Maybe<MinSharesSupplyFee>;
  minSharesSupplyFees: Array<MinSharesSupplyFee>;
  network?: Maybe<Network>;
  networkActivities: Array<NetworkActivity>;
  networkActivity?: Maybe<NetworkActivity>;
  networkReleaseChanged?: Maybe<NetworkReleaseChanged>;
  networkReleaseChangeds: Array<NetworkReleaseChanged>;
  networks: Array<Network>;
  onlyRemoveDustExternalPositionPolicies: Array<OnlyRemoveDustExternalPositionPolicy>;
  onlyRemoveDustExternalPositionPolicy?: Maybe<OnlyRemoveDustExternalPositionPolicy>;
  onlyUntrackDustOrPricelessAssetsPolicies: Array<OnlyUntrackDustOrPricelessAssetsPolicy>;
  onlyUntrackDustOrPricelessAssetsPolicy?: Maybe<OnlyUntrackDustOrPricelessAssetsPolicy>;
  performanceFee?: Maybe<PerformanceFee>;
  performanceFees: Array<PerformanceFee>;
  policies: Array<Policy>;
  policy?: Maybe<Policy>;
  policyDisabledForVault?: Maybe<PolicyDisabledForVault>;
  policyDisabledForVaults: Array<PolicyDisabledForVault>;
  policyEnabledForVault?: Maybe<PolicyEnabledForVault>;
  policyEnabledForVaults: Array<PolicyEnabledForVault>;
  pricelessAssetBypass?: Maybe<PricelessAssetBypass>;
  pricelessAssetBypasses: Array<PricelessAssetBypass>;
  pricelessAssetTimelock?: Maybe<PricelessAssetTimelock>;
  pricelessAssetTimelocks: Array<PricelessAssetTimelock>;
  protocolFee?: Maybe<ProtocolFee>;
  protocolFeeBurned?: Maybe<ProtocolFeeBurned>;
  protocolFeeBurneds: Array<ProtocolFeeBurned>;
  protocolFeePaid?: Maybe<ProtocolFeePaid>;
  protocolFeePaids: Array<ProtocolFeePaid>;
  protocolFees: Array<ProtocolFee>;
  reconfiguration?: Maybe<Reconfiguration>;
  reconfigurations: Array<Reconfiguration>;
  registeredVaultCall?: Maybe<RegisteredVaultCall>;
  registeredVaultCalls: Array<RegisteredVaultCall>;
  release?: Maybe<Release>;
  releases: Array<Release>;
  sharesBoughtEvent?: Maybe<SharesBoughtEvent>;
  sharesBoughtEvents: Array<SharesBoughtEvent>;
  sharesChange?: Maybe<SharesChange>;
  sharesChanges: Array<SharesChange>;
  sharesRedeemedEvent?: Maybe<SharesRedeemedEvent>;
  sharesRedeemedEvents: Array<SharesRedeemedEvent>;
  sharesSplitter?: Maybe<SharesSplitter>;
  sharesSplitterTokenClaims: Array<SharesSplitterTokenClaims>;
  sharesSplitterUserPercentage?: Maybe<SharesSplitterUserPercentage>;
  sharesSplitterUserPercentages: Array<SharesSplitterUserPercentage>;
  sharesSplitters: Array<SharesSplitter>;
  sharesTransferEvent?: Maybe<SharesTransferEvent>;
  sharesTransferEvents: Array<SharesTransferEvent>;
  sharesTransferredInEvent?: Maybe<SharesTransferredInEvent>;
  sharesTransferredInEvents: Array<SharesTransferredInEvent>;
  sharesTransferredOutEvent?: Maybe<SharesTransferredOutEvent>;
  sharesTransferredOutEvents: Array<SharesTransferredOutEvent>;
  theGraphDelegationPosition?: Maybe<TheGraphDelegationPosition>;
  theGraphDelegationPositionChange?: Maybe<TheGraphDelegationPositionChange>;
  theGraphDelegationPositionChanges: Array<TheGraphDelegationPositionChange>;
  theGraphDelegationPositions: Array<TheGraphDelegationPosition>;
  theGraphDelegationToIndexer?: Maybe<TheGraphDelegationToIndexer>;
  theGraphDelegationToIndexers: Array<TheGraphDelegationToIndexer>;
  trade?: Maybe<Trade>;
  trades: Array<Trade>;
  uintList?: Maybe<UintList>;
  uintLists: Array<UintList>;
  uniswapV3LiquidityPosition?: Maybe<UniswapV3LiquidityPosition>;
  uniswapV3LiquidityPositionChange?: Maybe<UniswapV3LiquidityPositionChange>;
  uniswapV3LiquidityPositionChanges: Array<UniswapV3LiquidityPositionChange>;
  uniswapV3LiquidityPositions: Array<UniswapV3LiquidityPosition>;
  uniswapV3Nft?: Maybe<UniswapV3Nft>;
  uniswapV3Nfts: Array<UniswapV3Nft>;
  unknownExternalPosition?: Maybe<UnknownExternalPosition>;
  unknownExternalPositionChange?: Maybe<UnknownExternalPositionChange>;
  unknownExternalPositionChanges: Array<UnknownExternalPositionChange>;
  unknownExternalPositions: Array<UnknownExternalPosition>;
  unknownFee?: Maybe<UnknownFee>;
  unknownFees: Array<UnknownFee>;
  unknownPolicies: Array<UnknownPolicy>;
  unknownPolicy?: Maybe<UnknownPolicy>;
  userAddressList?: Maybe<UserAddressList>;
  userAddressLists: Array<UserAddressList>;
  userUintList?: Maybe<UserUintList>;
  userUintLists: Array<UserUintList>;
  vault?: Maybe<Vault>;
  vaultActivities: Array<VaultActivity>;
  vaultActivity?: Maybe<VaultActivity>;
  vaultCallDeregisteredEvent?: Maybe<VaultCallDeregisteredEvent>;
  vaultCallDeregisteredEvents: Array<VaultCallDeregisteredEvent>;
  vaultCallRegisteredEvent?: Maybe<VaultCallRegisteredEvent>;
  vaultCallRegisteredEvents: Array<VaultCallRegisteredEvent>;
  vaultCreated?: Maybe<VaultCreated>;
  vaultCreateds: Array<VaultCreated>;
  vaultMigrationCancelled?: Maybe<VaultMigrationCancelled>;
  vaultMigrationCancelleds: Array<VaultMigrationCancelled>;
  vaultMigrationExecuted?: Maybe<VaultMigrationExecuted>;
  vaultMigrationExecuteds: Array<VaultMigrationExecuted>;
  vaultMigrationSignalled?: Maybe<VaultMigrationSignalled>;
  vaultMigrationSignalleds: Array<VaultMigrationSignalled>;
  vaultNominatedOwnerRemoved?: Maybe<VaultNominatedOwnerRemoved>;
  vaultNominatedOwnerRemoveds: Array<VaultNominatedOwnerRemoved>;
  vaultNominatedOwnerSet?: Maybe<VaultNominatedOwnerSet>;
  vaultNominatedOwnerSets: Array<VaultNominatedOwnerSet>;
  vaultOwnershipTransferred?: Maybe<VaultOwnershipTransferred>;
  vaultOwnershipTransferreds: Array<VaultOwnershipTransferred>;
  vaultReconfigurationCancelled?: Maybe<VaultReconfigurationCancelled>;
  vaultReconfigurationCancelleds: Array<VaultReconfigurationCancelled>;
  vaultReconfigurationExecuted?: Maybe<VaultReconfigurationExecuted>;
  vaultReconfigurationExecuteds: Array<VaultReconfigurationExecuted>;
  vaultReconfigurationSignalled?: Maybe<VaultReconfigurationSignalled>;
  vaultReconfigurationSignalleds: Array<VaultReconfigurationSignalled>;
  vaults: Array<Vault>;
};


export type QueryMetaArgs = {
  block?: InputMaybe<BlockHeight>;
};


export type QueryAaveDebtPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAaveDebtPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAaveDebtPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AaveDebtPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AaveDebtPositionChangeFilter>;
};


export type QueryAaveDebtPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AaveDebtPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AaveDebtPositionFilter>;
};


export type QueryAccountArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAccountsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AccountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AccountFilter>;
};


export type QueryActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ActivityFilter>;
};


export type QueryActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAdapterBlacklistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdapterBlacklistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AdapterBlacklistPolicyFilter>;
};


export type QueryAdapterBlacklistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAdapterWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdapterWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AdapterWhitelistPolicyFilter>;
};


export type QueryAdapterWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAddressListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAddressListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AddressListFilter>;
};


export type QueryAllowedAdapterIncomingAssetsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAdapterIncomingAssetsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAdapterIncomingAssetsPolicyFilter>;
};


export type QueryAllowedAdapterIncomingAssetsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAllowedAdaptersPerManagerPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAdaptersPerManagerPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAdaptersPerManagerPolicyFilter>;
};


export type QueryAllowedAdaptersPerManagerPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAllowedAdaptersPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAdaptersPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAdaptersPolicyFilter>;
};


export type QueryAllowedAdaptersPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAllowedAssetsForRedemptionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAssetsForRedemptionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAssetsForRedemptionPolicyFilter>;
};


export type QueryAllowedAssetsForRedemptionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAllowedDepositRecipientsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedDepositRecipientsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedDepositRecipientsPolicyFilter>;
};


export type QueryAllowedDepositRecipientsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAllowedExternalPositionTypesPerManagerPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedExternalPositionTypesPerManagerPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedExternalPositionTypesPerManagerPolicyFilter>;
};


export type QueryAllowedExternalPositionTypesPerManagerPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAllowedExternalPositionTypesPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedExternalPositionTypesPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedExternalPositionTypesPolicyFilter>;
};


export type QueryAllowedExternalPositionTypesPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAllowedSharesTransferRecipientsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedSharesTransferRecipientsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedSharesTransferRecipientsPolicyFilter>;
};


export type QueryAllowedSharesTransferRecipientsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryArbitraryLoanFixedInterestModuleArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryArbitraryLoanFixedInterestModulesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanFixedInterestModuleOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanFixedInterestModuleFilter>;
};


export type QueryArbitraryLoanPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryArbitraryLoanPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryArbitraryLoanPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanPositionChangeFilter>;
};


export type QueryArbitraryLoanPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanPositionFilter>;
};


export type QueryArbitraryLoanTotalNominalDeltaOracleModuleArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryArbitraryLoanTotalNominalDeltaOracleModulesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanTotalNominalDeltaOracleModuleOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanTotalNominalDeltaOracleModuleFilter>;
};


export type QueryAssetArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetAddedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetAddedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAddedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetAddedFilter>;
};


export type QueryAssetAmountArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetAmountsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetAmountFilter>;
};


export type QueryAssetBalanceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetBalancesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetBalanceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetBalanceFilter>;
};


export type QueryAssetBlacklistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetBlacklistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetBlacklistPolicyFilter>;
};


export type QueryAssetBlacklistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetPriceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetPricesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetPriceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetPriceFilter>;
};


export type QueryAssetRemovedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetRemovedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetRemovedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetRemovedFilter>;
};


export type QueryAssetWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetWhitelistPolicyFilter>;
};


export type QueryAssetWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryAssetsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetFilter>;
};


export type QueryBuySharesCallerWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BuySharesCallerWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<BuySharesCallerWhitelistPolicyFilter>;
};


export type QueryBuySharesCallerWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryCompoundDebtPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryCompoundDebtPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryCompoundDebtPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CompoundDebtPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CompoundDebtPositionChangeFilter>;
};


export type QueryCompoundDebtPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CompoundDebtPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CompoundDebtPositionFilter>;
};


export type QueryComptrollerArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryComptrollersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ComptrollerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ComptrollerFilter>;
};


export type QueryConvexCurveLpStakingWrapperArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryConvexCurveLpStakingWrappersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConvexCurveLpStakingWrapperOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ConvexCurveLpStakingWrapperFilter>;
};


export type QueryConvexVotingPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryConvexVotingPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryConvexVotingPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConvexVotingPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ConvexVotingPositionChangeFilter>;
};


export type QueryConvexVotingPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConvexVotingPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ConvexVotingPositionFilter>;
};


export type QueryCounterArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryCountersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CounterOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CounterFilter>;
};


export type QueryCumulativeSlippageTolerancePoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CumulativeSlippageTolerancePolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CumulativeSlippageTolerancePolicyFilter>;
};


export type QueryCumulativeSlippageTolerancePolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryCurrencyPriceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryCurrencyPricesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CurrencyPriceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CurrencyPriceFilter>;
};


export type QueryDepositArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryDepositorActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositorActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<DepositorActivityFilter>;
};


export type QueryDepositorActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryDepositorWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositorWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<DepositorWhitelistPolicyFilter>;
};


export type QueryDepositorWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryDepositsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<DepositFilter>;
};


export type QueryEntranceRateBurnFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryEntranceRateBurnFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EntranceRateBurnFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<EntranceRateBurnFeeFilter>;
};


export type QueryEntranceRateDirectFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryEntranceRateDirectFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EntranceRateDirectFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<EntranceRateDirectFeeFilter>;
};


export type QueryExitRateBurnFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryExitRateBurnFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExitRateBurnFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExitRateBurnFeeFilter>;
};


export type QueryExitRateDirectFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryExitRateDirectFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExitRateDirectFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExitRateDirectFeeFilter>;
};


export type QueryExternalPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryExternalPositionAddedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryExternalPositionAddedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionAddedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionAddedEventFilter>;
};


export type QueryExternalPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryExternalPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};


export type QueryExternalPositionRemovedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryExternalPositionRemovedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionRemovedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionRemovedEventFilter>;
};


export type QueryExternalPositionTypeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryExternalPositionTypesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionTypeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionTypeFilter>;
};


export type QueryExternalPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionFilter>;
};


export type QueryFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryFeeSharesAllocationChangedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryFeeSharesAllocationChangedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesAllocationChangedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesAllocationChangedEventFilter>;
};


export type QueryFeeSharesBurnedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryFeeSharesBurnedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesBurnedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesBurnedEventFilter>;
};


export type QueryFeeSharesPaidEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryFeeSharesPaidEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesPaidEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesPaidEventFilter>;
};


export type QueryFeeSharesReceivedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryFeeSharesReceivedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesReceivedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesReceivedEventFilter>;
};


export type QueryFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeFilter>;
};


export type QueryFreelyTransferableSharesSetEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryFreelyTransferableSharesSetEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FreelyTransferableSharesSetEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FreelyTransferableSharesSetEventFilter>;
};


export type QueryGasRelayerArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGasRelayerDepositedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGasRelayerDepositedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerDepositedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerDepositedFilter>;
};


export type QueryGasRelayerTransactionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGasRelayerTransactionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerTransactionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerTransactionFilter>;
};


export type QueryGasRelayerWithdrawnArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGasRelayerWithdrawnsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerWithdrawnOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerWithdrawnFilter>;
};


export type QueryGasRelayersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperDepositArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperDepositApprovalArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperDepositApprovalsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperDepositorBalanceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperDepositorBalancesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperDepositsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperKickArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperKicksArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperKickOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperKickFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperRedemptionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperRedemptionApprovalArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperRedemptionApprovalsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperRedemptionRequestArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperRedemptionRequestsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperRedemptionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperSharesChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperSharesChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperTransferArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperTransferApprovalArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryGatedRedemptionQueueSharesWrapperTransferApprovalsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalFilter>;
};


export type QueryGatedRedemptionQueueSharesWrapperTransfersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferFilter>;
};


export type QueryGatedRedemptionQueueSharesWrappersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
};


export type QueryGuaranteedRedemptionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GuaranteedRedemptionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GuaranteedRedemptionPolicyFilter>;
};


export type QueryGuaranteedRedemptionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryKilnStakingArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryKilnStakingPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryKilnStakingPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryKilnStakingPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<KilnStakingPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<KilnStakingPositionChangeFilter>;
};


export type QueryKilnStakingPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<KilnStakingPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<KilnStakingPositionFilter>;
};


export type QueryKilnStakingsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<KilnStakingOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<KilnStakingFilter>;
};


export type QueryLiquityDebtPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryLiquityDebtPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryLiquityDebtPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LiquityDebtPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<LiquityDebtPositionChangeFilter>;
};


export type QueryLiquityDebtPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LiquityDebtPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<LiquityDebtPositionFilter>;
};


export type QueryManagementFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryManagementFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ManagementFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ManagementFeeFilter>;
};


export type QueryMapleLiquidityPoolV1Args = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMapleLiquidityPoolV1SArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPoolV1OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPoolV1Filter>;
};


export type QueryMapleLiquidityPoolV2Args = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMapleLiquidityPoolV2SArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPoolV2OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPoolV2Filter>;
};


export type QueryMapleLiquidityPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMapleLiquidityPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMapleLiquidityPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPositionChangeFilter>;
};


export type QueryMapleLiquidityPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPositionFilter>;
};


export type QueryMaxConcentrationPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MaxConcentrationPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MaxConcentrationPolicyFilter>;
};


export type QueryMaxConcentrationPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMigrationArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMigrationsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MigrationOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MigrationFilter>;
};


export type QueryMinAssetBalancesPostRedemptionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MinAssetBalancesPostRedemptionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MinAssetBalancesPostRedemptionPolicyFilter>;
};


export type QueryMinAssetBalancesPostRedemptionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMinMaxDepositPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MinMaxDepositPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MinMaxDepositPolicyFilter>;
};


export type QueryMinMaxDepositPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMinSharesSupplyFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryMinSharesSupplyFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MinSharesSupplyFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MinSharesSupplyFeeFilter>;
};


export type QueryNetworkArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryNetworkActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NetworkActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<NetworkActivityFilter>;
};


export type QueryNetworkActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryNetworkReleaseChangedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryNetworkReleaseChangedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NetworkReleaseChangedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<NetworkReleaseChangedFilter>;
};


export type QueryNetworksArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NetworkOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<NetworkFilter>;
};


export type QueryOnlyRemoveDustExternalPositionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OnlyRemoveDustExternalPositionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<OnlyRemoveDustExternalPositionPolicyFilter>;
};


export type QueryOnlyRemoveDustExternalPositionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryOnlyUntrackDustOrPricelessAssetsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OnlyUntrackDustOrPricelessAssetsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<OnlyUntrackDustOrPricelessAssetsPolicyFilter>;
};


export type QueryOnlyUntrackDustOrPricelessAssetsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryPerformanceFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryPerformanceFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PerformanceFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PerformanceFeeFilter>;
};


export type QueryPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PolicyFilter>;
};


export type QueryPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryPolicyDisabledForVaultArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryPolicyDisabledForVaultsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolicyDisabledForVaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PolicyDisabledForVaultFilter>;
};


export type QueryPolicyEnabledForVaultArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryPolicyEnabledForVaultsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolicyEnabledForVaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PolicyEnabledForVaultFilter>;
};


export type QueryPricelessAssetBypassArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryPricelessAssetBypassesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PricelessAssetBypassOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PricelessAssetBypassFilter>;
};


export type QueryPricelessAssetTimelockArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryPricelessAssetTimelocksArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PricelessAssetTimelockOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PricelessAssetTimelockFilter>;
};


export type QueryProtocolFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryProtocolFeeBurnedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryProtocolFeeBurnedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeeBurnedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ProtocolFeeBurnedFilter>;
};


export type QueryProtocolFeePaidArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryProtocolFeePaidsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeePaidOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ProtocolFeePaidFilter>;
};


export type QueryProtocolFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ProtocolFeeFilter>;
};


export type QueryReconfigurationArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryReconfigurationsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReconfigurationOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ReconfigurationFilter>;
};


export type QueryRegisteredVaultCallArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryRegisteredVaultCallsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RegisteredVaultCallOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<RegisteredVaultCallFilter>;
};


export type QueryReleaseArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryReleasesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReleaseOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ReleaseFilter>;
};


export type QuerySharesBoughtEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesBoughtEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesBoughtEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesBoughtEventFilter>;
};


export type QuerySharesChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesChangeFilter>;
};


export type QuerySharesRedeemedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesRedeemedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesRedeemedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesRedeemedEventFilter>;
};


export type QuerySharesSplitterArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesSplitterTokenClaimsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterTokenClaimsOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesSplitterTokenClaimsFilter>;
};


export type QuerySharesSplitterUserPercentageArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesSplitterUserPercentagesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterUserPercentageOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesSplitterUserPercentageFilter>;
};


export type QuerySharesSplittersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesSplitterFilter>;
};


export type QuerySharesTransferEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesTransferEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesTransferEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesTransferEventFilter>;
};


export type QuerySharesTransferredInEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesTransferredInEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesTransferredInEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesTransferredInEventFilter>;
};


export type QuerySharesTransferredOutEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QuerySharesTransferredOutEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesTransferredOutEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesTransferredOutEventFilter>;
};


export type QueryTheGraphDelegationPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryTheGraphDelegationPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryTheGraphDelegationPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TheGraphDelegationPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TheGraphDelegationPositionChangeFilter>;
};


export type QueryTheGraphDelegationPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TheGraphDelegationPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TheGraphDelegationPositionFilter>;
};


export type QueryTheGraphDelegationToIndexerArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryTheGraphDelegationToIndexersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TheGraphDelegationToIndexerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TheGraphDelegationToIndexerFilter>;
};


export type QueryTradeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryTradesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TradeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TradeFilter>;
};


export type QueryUintListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUintListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UintListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UintListFilter>;
};


export type QueryUniswapV3LiquidityPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUniswapV3LiquidityPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUniswapV3LiquidityPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UniswapV3LiquidityPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UniswapV3LiquidityPositionChangeFilter>;
};


export type QueryUniswapV3LiquidityPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UniswapV3LiquidityPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UniswapV3LiquidityPositionFilter>;
};


export type QueryUniswapV3NftArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUniswapV3NftsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UniswapV3NftOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UniswapV3NftFilter>;
};


export type QueryUnknownExternalPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUnknownExternalPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUnknownExternalPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownExternalPositionChangeFilter>;
};


export type QueryUnknownExternalPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownExternalPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownExternalPositionFilter>;
};


export type QueryUnknownFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUnknownFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownFeeFilter>;
};


export type QueryUnknownPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownPolicyFilter>;
};


export type QueryUnknownPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUserAddressListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUserAddressListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserAddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UserAddressListFilter>;
};


export type QueryUserUintListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryUserUintListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserUintListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UserUintListFilter>;
};


export type QueryVaultArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultActivityFilter>;
};


export type QueryVaultActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultCallDeregisteredEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultCallDeregisteredEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultCallDeregisteredEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultCallDeregisteredEventFilter>;
};


export type QueryVaultCallRegisteredEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultCallRegisteredEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultCallRegisteredEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultCallRegisteredEventFilter>;
};


export type QueryVaultCreatedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultCreatedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultCreatedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultCreatedFilter>;
};


export type QueryVaultMigrationCancelledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultMigrationCancelledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultMigrationCancelledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultMigrationCancelledFilter>;
};


export type QueryVaultMigrationExecutedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultMigrationExecutedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultMigrationExecutedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultMigrationExecutedFilter>;
};


export type QueryVaultMigrationSignalledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultMigrationSignalledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultMigrationSignalledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultMigrationSignalledFilter>;
};


export type QueryVaultNominatedOwnerRemovedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultNominatedOwnerRemovedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultNominatedOwnerRemovedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultNominatedOwnerRemovedFilter>;
};


export type QueryVaultNominatedOwnerSetArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultNominatedOwnerSetsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultNominatedOwnerSetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultNominatedOwnerSetFilter>;
};


export type QueryVaultOwnershipTransferredArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultOwnershipTransferredsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOwnershipTransferredOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultOwnershipTransferredFilter>;
};


export type QueryVaultReconfigurationCancelledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultReconfigurationCancelledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultReconfigurationCancelledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultReconfigurationCancelledFilter>;
};


export type QueryVaultReconfigurationExecutedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultReconfigurationExecutedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultReconfigurationExecutedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultReconfigurationExecutedFilter>;
};


export type QueryVaultReconfigurationSignalledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type QueryVaultReconfigurationSignalledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultReconfigurationSignalledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultReconfigurationSignalledFilter>;
};


export type QueryVaultsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultFilter>;
};

export type Reconfiguration = {
  __typename: 'Reconfiguration';
  cancelled: Scalars['Boolean'];
  cancelledTimestamp?: Maybe<Scalars['Int']>;
  comptroller: Comptroller;
  executableTimestamp: Scalars['Int'];
  executed: Scalars['Boolean'];
  executedTimestamp?: Maybe<Scalars['Int']>;
  id: Scalars['ID'];
  release: Release;
  vault: Vault;
};

export type ReconfigurationFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ReconfigurationFilter>>>;
  cancelled?: InputMaybe<Scalars['Boolean']>;
  cancelledTimestamp?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_gt?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_gte?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  cancelledTimestamp_lt?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_lte?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_not?: InputMaybe<Scalars['Int']>;
  cancelledTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  cancelled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  cancelled_not?: InputMaybe<Scalars['Boolean']>;
  cancelled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  executableTimestamp?: InputMaybe<Scalars['Int']>;
  executableTimestamp_gt?: InputMaybe<Scalars['Int']>;
  executableTimestamp_gte?: InputMaybe<Scalars['Int']>;
  executableTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  executableTimestamp_lt?: InputMaybe<Scalars['Int']>;
  executableTimestamp_lte?: InputMaybe<Scalars['Int']>;
  executableTimestamp_not?: InputMaybe<Scalars['Int']>;
  executableTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  executed?: InputMaybe<Scalars['Boolean']>;
  executedTimestamp?: InputMaybe<Scalars['Int']>;
  executedTimestamp_gt?: InputMaybe<Scalars['Int']>;
  executedTimestamp_gte?: InputMaybe<Scalars['Int']>;
  executedTimestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  executedTimestamp_lt?: InputMaybe<Scalars['Int']>;
  executedTimestamp_lte?: InputMaybe<Scalars['Int']>;
  executedTimestamp_not?: InputMaybe<Scalars['Int']>;
  executedTimestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  executed_in?: InputMaybe<Array<Scalars['Boolean']>>;
  executed_not?: InputMaybe<Scalars['Boolean']>;
  executed_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<ReconfigurationFilter>>>;
  release?: InputMaybe<Scalars['String']>;
  release_?: InputMaybe<ReleaseFilter>;
  release_contains?: InputMaybe<Scalars['String']>;
  release_contains_nocase?: InputMaybe<Scalars['String']>;
  release_ends_with?: InputMaybe<Scalars['String']>;
  release_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_gt?: InputMaybe<Scalars['String']>;
  release_gte?: InputMaybe<Scalars['String']>;
  release_in?: InputMaybe<Array<Scalars['String']>>;
  release_lt?: InputMaybe<Scalars['String']>;
  release_lte?: InputMaybe<Scalars['String']>;
  release_not?: InputMaybe<Scalars['String']>;
  release_not_contains?: InputMaybe<Scalars['String']>;
  release_not_contains_nocase?: InputMaybe<Scalars['String']>;
  release_not_ends_with?: InputMaybe<Scalars['String']>;
  release_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_not_in?: InputMaybe<Array<Scalars['String']>>;
  release_not_starts_with?: InputMaybe<Scalars['String']>;
  release_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  release_starts_with?: InputMaybe<Scalars['String']>;
  release_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum ReconfigurationOrderBy {
  CANCELLED = 'cancelled',
  CANCELLEDTIMESTAMP = 'cancelledTimestamp',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  EXECUTABLETIMESTAMP = 'executableTimestamp',
  EXECUTED = 'executed',
  EXECUTEDTIMESTAMP = 'executedTimestamp',
  ID = 'id',
  RELEASE = 'release',
  RELEASE__CLOSE = 'release__close',
  RELEASE__CURRENT = 'release__current',
  RELEASE__DUSTTOLERANCEFORASSETSINWETH = 'release__dustToleranceForAssetsInWeth',
  RELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'release__dustToleranceForExternalPositionsInWeth',
  RELEASE__ID = 'release__id',
  RELEASE__ISLIVE = 'release__isLive',
  RELEASE__OPEN = 'release__open',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type RegisteredVaultCall = {
  __typename: 'RegisteredVaultCall';
  contract: Scalars['Bytes'];
  dataHash: Scalars['Bytes'];
  id: Scalars['ID'];
  registered: Scalars['Boolean'];
  selector: Scalars['Bytes'];
  timestamp: Scalars['Int'];
};

export type RegisteredVaultCallFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<RegisteredVaultCallFilter>>>;
  contract?: InputMaybe<Scalars['Bytes']>;
  contract_contains?: InputMaybe<Scalars['Bytes']>;
  contract_gt?: InputMaybe<Scalars['Bytes']>;
  contract_gte?: InputMaybe<Scalars['Bytes']>;
  contract_in?: InputMaybe<Array<Scalars['Bytes']>>;
  contract_lt?: InputMaybe<Scalars['Bytes']>;
  contract_lte?: InputMaybe<Scalars['Bytes']>;
  contract_not?: InputMaybe<Scalars['Bytes']>;
  contract_not_contains?: InputMaybe<Scalars['Bytes']>;
  contract_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  dataHash?: InputMaybe<Scalars['Bytes']>;
  dataHash_contains?: InputMaybe<Scalars['Bytes']>;
  dataHash_gt?: InputMaybe<Scalars['Bytes']>;
  dataHash_gte?: InputMaybe<Scalars['Bytes']>;
  dataHash_in?: InputMaybe<Array<Scalars['Bytes']>>;
  dataHash_lt?: InputMaybe<Scalars['Bytes']>;
  dataHash_lte?: InputMaybe<Scalars['Bytes']>;
  dataHash_not?: InputMaybe<Scalars['Bytes']>;
  dataHash_not_contains?: InputMaybe<Scalars['Bytes']>;
  dataHash_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<RegisteredVaultCallFilter>>>;
  registered?: InputMaybe<Scalars['Boolean']>;
  registered_in?: InputMaybe<Array<Scalars['Boolean']>>;
  registered_not?: InputMaybe<Scalars['Boolean']>;
  registered_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  selector?: InputMaybe<Scalars['Bytes']>;
  selector_contains?: InputMaybe<Scalars['Bytes']>;
  selector_gt?: InputMaybe<Scalars['Bytes']>;
  selector_gte?: InputMaybe<Scalars['Bytes']>;
  selector_in?: InputMaybe<Array<Scalars['Bytes']>>;
  selector_lt?: InputMaybe<Scalars['Bytes']>;
  selector_lte?: InputMaybe<Scalars['Bytes']>;
  selector_not?: InputMaybe<Scalars['Bytes']>;
  selector_not_contains?: InputMaybe<Scalars['Bytes']>;
  selector_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum RegisteredVaultCallOrderBy {
  CONTRACT = 'contract',
  DATAHASH = 'dataHash',
  ID = 'id',
  REGISTERED = 'registered',
  SELECTOR = 'selector',
  TIMESTAMP = 'timestamp'
}

export type Release = {
  __typename: 'Release';
  close?: Maybe<Scalars['Int']>;
  current: Scalars['Boolean'];
  dustToleranceForAssetsInWeth?: Maybe<Scalars['BigDecimal']>;
  dustToleranceForExternalPositionsInWeth?: Maybe<Scalars['BigDecimal']>;
  id: Scalars['ID'];
  isLive: Scalars['Boolean'];
  network: Network;
  open: Scalars['Int'];
  vaults?: Maybe<Array<Vault>>;
};


export type ReleaseVaultsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VaultFilter>;
};

export type ReleaseFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<ReleaseFilter>>>;
  close?: InputMaybe<Scalars['Int']>;
  close_gt?: InputMaybe<Scalars['Int']>;
  close_gte?: InputMaybe<Scalars['Int']>;
  close_in?: InputMaybe<Array<Scalars['Int']>>;
  close_lt?: InputMaybe<Scalars['Int']>;
  close_lte?: InputMaybe<Scalars['Int']>;
  close_not?: InputMaybe<Scalars['Int']>;
  close_not_in?: InputMaybe<Array<Scalars['Int']>>;
  current?: InputMaybe<Scalars['Boolean']>;
  current_in?: InputMaybe<Array<Scalars['Boolean']>>;
  current_not?: InputMaybe<Scalars['Boolean']>;
  current_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  dustToleranceForAssetsInWeth?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForAssetsInWeth_gt?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForAssetsInWeth_gte?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForAssetsInWeth_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  dustToleranceForAssetsInWeth_lt?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForAssetsInWeth_lte?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForAssetsInWeth_not?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForAssetsInWeth_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  dustToleranceForExternalPositionsInWeth?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForExternalPositionsInWeth_gt?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForExternalPositionsInWeth_gte?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForExternalPositionsInWeth_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  dustToleranceForExternalPositionsInWeth_lt?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForExternalPositionsInWeth_lte?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForExternalPositionsInWeth_not?: InputMaybe<Scalars['BigDecimal']>;
  dustToleranceForExternalPositionsInWeth_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  isLive?: InputMaybe<Scalars['Boolean']>;
  isLive_in?: InputMaybe<Array<Scalars['Boolean']>>;
  isLive_not?: InputMaybe<Scalars['Boolean']>;
  isLive_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  network?: InputMaybe<Scalars['String']>;
  network_?: InputMaybe<NetworkFilter>;
  network_contains?: InputMaybe<Scalars['String']>;
  network_contains_nocase?: InputMaybe<Scalars['String']>;
  network_ends_with?: InputMaybe<Scalars['String']>;
  network_ends_with_nocase?: InputMaybe<Scalars['String']>;
  network_gt?: InputMaybe<Scalars['String']>;
  network_gte?: InputMaybe<Scalars['String']>;
  network_in?: InputMaybe<Array<Scalars['String']>>;
  network_lt?: InputMaybe<Scalars['String']>;
  network_lte?: InputMaybe<Scalars['String']>;
  network_not?: InputMaybe<Scalars['String']>;
  network_not_contains?: InputMaybe<Scalars['String']>;
  network_not_contains_nocase?: InputMaybe<Scalars['String']>;
  network_not_ends_with?: InputMaybe<Scalars['String']>;
  network_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  network_not_in?: InputMaybe<Array<Scalars['String']>>;
  network_not_starts_with?: InputMaybe<Scalars['String']>;
  network_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  network_starts_with?: InputMaybe<Scalars['String']>;
  network_starts_with_nocase?: InputMaybe<Scalars['String']>;
  open?: InputMaybe<Scalars['Int']>;
  open_gt?: InputMaybe<Scalars['Int']>;
  open_gte?: InputMaybe<Scalars['Int']>;
  open_in?: InputMaybe<Array<Scalars['Int']>>;
  open_lt?: InputMaybe<Scalars['Int']>;
  open_lte?: InputMaybe<Scalars['Int']>;
  open_not?: InputMaybe<Scalars['Int']>;
  open_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<ReleaseFilter>>>;
  vaults_?: InputMaybe<VaultFilter>;
};

export enum ReleaseOrderBy {
  CLOSE = 'close',
  CURRENT = 'current',
  DUSTTOLERANCEFORASSETSINWETH = 'dustToleranceForAssetsInWeth',
  DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'dustToleranceForExternalPositionsInWeth',
  ID = 'id',
  ISLIVE = 'isLive',
  NETWORK = 'network',
  NETWORK__DEPOSITORS = 'network__depositors',
  NETWORK__DEPOSITS = 'network__deposits',
  NETWORK__ID = 'network__id',
  NETWORK__MANAGERS = 'network__managers',
  NETWORK__MIGRATIONTIMELOCK = 'network__migrationTimelock',
  NETWORK__MLNBURNED = 'network__mlnBurned',
  NETWORK__NOMINATEDOWNER = 'network__nominatedOwner',
  NETWORK__OWNER = 'network__owner',
  NETWORK__PROTOCOLFEERATE = 'network__protocolFeeRate',
  NETWORK__SHARESTOKENSYMBOL = 'network__sharesTokenSymbol',
  NETWORK__VAULTS = 'network__vaults',
  OPEN = 'open',
  VAULTS = 'vaults'
}

export enum RepaymentTrackingType {
  INTERESTFIRST = 'InterestFirst',
  NONE = 'None',
  PRINCIPALFIRST = 'PrincipalFirst'
}

export type SharesBoughtEvent = Activity & DepositorActivity & SharesChange & VaultActivity & {
  __typename: 'SharesBoughtEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositAssetAmount: AssetAmount;
  depositor: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  sharesIssued: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type SharesBoughtEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<SharesBoughtEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  depositAssetAmount?: InputMaybe<Scalars['String']>;
  depositAssetAmount_?: InputMaybe<AssetAmountFilter>;
  depositAssetAmount_contains?: InputMaybe<Scalars['String']>;
  depositAssetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  depositAssetAmount_ends_with?: InputMaybe<Scalars['String']>;
  depositAssetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositAssetAmount_gt?: InputMaybe<Scalars['String']>;
  depositAssetAmount_gte?: InputMaybe<Scalars['String']>;
  depositAssetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  depositAssetAmount_lt?: InputMaybe<Scalars['String']>;
  depositAssetAmount_lte?: InputMaybe<Scalars['String']>;
  depositAssetAmount_not?: InputMaybe<Scalars['String']>;
  depositAssetAmount_not_contains?: InputMaybe<Scalars['String']>;
  depositAssetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositAssetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  depositAssetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositAssetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositAssetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  depositAssetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositAssetAmount_starts_with?: InputMaybe<Scalars['String']>;
  depositAssetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesBoughtEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  sharesIssued?: InputMaybe<Scalars['BigDecimal']>;
  sharesIssued_gt?: InputMaybe<Scalars['BigDecimal']>;
  sharesIssued_gte?: InputMaybe<Scalars['BigDecimal']>;
  sharesIssued_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sharesIssued_lt?: InputMaybe<Scalars['BigDecimal']>;
  sharesIssued_lte?: InputMaybe<Scalars['BigDecimal']>;
  sharesIssued_not?: InputMaybe<Scalars['BigDecimal']>;
  sharesIssued_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesBoughtEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSITASSETAMOUNT = 'depositAssetAmount',
  DEPOSITASSETAMOUNT__AMOUNT = 'depositAssetAmount__amount',
  DEPOSITASSETAMOUNT__ID = 'depositAssetAmount__id',
  DEPOSITASSETAMOUNT__TIMESTAMP = 'depositAssetAmount__timestamp',
  DEPOSITASSETAMOUNT__VALUEAUD = 'depositAssetAmount__valueAud',
  DEPOSITASSETAMOUNT__VALUEBTC = 'depositAssetAmount__valueBtc',
  DEPOSITASSETAMOUNT__VALUECHF = 'depositAssetAmount__valueChf',
  DEPOSITASSETAMOUNT__VALUEDENOMINATION = 'depositAssetAmount__valueDenomination',
  DEPOSITASSETAMOUNT__VALUEETH = 'depositAssetAmount__valueEth',
  DEPOSITASSETAMOUNT__VALUEEUR = 'depositAssetAmount__valueEur',
  DEPOSITASSETAMOUNT__VALUEGBP = 'depositAssetAmount__valueGbp',
  DEPOSITASSETAMOUNT__VALUEJPY = 'depositAssetAmount__valueJpy',
  DEPOSITASSETAMOUNT__VALUEUSD = 'depositAssetAmount__valueUsd',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  SHARESISSUED = 'sharesIssued',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type SharesChange = {
  deposit: Deposit;
  depositor: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export enum SharesChangeType {
  FEESHARESALLOCATIONCHANGED = 'FeeSharesAllocationChanged',
  FEESHARESBURNED = 'FeeSharesBurned',
  FEESHARESPAID = 'FeeSharesPaid',
  FEESHARESRECEIVED = 'FeeSharesReceived',
  PROTOCOLFEEBURNT = 'ProtocolFeeBurnt',
  PROTOCOLFEEPAID = 'ProtocolFeePaid',
  SHARESBOUGHT = 'SharesBought',
  SHARESREDEEMED = 'SharesRedeemed',
  SHARESTRANSFERREDIN = 'SharesTransferredIn',
  SHARESTRANSFERREDOUT = 'SharesTransferredOut'
}

export type SharesChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<SharesChangeFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesChangeFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesChangeOrderBy {
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type SharesRedeemedEvent = Activity & DepositorActivity & SharesChange & VaultActivity & {
  __typename: 'SharesRedeemedEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  id: Scalars['ID'];
  payoutAssetAmounts: Array<AssetAmount>;
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};


export type SharesRedeemedEventPayoutAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};

export type SharesRedeemedEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<SharesRedeemedEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesRedeemedEventFilter>>>;
  payoutAssetAmounts?: InputMaybe<Array<Scalars['String']>>;
  payoutAssetAmounts_?: InputMaybe<AssetAmountFilter>;
  payoutAssetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  payoutAssetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  payoutAssetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  payoutAssetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  payoutAssetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesRedeemedEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  PAYOUTASSETAMOUNTS = 'payoutAssetAmounts',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type SharesSplitter = {
  __typename: 'SharesSplitter';
  createdAt: Scalars['Int'];
  creator: Account;
  id: Scalars['ID'];
  tokenClaims: Array<SharesSplitterTokenClaims>;
  userPercentages: Array<SharesSplitterUserPercentage>;
  vaults: Array<Vault>;
};


export type SharesSplitterTokenClaimsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterTokenClaimsOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SharesSplitterTokenClaimsFilter>;
};


export type SharesSplitterUserPercentagesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterUserPercentageOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SharesSplitterUserPercentageFilter>;
};


export type SharesSplitterVaultsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VaultFilter>;
};

export type SharesSplitterTokenClaims = {
  __typename: 'SharesSplitterTokenClaims';
  amount: Scalars['BigDecimal'];
  id: Scalars['ID'];
  sharesSplitter: SharesSplitter;
  token: Scalars['Bytes'];
  user: Account;
};

export type SharesSplitterTokenClaimsFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  amount?: InputMaybe<Scalars['BigDecimal']>;
  amount_gt?: InputMaybe<Scalars['BigDecimal']>;
  amount_gte?: InputMaybe<Scalars['BigDecimal']>;
  amount_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  amount_lt?: InputMaybe<Scalars['BigDecimal']>;
  amount_lte?: InputMaybe<Scalars['BigDecimal']>;
  amount_not?: InputMaybe<Scalars['BigDecimal']>;
  amount_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  and?: InputMaybe<Array<InputMaybe<SharesSplitterTokenClaimsFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesSplitterTokenClaimsFilter>>>;
  sharesSplitter?: InputMaybe<Scalars['String']>;
  sharesSplitter_?: InputMaybe<SharesSplitterFilter>;
  sharesSplitter_contains?: InputMaybe<Scalars['String']>;
  sharesSplitter_contains_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_ends_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_gt?: InputMaybe<Scalars['String']>;
  sharesSplitter_gte?: InputMaybe<Scalars['String']>;
  sharesSplitter_in?: InputMaybe<Array<Scalars['String']>>;
  sharesSplitter_lt?: InputMaybe<Scalars['String']>;
  sharesSplitter_lte?: InputMaybe<Scalars['String']>;
  sharesSplitter_not?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_contains?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_contains_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_ends_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_in?: InputMaybe<Array<Scalars['String']>>;
  sharesSplitter_not_starts_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_starts_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token?: InputMaybe<Scalars['Bytes']>;
  token_contains?: InputMaybe<Scalars['Bytes']>;
  token_gt?: InputMaybe<Scalars['Bytes']>;
  token_gte?: InputMaybe<Scalars['Bytes']>;
  token_in?: InputMaybe<Array<Scalars['Bytes']>>;
  token_lt?: InputMaybe<Scalars['Bytes']>;
  token_lte?: InputMaybe<Scalars['Bytes']>;
  token_not?: InputMaybe<Scalars['Bytes']>;
  token_not_contains?: InputMaybe<Scalars['Bytes']>;
  token_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  user?: InputMaybe<Scalars['String']>;
  user_?: InputMaybe<AccountFilter>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesSplitterTokenClaimsOrderBy {
  AMOUNT = 'amount',
  ID = 'id',
  SHARESSPLITTER = 'sharesSplitter',
  SHARESSPLITTER__CREATEDAT = 'sharesSplitter__createdAt',
  SHARESSPLITTER__ID = 'sharesSplitter__id',
  TOKEN = 'token',
  USER = 'user',
  USER__ASSETMANAGERSINCE = 'user__assetManagerSince',
  USER__AUTHUSERSINCE = 'user__authUserSince',
  USER__DEPOSITORSINCE = 'user__depositorSince',
  USER__ID = 'user__id',
  USER__ISASSETMANAGER = 'user__isAssetManager',
  USER__ISAUTHUSER = 'user__isAuthUser',
  USER__ISDEPOSITOR = 'user__isDepositor',
  USER__ISOWNER = 'user__isOwner',
  USER__OWNERSINCE = 'user__ownerSince'
}

export type SharesSplitterUserPercentage = {
  __typename: 'SharesSplitterUserPercentage';
  id: Scalars['ID'];
  percentage: Scalars['BigDecimal'];
  sharesSplitter: SharesSplitter;
  user: Account;
};

export type SharesSplitterUserPercentageFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<SharesSplitterUserPercentageFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesSplitterUserPercentageFilter>>>;
  percentage?: InputMaybe<Scalars['BigDecimal']>;
  percentage_gt?: InputMaybe<Scalars['BigDecimal']>;
  percentage_gte?: InputMaybe<Scalars['BigDecimal']>;
  percentage_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  percentage_lt?: InputMaybe<Scalars['BigDecimal']>;
  percentage_lte?: InputMaybe<Scalars['BigDecimal']>;
  percentage_not?: InputMaybe<Scalars['BigDecimal']>;
  percentage_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  sharesSplitter?: InputMaybe<Scalars['String']>;
  sharesSplitter_?: InputMaybe<SharesSplitterFilter>;
  sharesSplitter_contains?: InputMaybe<Scalars['String']>;
  sharesSplitter_contains_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_ends_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_gt?: InputMaybe<Scalars['String']>;
  sharesSplitter_gte?: InputMaybe<Scalars['String']>;
  sharesSplitter_in?: InputMaybe<Array<Scalars['String']>>;
  sharesSplitter_lt?: InputMaybe<Scalars['String']>;
  sharesSplitter_lte?: InputMaybe<Scalars['String']>;
  sharesSplitter_not?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_contains?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_contains_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_ends_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_in?: InputMaybe<Array<Scalars['String']>>;
  sharesSplitter_not_starts_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sharesSplitter_starts_with?: InputMaybe<Scalars['String']>;
  sharesSplitter_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user?: InputMaybe<Scalars['String']>;
  user_?: InputMaybe<AccountFilter>;
  user_contains?: InputMaybe<Scalars['String']>;
  user_contains_nocase?: InputMaybe<Scalars['String']>;
  user_ends_with?: InputMaybe<Scalars['String']>;
  user_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_gt?: InputMaybe<Scalars['String']>;
  user_gte?: InputMaybe<Scalars['String']>;
  user_in?: InputMaybe<Array<Scalars['String']>>;
  user_lt?: InputMaybe<Scalars['String']>;
  user_lte?: InputMaybe<Scalars['String']>;
  user_not?: InputMaybe<Scalars['String']>;
  user_not_contains?: InputMaybe<Scalars['String']>;
  user_not_contains_nocase?: InputMaybe<Scalars['String']>;
  user_not_ends_with?: InputMaybe<Scalars['String']>;
  user_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  user_not_in?: InputMaybe<Array<Scalars['String']>>;
  user_not_starts_with?: InputMaybe<Scalars['String']>;
  user_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  user_starts_with?: InputMaybe<Scalars['String']>;
  user_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesSplitterUserPercentageOrderBy {
  ID = 'id',
  PERCENTAGE = 'percentage',
  SHARESSPLITTER = 'sharesSplitter',
  SHARESSPLITTER__CREATEDAT = 'sharesSplitter__createdAt',
  SHARESSPLITTER__ID = 'sharesSplitter__id',
  USER = 'user',
  USER__ASSETMANAGERSINCE = 'user__assetManagerSince',
  USER__AUTHUSERSINCE = 'user__authUserSince',
  USER__DEPOSITORSINCE = 'user__depositorSince',
  USER__ID = 'user__id',
  USER__ISASSETMANAGER = 'user__isAssetManager',
  USER__ISAUTHUSER = 'user__isAuthUser',
  USER__ISDEPOSITOR = 'user__isDepositor',
  USER__ISOWNER = 'user__isOwner',
  USER__OWNERSINCE = 'user__ownerSince'
}

export type SharesSplitterFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<SharesSplitterFilter>>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  creator?: InputMaybe<Scalars['String']>;
  creator_?: InputMaybe<AccountFilter>;
  creator_contains?: InputMaybe<Scalars['String']>;
  creator_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_ends_with?: InputMaybe<Scalars['String']>;
  creator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_gt?: InputMaybe<Scalars['String']>;
  creator_gte?: InputMaybe<Scalars['String']>;
  creator_in?: InputMaybe<Array<Scalars['String']>>;
  creator_lt?: InputMaybe<Scalars['String']>;
  creator_lte?: InputMaybe<Scalars['String']>;
  creator_not?: InputMaybe<Scalars['String']>;
  creator_not_contains?: InputMaybe<Scalars['String']>;
  creator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_not_ends_with?: InputMaybe<Scalars['String']>;
  creator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_not_in?: InputMaybe<Array<Scalars['String']>>;
  creator_not_starts_with?: InputMaybe<Scalars['String']>;
  creator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  creator_starts_with?: InputMaybe<Scalars['String']>;
  creator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesSplitterFilter>>>;
  tokenClaims_?: InputMaybe<SharesSplitterTokenClaimsFilter>;
  userPercentages_?: InputMaybe<SharesSplitterUserPercentageFilter>;
  vaults?: InputMaybe<Array<Scalars['String']>>;
  vaults_?: InputMaybe<VaultFilter>;
  vaults_contains?: InputMaybe<Array<Scalars['String']>>;
  vaults_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  vaults_not?: InputMaybe<Array<Scalars['String']>>;
  vaults_not_contains?: InputMaybe<Array<Scalars['String']>>;
  vaults_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
};

export enum SharesSplitterOrderBy {
  CREATEDAT = 'createdAt',
  CREATOR = 'creator',
  CREATOR__ASSETMANAGERSINCE = 'creator__assetManagerSince',
  CREATOR__AUTHUSERSINCE = 'creator__authUserSince',
  CREATOR__DEPOSITORSINCE = 'creator__depositorSince',
  CREATOR__ID = 'creator__id',
  CREATOR__ISASSETMANAGER = 'creator__isAssetManager',
  CREATOR__ISAUTHUSER = 'creator__isAuthUser',
  CREATOR__ISDEPOSITOR = 'creator__isDepositor',
  CREATOR__ISOWNER = 'creator__isOwner',
  CREATOR__OWNERSINCE = 'creator__ownerSince',
  ID = 'id',
  TOKENCLAIMS = 'tokenClaims',
  USERPERCENTAGES = 'userPercentages',
  VAULTS = 'vaults'
}

export type SharesTransferEvent = Activity & VaultActivity & {
  __typename: 'SharesTransferEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  from: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  timestamp: Scalars['Int'];
  to: Account;
  vault: Vault;
};

export type SharesTransferEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<SharesTransferEventFilter>>>;
  from?: InputMaybe<Scalars['String']>;
  from_?: InputMaybe<AccountFilter>;
  from_contains?: InputMaybe<Scalars['String']>;
  from_contains_nocase?: InputMaybe<Scalars['String']>;
  from_ends_with?: InputMaybe<Scalars['String']>;
  from_ends_with_nocase?: InputMaybe<Scalars['String']>;
  from_gt?: InputMaybe<Scalars['String']>;
  from_gte?: InputMaybe<Scalars['String']>;
  from_in?: InputMaybe<Array<Scalars['String']>>;
  from_lt?: InputMaybe<Scalars['String']>;
  from_lte?: InputMaybe<Scalars['String']>;
  from_not?: InputMaybe<Scalars['String']>;
  from_not_contains?: InputMaybe<Scalars['String']>;
  from_not_contains_nocase?: InputMaybe<Scalars['String']>;
  from_not_ends_with?: InputMaybe<Scalars['String']>;
  from_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  from_not_in?: InputMaybe<Array<Scalars['String']>>;
  from_not_starts_with?: InputMaybe<Scalars['String']>;
  from_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  from_starts_with?: InputMaybe<Scalars['String']>;
  from_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesTransferEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  to?: InputMaybe<Scalars['String']>;
  to_?: InputMaybe<AccountFilter>;
  to_contains?: InputMaybe<Scalars['String']>;
  to_contains_nocase?: InputMaybe<Scalars['String']>;
  to_ends_with?: InputMaybe<Scalars['String']>;
  to_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to_gt?: InputMaybe<Scalars['String']>;
  to_gte?: InputMaybe<Scalars['String']>;
  to_in?: InputMaybe<Array<Scalars['String']>>;
  to_lt?: InputMaybe<Scalars['String']>;
  to_lte?: InputMaybe<Scalars['String']>;
  to_not?: InputMaybe<Scalars['String']>;
  to_not_contains?: InputMaybe<Scalars['String']>;
  to_not_contains_nocase?: InputMaybe<Scalars['String']>;
  to_not_ends_with?: InputMaybe<Scalars['String']>;
  to_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  to_not_in?: InputMaybe<Array<Scalars['String']>>;
  to_not_starts_with?: InputMaybe<Scalars['String']>;
  to_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  to_starts_with?: InputMaybe<Scalars['String']>;
  to_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesTransferEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  FROM = 'from',
  FROM__ASSETMANAGERSINCE = 'from__assetManagerSince',
  FROM__AUTHUSERSINCE = 'from__authUserSince',
  FROM__DEPOSITORSINCE = 'from__depositorSince',
  FROM__ID = 'from__id',
  FROM__ISASSETMANAGER = 'from__isAssetManager',
  FROM__ISAUTHUSER = 'from__isAuthUser',
  FROM__ISDEPOSITOR = 'from__isDepositor',
  FROM__ISOWNER = 'from__isOwner',
  FROM__OWNERSINCE = 'from__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  TIMESTAMP = 'timestamp',
  TO = 'to',
  TO__ASSETMANAGERSINCE = 'to__assetManagerSince',
  TO__AUTHUSERSINCE = 'to__authUserSince',
  TO__DEPOSITORSINCE = 'to__depositorSince',
  TO__ID = 'to__id',
  TO__ISASSETMANAGER = 'to__isAssetManager',
  TO__ISAUTHUSER = 'to__isAuthUser',
  TO__ISDEPOSITOR = 'to__isDepositor',
  TO__ISOWNER = 'to__isOwner',
  TO__OWNERSINCE = 'to__ownerSince',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type SharesTransferredInEvent = Activity & DepositorActivity & SharesChange & {
  __typename: 'SharesTransferredInEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type SharesTransferredInEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<SharesTransferredInEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesTransferredInEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesTransferredInEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type SharesTransferredOutEvent = Activity & DepositorActivity & SharesChange & {
  __typename: 'SharesTransferredOutEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  deposit: Deposit;
  depositor: Account;
  id: Scalars['ID'];
  shares: Scalars['BigDecimal'];
  sharesChangeType: SharesChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type SharesTransferredOutEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<SharesTransferredOutEventFilter>>>;
  deposit?: InputMaybe<Scalars['String']>;
  deposit_?: InputMaybe<DepositFilter>;
  deposit_contains?: InputMaybe<Scalars['String']>;
  deposit_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_ends_with?: InputMaybe<Scalars['String']>;
  deposit_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_gt?: InputMaybe<Scalars['String']>;
  deposit_gte?: InputMaybe<Scalars['String']>;
  deposit_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_lt?: InputMaybe<Scalars['String']>;
  deposit_lte?: InputMaybe<Scalars['String']>;
  deposit_not?: InputMaybe<Scalars['String']>;
  deposit_not_contains?: InputMaybe<Scalars['String']>;
  deposit_not_contains_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with?: InputMaybe<Scalars['String']>;
  deposit_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_not_in?: InputMaybe<Array<Scalars['String']>>;
  deposit_not_starts_with?: InputMaybe<Scalars['String']>;
  deposit_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  deposit_starts_with?: InputMaybe<Scalars['String']>;
  deposit_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor?: InputMaybe<Scalars['String']>;
  depositor_?: InputMaybe<AccountFilter>;
  depositor_contains?: InputMaybe<Scalars['String']>;
  depositor_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_ends_with?: InputMaybe<Scalars['String']>;
  depositor_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_gt?: InputMaybe<Scalars['String']>;
  depositor_gte?: InputMaybe<Scalars['String']>;
  depositor_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_lt?: InputMaybe<Scalars['String']>;
  depositor_lte?: InputMaybe<Scalars['String']>;
  depositor_not?: InputMaybe<Scalars['String']>;
  depositor_not_contains?: InputMaybe<Scalars['String']>;
  depositor_not_contains_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with?: InputMaybe<Scalars['String']>;
  depositor_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_not_in?: InputMaybe<Array<Scalars['String']>>;
  depositor_not_starts_with?: InputMaybe<Scalars['String']>;
  depositor_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositor_starts_with?: InputMaybe<Scalars['String']>;
  depositor_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<SharesTransferredOutEventFilter>>>;
  shares?: InputMaybe<Scalars['BigDecimal']>;
  sharesChangeType?: InputMaybe<SharesChangeType>;
  sharesChangeType_in?: InputMaybe<Array<SharesChangeType>>;
  sharesChangeType_not?: InputMaybe<SharesChangeType>;
  sharesChangeType_not_in?: InputMaybe<Array<SharesChangeType>>;
  shares_gt?: InputMaybe<Scalars['BigDecimal']>;
  shares_gte?: InputMaybe<Scalars['BigDecimal']>;
  shares_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  shares_lt?: InputMaybe<Scalars['BigDecimal']>;
  shares_lte?: InputMaybe<Scalars['BigDecimal']>;
  shares_not?: InputMaybe<Scalars['BigDecimal']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum SharesTransferredOutEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  DEPOSIT = 'deposit',
  DEPOSIT__ID = 'deposit__id',
  DEPOSIT__SHARES = 'deposit__shares',
  DEPOSIT__SINCE = 'deposit__since',
  DEPOSITOR = 'depositor',
  DEPOSITOR__ASSETMANAGERSINCE = 'depositor__assetManagerSince',
  DEPOSITOR__AUTHUSERSINCE = 'depositor__authUserSince',
  DEPOSITOR__DEPOSITORSINCE = 'depositor__depositorSince',
  DEPOSITOR__ID = 'depositor__id',
  DEPOSITOR__ISASSETMANAGER = 'depositor__isAssetManager',
  DEPOSITOR__ISAUTHUSER = 'depositor__isAuthUser',
  DEPOSITOR__ISDEPOSITOR = 'depositor__isDepositor',
  DEPOSITOR__ISOWNER = 'depositor__isOwner',
  DEPOSITOR__OWNERSINCE = 'depositor__ownerSince',
  ID = 'id',
  SHARES = 'shares',
  SHARESCHANGETYPE = 'sharesChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type Subscription = {
  __typename: 'Subscription';
  /** Access to subgraph metadata */
  _meta?: Maybe<Meta>;
  aaveDebtPosition?: Maybe<AaveDebtPosition>;
  aaveDebtPositionChange?: Maybe<AaveDebtPositionChange>;
  aaveDebtPositionChanges: Array<AaveDebtPositionChange>;
  aaveDebtPositions: Array<AaveDebtPosition>;
  account?: Maybe<Account>;
  accounts: Array<Account>;
  activities: Array<Activity>;
  activity?: Maybe<Activity>;
  adapterBlacklistPolicies: Array<AdapterBlacklistPolicy>;
  adapterBlacklistPolicy?: Maybe<AdapterBlacklistPolicy>;
  adapterWhitelistPolicies: Array<AdapterWhitelistPolicy>;
  adapterWhitelistPolicy?: Maybe<AdapterWhitelistPolicy>;
  addressList?: Maybe<AddressList>;
  addressLists: Array<AddressList>;
  allowedAdapterIncomingAssetsPolicies: Array<AllowedAdapterIncomingAssetsPolicy>;
  allowedAdapterIncomingAssetsPolicy?: Maybe<AllowedAdapterIncomingAssetsPolicy>;
  allowedAdaptersPerManagerPolicies: Array<AllowedAdaptersPerManagerPolicy>;
  allowedAdaptersPerManagerPolicy?: Maybe<AllowedAdaptersPerManagerPolicy>;
  allowedAdaptersPolicies: Array<AllowedAdaptersPolicy>;
  allowedAdaptersPolicy?: Maybe<AllowedAdaptersPolicy>;
  allowedAssetsForRedemptionPolicies: Array<AllowedAssetsForRedemptionPolicy>;
  allowedAssetsForRedemptionPolicy?: Maybe<AllowedAssetsForRedemptionPolicy>;
  allowedDepositRecipientsPolicies: Array<AllowedDepositRecipientsPolicy>;
  allowedDepositRecipientsPolicy?: Maybe<AllowedDepositRecipientsPolicy>;
  allowedExternalPositionTypesPerManagerPolicies: Array<AllowedExternalPositionTypesPerManagerPolicy>;
  allowedExternalPositionTypesPerManagerPolicy?: Maybe<AllowedExternalPositionTypesPerManagerPolicy>;
  allowedExternalPositionTypesPolicies: Array<AllowedExternalPositionTypesPolicy>;
  allowedExternalPositionTypesPolicy?: Maybe<AllowedExternalPositionTypesPolicy>;
  allowedSharesTransferRecipientsPolicies: Array<AllowedSharesTransferRecipientsPolicy>;
  allowedSharesTransferRecipientsPolicy?: Maybe<AllowedSharesTransferRecipientsPolicy>;
  arbitraryLoanFixedInterestModule?: Maybe<ArbitraryLoanFixedInterestModule>;
  arbitraryLoanFixedInterestModules: Array<ArbitraryLoanFixedInterestModule>;
  arbitraryLoanPosition?: Maybe<ArbitraryLoanPosition>;
  arbitraryLoanPositionChange?: Maybe<ArbitraryLoanPositionChange>;
  arbitraryLoanPositionChanges: Array<ArbitraryLoanPositionChange>;
  arbitraryLoanPositions: Array<ArbitraryLoanPosition>;
  arbitraryLoanTotalNominalDeltaOracleModule?: Maybe<ArbitraryLoanTotalNominalDeltaOracleModule>;
  arbitraryLoanTotalNominalDeltaOracleModules: Array<ArbitraryLoanTotalNominalDeltaOracleModule>;
  asset?: Maybe<Asset>;
  assetAdded?: Maybe<AssetAdded>;
  assetAddeds: Array<AssetAdded>;
  assetAmount?: Maybe<AssetAmount>;
  assetAmounts: Array<AssetAmount>;
  assetBalance?: Maybe<AssetBalance>;
  assetBalances: Array<AssetBalance>;
  assetBlacklistPolicies: Array<AssetBlacklistPolicy>;
  assetBlacklistPolicy?: Maybe<AssetBlacklistPolicy>;
  assetPrice?: Maybe<AssetPrice>;
  assetPrices: Array<AssetPrice>;
  assetRemoved?: Maybe<AssetRemoved>;
  assetRemoveds: Array<AssetRemoved>;
  assetWhitelistPolicies: Array<AssetWhitelistPolicy>;
  assetWhitelistPolicy?: Maybe<AssetWhitelistPolicy>;
  assets: Array<Asset>;
  buySharesCallerWhitelistPolicies: Array<BuySharesCallerWhitelistPolicy>;
  buySharesCallerWhitelistPolicy?: Maybe<BuySharesCallerWhitelistPolicy>;
  compoundDebtPosition?: Maybe<CompoundDebtPosition>;
  compoundDebtPositionChange?: Maybe<CompoundDebtPositionChange>;
  compoundDebtPositionChanges: Array<CompoundDebtPositionChange>;
  compoundDebtPositions: Array<CompoundDebtPosition>;
  comptroller?: Maybe<Comptroller>;
  comptrollers: Array<Comptroller>;
  convexCurveLpStakingWrapper?: Maybe<ConvexCurveLpStakingWrapper>;
  convexCurveLpStakingWrappers: Array<ConvexCurveLpStakingWrapper>;
  convexVotingPosition?: Maybe<ConvexVotingPosition>;
  convexVotingPositionChange?: Maybe<ConvexVotingPositionChange>;
  convexVotingPositionChanges: Array<ConvexVotingPositionChange>;
  convexVotingPositions: Array<ConvexVotingPosition>;
  counter?: Maybe<Counter>;
  counters: Array<Counter>;
  cumulativeSlippageTolerancePolicies: Array<CumulativeSlippageTolerancePolicy>;
  cumulativeSlippageTolerancePolicy?: Maybe<CumulativeSlippageTolerancePolicy>;
  currencyPrice?: Maybe<CurrencyPrice>;
  currencyPrices: Array<CurrencyPrice>;
  deposit?: Maybe<Deposit>;
  depositorActivities: Array<DepositorActivity>;
  depositorActivity?: Maybe<DepositorActivity>;
  depositorWhitelistPolicies: Array<DepositorWhitelistPolicy>;
  depositorWhitelistPolicy?: Maybe<DepositorWhitelistPolicy>;
  deposits: Array<Deposit>;
  entranceRateBurnFee?: Maybe<EntranceRateBurnFee>;
  entranceRateBurnFees: Array<EntranceRateBurnFee>;
  entranceRateDirectFee?: Maybe<EntranceRateDirectFee>;
  entranceRateDirectFees: Array<EntranceRateDirectFee>;
  exitRateBurnFee?: Maybe<ExitRateBurnFee>;
  exitRateBurnFees: Array<ExitRateBurnFee>;
  exitRateDirectFee?: Maybe<ExitRateDirectFee>;
  exitRateDirectFees: Array<ExitRateDirectFee>;
  externalPosition?: Maybe<ExternalPosition>;
  externalPositionAddedEvent?: Maybe<ExternalPositionAddedEvent>;
  externalPositionAddedEvents: Array<ExternalPositionAddedEvent>;
  externalPositionChange?: Maybe<ExternalPositionChange>;
  externalPositionChanges: Array<ExternalPositionChange>;
  externalPositionRemovedEvent?: Maybe<ExternalPositionRemovedEvent>;
  externalPositionRemovedEvents: Array<ExternalPositionRemovedEvent>;
  externalPositionType?: Maybe<ExternalPositionType>;
  externalPositionTypes: Array<ExternalPositionType>;
  externalPositions: Array<ExternalPosition>;
  fee?: Maybe<Fee>;
  feeSharesAllocationChangedEvent?: Maybe<FeeSharesAllocationChangedEvent>;
  feeSharesAllocationChangedEvents: Array<FeeSharesAllocationChangedEvent>;
  feeSharesBurnedEvent?: Maybe<FeeSharesBurnedEvent>;
  feeSharesBurnedEvents: Array<FeeSharesBurnedEvent>;
  feeSharesPaidEvent?: Maybe<FeeSharesPaidEvent>;
  feeSharesPaidEvents: Array<FeeSharesPaidEvent>;
  feeSharesReceivedEvent?: Maybe<FeeSharesReceivedEvent>;
  feeSharesReceivedEvents: Array<FeeSharesReceivedEvent>;
  fees: Array<Fee>;
  freelyTransferableSharesSetEvent?: Maybe<FreelyTransferableSharesSetEvent>;
  freelyTransferableSharesSetEvents: Array<FreelyTransferableSharesSetEvent>;
  gasRelayer?: Maybe<GasRelayer>;
  gasRelayerDeposited?: Maybe<GasRelayerDeposited>;
  gasRelayerDepositeds: Array<GasRelayerDeposited>;
  gasRelayerTransaction?: Maybe<GasRelayerTransaction>;
  gasRelayerTransactions: Array<GasRelayerTransaction>;
  gasRelayerWithdrawn?: Maybe<GasRelayerWithdrawn>;
  gasRelayerWithdrawns: Array<GasRelayerWithdrawn>;
  gasRelayers: Array<GasRelayer>;
  gatedRedemptionQueueSharesWrapper?: Maybe<GatedRedemptionQueueSharesWrapper>;
  gatedRedemptionQueueSharesWrapperDeposit?: Maybe<GatedRedemptionQueueSharesWrapperDeposit>;
  gatedRedemptionQueueSharesWrapperDepositApproval?: Maybe<GatedRedemptionQueueSharesWrapperDepositApproval>;
  gatedRedemptionQueueSharesWrapperDepositApprovals: Array<GatedRedemptionQueueSharesWrapperDepositApproval>;
  gatedRedemptionQueueSharesWrapperDepositorBalance?: Maybe<GatedRedemptionQueueSharesWrapperDepositorBalance>;
  gatedRedemptionQueueSharesWrapperDepositorBalances: Array<GatedRedemptionQueueSharesWrapperDepositorBalance>;
  gatedRedemptionQueueSharesWrapperDeposits: Array<GatedRedemptionQueueSharesWrapperDeposit>;
  gatedRedemptionQueueSharesWrapperKick?: Maybe<GatedRedemptionQueueSharesWrapperKick>;
  gatedRedemptionQueueSharesWrapperKicks: Array<GatedRedemptionQueueSharesWrapperKick>;
  gatedRedemptionQueueSharesWrapperRedemption?: Maybe<GatedRedemptionQueueSharesWrapperRedemption>;
  gatedRedemptionQueueSharesWrapperRedemptionApproval?: Maybe<GatedRedemptionQueueSharesWrapperRedemptionApproval>;
  gatedRedemptionQueueSharesWrapperRedemptionApprovals: Array<GatedRedemptionQueueSharesWrapperRedemptionApproval>;
  gatedRedemptionQueueSharesWrapperRedemptionRequest?: Maybe<GatedRedemptionQueueSharesWrapperRedemptionRequest>;
  gatedRedemptionQueueSharesWrapperRedemptionRequests: Array<GatedRedemptionQueueSharesWrapperRedemptionRequest>;
  gatedRedemptionQueueSharesWrapperRedemptions: Array<GatedRedemptionQueueSharesWrapperRedemption>;
  gatedRedemptionQueueSharesWrapperSharesChange?: Maybe<GatedRedemptionQueueSharesWrapperSharesChange>;
  gatedRedemptionQueueSharesWrapperSharesChanges: Array<GatedRedemptionQueueSharesWrapperSharesChange>;
  gatedRedemptionQueueSharesWrapperTransfer?: Maybe<GatedRedemptionQueueSharesWrapperTransfer>;
  gatedRedemptionQueueSharesWrapperTransferApproval?: Maybe<GatedRedemptionQueueSharesWrapperTransferApproval>;
  gatedRedemptionQueueSharesWrapperTransferApprovals: Array<GatedRedemptionQueueSharesWrapperTransferApproval>;
  gatedRedemptionQueueSharesWrapperTransfers: Array<GatedRedemptionQueueSharesWrapperTransfer>;
  gatedRedemptionQueueSharesWrappers: Array<GatedRedemptionQueueSharesWrapper>;
  guaranteedRedemptionPolicies: Array<GuaranteedRedemptionPolicy>;
  guaranteedRedemptionPolicy?: Maybe<GuaranteedRedemptionPolicy>;
  kilnStaking?: Maybe<KilnStaking>;
  kilnStakingPosition?: Maybe<KilnStakingPosition>;
  kilnStakingPositionChange?: Maybe<KilnStakingPositionChange>;
  kilnStakingPositionChanges: Array<KilnStakingPositionChange>;
  kilnStakingPositions: Array<KilnStakingPosition>;
  kilnStakings: Array<KilnStaking>;
  liquityDebtPosition?: Maybe<LiquityDebtPosition>;
  liquityDebtPositionChange?: Maybe<LiquityDebtPositionChange>;
  liquityDebtPositionChanges: Array<LiquityDebtPositionChange>;
  liquityDebtPositions: Array<LiquityDebtPosition>;
  managementFee?: Maybe<ManagementFee>;
  managementFees: Array<ManagementFee>;
  mapleLiquidityPoolV1?: Maybe<MapleLiquidityPoolV1>;
  mapleLiquidityPoolV1S: Array<MapleLiquidityPoolV1>;
  mapleLiquidityPoolV2?: Maybe<MapleLiquidityPoolV2>;
  mapleLiquidityPoolV2S: Array<MapleLiquidityPoolV2>;
  mapleLiquidityPosition?: Maybe<MapleLiquidityPosition>;
  mapleLiquidityPositionChange?: Maybe<MapleLiquidityPositionChange>;
  mapleLiquidityPositionChanges: Array<MapleLiquidityPositionChange>;
  mapleLiquidityPositions: Array<MapleLiquidityPosition>;
  maxConcentrationPolicies: Array<MaxConcentrationPolicy>;
  maxConcentrationPolicy?: Maybe<MaxConcentrationPolicy>;
  migration?: Maybe<Migration>;
  migrations: Array<Migration>;
  minAssetBalancesPostRedemptionPolicies: Array<MinAssetBalancesPostRedemptionPolicy>;
  minAssetBalancesPostRedemptionPolicy?: Maybe<MinAssetBalancesPostRedemptionPolicy>;
  minMaxDepositPolicies: Array<MinMaxDepositPolicy>;
  minMaxDepositPolicy?: Maybe<MinMaxDepositPolicy>;
  minSharesSupplyFee?: Maybe<MinSharesSupplyFee>;
  minSharesSupplyFees: Array<MinSharesSupplyFee>;
  network?: Maybe<Network>;
  networkActivities: Array<NetworkActivity>;
  networkActivity?: Maybe<NetworkActivity>;
  networkReleaseChanged?: Maybe<NetworkReleaseChanged>;
  networkReleaseChangeds: Array<NetworkReleaseChanged>;
  networks: Array<Network>;
  onlyRemoveDustExternalPositionPolicies: Array<OnlyRemoveDustExternalPositionPolicy>;
  onlyRemoveDustExternalPositionPolicy?: Maybe<OnlyRemoveDustExternalPositionPolicy>;
  onlyUntrackDustOrPricelessAssetsPolicies: Array<OnlyUntrackDustOrPricelessAssetsPolicy>;
  onlyUntrackDustOrPricelessAssetsPolicy?: Maybe<OnlyUntrackDustOrPricelessAssetsPolicy>;
  performanceFee?: Maybe<PerformanceFee>;
  performanceFees: Array<PerformanceFee>;
  policies: Array<Policy>;
  policy?: Maybe<Policy>;
  policyDisabledForVault?: Maybe<PolicyDisabledForVault>;
  policyDisabledForVaults: Array<PolicyDisabledForVault>;
  policyEnabledForVault?: Maybe<PolicyEnabledForVault>;
  policyEnabledForVaults: Array<PolicyEnabledForVault>;
  pricelessAssetBypass?: Maybe<PricelessAssetBypass>;
  pricelessAssetBypasses: Array<PricelessAssetBypass>;
  pricelessAssetTimelock?: Maybe<PricelessAssetTimelock>;
  pricelessAssetTimelocks: Array<PricelessAssetTimelock>;
  protocolFee?: Maybe<ProtocolFee>;
  protocolFeeBurned?: Maybe<ProtocolFeeBurned>;
  protocolFeeBurneds: Array<ProtocolFeeBurned>;
  protocolFeePaid?: Maybe<ProtocolFeePaid>;
  protocolFeePaids: Array<ProtocolFeePaid>;
  protocolFees: Array<ProtocolFee>;
  reconfiguration?: Maybe<Reconfiguration>;
  reconfigurations: Array<Reconfiguration>;
  registeredVaultCall?: Maybe<RegisteredVaultCall>;
  registeredVaultCalls: Array<RegisteredVaultCall>;
  release?: Maybe<Release>;
  releases: Array<Release>;
  sharesBoughtEvent?: Maybe<SharesBoughtEvent>;
  sharesBoughtEvents: Array<SharesBoughtEvent>;
  sharesChange?: Maybe<SharesChange>;
  sharesChanges: Array<SharesChange>;
  sharesRedeemedEvent?: Maybe<SharesRedeemedEvent>;
  sharesRedeemedEvents: Array<SharesRedeemedEvent>;
  sharesSplitter?: Maybe<SharesSplitter>;
  sharesSplitterTokenClaims: Array<SharesSplitterTokenClaims>;
  sharesSplitterUserPercentage?: Maybe<SharesSplitterUserPercentage>;
  sharesSplitterUserPercentages: Array<SharesSplitterUserPercentage>;
  sharesSplitters: Array<SharesSplitter>;
  sharesTransferEvent?: Maybe<SharesTransferEvent>;
  sharesTransferEvents: Array<SharesTransferEvent>;
  sharesTransferredInEvent?: Maybe<SharesTransferredInEvent>;
  sharesTransferredInEvents: Array<SharesTransferredInEvent>;
  sharesTransferredOutEvent?: Maybe<SharesTransferredOutEvent>;
  sharesTransferredOutEvents: Array<SharesTransferredOutEvent>;
  theGraphDelegationPosition?: Maybe<TheGraphDelegationPosition>;
  theGraphDelegationPositionChange?: Maybe<TheGraphDelegationPositionChange>;
  theGraphDelegationPositionChanges: Array<TheGraphDelegationPositionChange>;
  theGraphDelegationPositions: Array<TheGraphDelegationPosition>;
  theGraphDelegationToIndexer?: Maybe<TheGraphDelegationToIndexer>;
  theGraphDelegationToIndexers: Array<TheGraphDelegationToIndexer>;
  trade?: Maybe<Trade>;
  trades: Array<Trade>;
  uintList?: Maybe<UintList>;
  uintLists: Array<UintList>;
  uniswapV3LiquidityPosition?: Maybe<UniswapV3LiquidityPosition>;
  uniswapV3LiquidityPositionChange?: Maybe<UniswapV3LiquidityPositionChange>;
  uniswapV3LiquidityPositionChanges: Array<UniswapV3LiquidityPositionChange>;
  uniswapV3LiquidityPositions: Array<UniswapV3LiquidityPosition>;
  uniswapV3Nft?: Maybe<UniswapV3Nft>;
  uniswapV3Nfts: Array<UniswapV3Nft>;
  unknownExternalPosition?: Maybe<UnknownExternalPosition>;
  unknownExternalPositionChange?: Maybe<UnknownExternalPositionChange>;
  unknownExternalPositionChanges: Array<UnknownExternalPositionChange>;
  unknownExternalPositions: Array<UnknownExternalPosition>;
  unknownFee?: Maybe<UnknownFee>;
  unknownFees: Array<UnknownFee>;
  unknownPolicies: Array<UnknownPolicy>;
  unknownPolicy?: Maybe<UnknownPolicy>;
  userAddressList?: Maybe<UserAddressList>;
  userAddressLists: Array<UserAddressList>;
  userUintList?: Maybe<UserUintList>;
  userUintLists: Array<UserUintList>;
  vault?: Maybe<Vault>;
  vaultActivities: Array<VaultActivity>;
  vaultActivity?: Maybe<VaultActivity>;
  vaultCallDeregisteredEvent?: Maybe<VaultCallDeregisteredEvent>;
  vaultCallDeregisteredEvents: Array<VaultCallDeregisteredEvent>;
  vaultCallRegisteredEvent?: Maybe<VaultCallRegisteredEvent>;
  vaultCallRegisteredEvents: Array<VaultCallRegisteredEvent>;
  vaultCreated?: Maybe<VaultCreated>;
  vaultCreateds: Array<VaultCreated>;
  vaultMigrationCancelled?: Maybe<VaultMigrationCancelled>;
  vaultMigrationCancelleds: Array<VaultMigrationCancelled>;
  vaultMigrationExecuted?: Maybe<VaultMigrationExecuted>;
  vaultMigrationExecuteds: Array<VaultMigrationExecuted>;
  vaultMigrationSignalled?: Maybe<VaultMigrationSignalled>;
  vaultMigrationSignalleds: Array<VaultMigrationSignalled>;
  vaultNominatedOwnerRemoved?: Maybe<VaultNominatedOwnerRemoved>;
  vaultNominatedOwnerRemoveds: Array<VaultNominatedOwnerRemoved>;
  vaultNominatedOwnerSet?: Maybe<VaultNominatedOwnerSet>;
  vaultNominatedOwnerSets: Array<VaultNominatedOwnerSet>;
  vaultOwnershipTransferred?: Maybe<VaultOwnershipTransferred>;
  vaultOwnershipTransferreds: Array<VaultOwnershipTransferred>;
  vaultReconfigurationCancelled?: Maybe<VaultReconfigurationCancelled>;
  vaultReconfigurationCancelleds: Array<VaultReconfigurationCancelled>;
  vaultReconfigurationExecuted?: Maybe<VaultReconfigurationExecuted>;
  vaultReconfigurationExecuteds: Array<VaultReconfigurationExecuted>;
  vaultReconfigurationSignalled?: Maybe<VaultReconfigurationSignalled>;
  vaultReconfigurationSignalleds: Array<VaultReconfigurationSignalled>;
  vaults: Array<Vault>;
};


export type SubscriptionMetaArgs = {
  block?: InputMaybe<BlockHeight>;
};


export type SubscriptionAaveDebtPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAaveDebtPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAaveDebtPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AaveDebtPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AaveDebtPositionChangeFilter>;
};


export type SubscriptionAaveDebtPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AaveDebtPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AaveDebtPositionFilter>;
};


export type SubscriptionAccountArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAccountsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AccountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AccountFilter>;
};


export type SubscriptionActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ActivityFilter>;
};


export type SubscriptionActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAdapterBlacklistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdapterBlacklistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AdapterBlacklistPolicyFilter>;
};


export type SubscriptionAdapterBlacklistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAdapterWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AdapterWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AdapterWhitelistPolicyFilter>;
};


export type SubscriptionAdapterWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAddressListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAddressListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AddressListFilter>;
};


export type SubscriptionAllowedAdapterIncomingAssetsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAdapterIncomingAssetsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAdapterIncomingAssetsPolicyFilter>;
};


export type SubscriptionAllowedAdapterIncomingAssetsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAllowedAdaptersPerManagerPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAdaptersPerManagerPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAdaptersPerManagerPolicyFilter>;
};


export type SubscriptionAllowedAdaptersPerManagerPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAllowedAdaptersPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAdaptersPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAdaptersPolicyFilter>;
};


export type SubscriptionAllowedAdaptersPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAllowedAssetsForRedemptionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedAssetsForRedemptionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedAssetsForRedemptionPolicyFilter>;
};


export type SubscriptionAllowedAssetsForRedemptionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAllowedDepositRecipientsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedDepositRecipientsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedDepositRecipientsPolicyFilter>;
};


export type SubscriptionAllowedDepositRecipientsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAllowedExternalPositionTypesPerManagerPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedExternalPositionTypesPerManagerPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedExternalPositionTypesPerManagerPolicyFilter>;
};


export type SubscriptionAllowedExternalPositionTypesPerManagerPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAllowedExternalPositionTypesPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedExternalPositionTypesPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedExternalPositionTypesPolicyFilter>;
};


export type SubscriptionAllowedExternalPositionTypesPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAllowedSharesTransferRecipientsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AllowedSharesTransferRecipientsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AllowedSharesTransferRecipientsPolicyFilter>;
};


export type SubscriptionAllowedSharesTransferRecipientsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionArbitraryLoanFixedInterestModuleArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionArbitraryLoanFixedInterestModulesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanFixedInterestModuleOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanFixedInterestModuleFilter>;
};


export type SubscriptionArbitraryLoanPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionArbitraryLoanPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionArbitraryLoanPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanPositionChangeFilter>;
};


export type SubscriptionArbitraryLoanPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanPositionFilter>;
};


export type SubscriptionArbitraryLoanTotalNominalDeltaOracleModuleArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionArbitraryLoanTotalNominalDeltaOracleModulesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ArbitraryLoanTotalNominalDeltaOracleModuleOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ArbitraryLoanTotalNominalDeltaOracleModuleFilter>;
};


export type SubscriptionAssetArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetAddedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetAddedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAddedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetAddedFilter>;
};


export type SubscriptionAssetAmountArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetAmountsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetAmountFilter>;
};


export type SubscriptionAssetBalanceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetBalancesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetBalanceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetBalanceFilter>;
};


export type SubscriptionAssetBlacklistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetBlacklistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetBlacklistPolicyFilter>;
};


export type SubscriptionAssetBlacklistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetPriceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetPricesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetPriceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetPriceFilter>;
};


export type SubscriptionAssetRemovedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetRemovedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetRemovedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetRemovedFilter>;
};


export type SubscriptionAssetWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetWhitelistPolicyFilter>;
};


export type SubscriptionAssetWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionAssetsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<AssetFilter>;
};


export type SubscriptionBuySharesCallerWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<BuySharesCallerWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<BuySharesCallerWhitelistPolicyFilter>;
};


export type SubscriptionBuySharesCallerWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionCompoundDebtPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionCompoundDebtPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionCompoundDebtPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CompoundDebtPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CompoundDebtPositionChangeFilter>;
};


export type SubscriptionCompoundDebtPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CompoundDebtPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CompoundDebtPositionFilter>;
};


export type SubscriptionComptrollerArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionComptrollersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ComptrollerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ComptrollerFilter>;
};


export type SubscriptionConvexCurveLpStakingWrapperArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionConvexCurveLpStakingWrappersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConvexCurveLpStakingWrapperOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ConvexCurveLpStakingWrapperFilter>;
};


export type SubscriptionConvexVotingPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionConvexVotingPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionConvexVotingPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConvexVotingPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ConvexVotingPositionChangeFilter>;
};


export type SubscriptionConvexVotingPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ConvexVotingPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ConvexVotingPositionFilter>;
};


export type SubscriptionCounterArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionCountersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CounterOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CounterFilter>;
};


export type SubscriptionCumulativeSlippageTolerancePoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CumulativeSlippageTolerancePolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CumulativeSlippageTolerancePolicyFilter>;
};


export type SubscriptionCumulativeSlippageTolerancePolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionCurrencyPriceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionCurrencyPricesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<CurrencyPriceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<CurrencyPriceFilter>;
};


export type SubscriptionDepositArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionDepositorActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositorActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<DepositorActivityFilter>;
};


export type SubscriptionDepositorActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionDepositorWhitelistPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositorWhitelistPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<DepositorWhitelistPolicyFilter>;
};


export type SubscriptionDepositorWhitelistPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionDepositsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<DepositFilter>;
};


export type SubscriptionEntranceRateBurnFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionEntranceRateBurnFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EntranceRateBurnFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<EntranceRateBurnFeeFilter>;
};


export type SubscriptionEntranceRateDirectFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionEntranceRateDirectFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<EntranceRateDirectFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<EntranceRateDirectFeeFilter>;
};


export type SubscriptionExitRateBurnFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionExitRateBurnFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExitRateBurnFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExitRateBurnFeeFilter>;
};


export type SubscriptionExitRateDirectFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionExitRateDirectFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExitRateDirectFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExitRateDirectFeeFilter>;
};


export type SubscriptionExternalPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionExternalPositionAddedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionExternalPositionAddedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionAddedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionAddedEventFilter>;
};


export type SubscriptionExternalPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionExternalPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};


export type SubscriptionExternalPositionRemovedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionExternalPositionRemovedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionRemovedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionRemovedEventFilter>;
};


export type SubscriptionExternalPositionTypeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionExternalPositionTypesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionTypeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionTypeFilter>;
};


export type SubscriptionExternalPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ExternalPositionFilter>;
};


export type SubscriptionFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionFeeSharesAllocationChangedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionFeeSharesAllocationChangedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesAllocationChangedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesAllocationChangedEventFilter>;
};


export type SubscriptionFeeSharesBurnedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionFeeSharesBurnedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesBurnedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesBurnedEventFilter>;
};


export type SubscriptionFeeSharesPaidEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionFeeSharesPaidEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesPaidEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesPaidEventFilter>;
};


export type SubscriptionFeeSharesReceivedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionFeeSharesReceivedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeSharesReceivedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeSharesReceivedEventFilter>;
};


export type SubscriptionFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FeeFilter>;
};


export type SubscriptionFreelyTransferableSharesSetEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionFreelyTransferableSharesSetEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<FreelyTransferableSharesSetEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<FreelyTransferableSharesSetEventFilter>;
};


export type SubscriptionGasRelayerArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGasRelayerDepositedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGasRelayerDepositedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerDepositedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerDepositedFilter>;
};


export type SubscriptionGasRelayerTransactionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGasRelayerTransactionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerTransactionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerTransactionFilter>;
};


export type SubscriptionGasRelayerWithdrawnArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGasRelayerWithdrawnsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerWithdrawnOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerWithdrawnFilter>;
};


export type SubscriptionGasRelayersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GasRelayerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GasRelayerFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperDepositArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperDepositApprovalArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperDepositApprovalsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositApprovalFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperDepositorBalanceArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperDepositorBalancesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositorBalanceFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperDepositsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperDepositFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperKickArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperKicksArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperKickOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperKickFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperRedemptionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperRedemptionApprovalArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperRedemptionApprovalsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionApprovalFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperRedemptionRequestArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperRedemptionRequestsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionRequestFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperRedemptionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperRedemptionFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperSharesChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperSharesChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperSharesChangeFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperTransferArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperTransferApprovalArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperTransferApprovalsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferApprovalFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrapperTransfersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperTransferFilter>;
};


export type SubscriptionGatedRedemptionQueueSharesWrappersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GatedRedemptionQueueSharesWrapperOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GatedRedemptionQueueSharesWrapperFilter>;
};


export type SubscriptionGuaranteedRedemptionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<GuaranteedRedemptionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<GuaranteedRedemptionPolicyFilter>;
};


export type SubscriptionGuaranteedRedemptionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionKilnStakingArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionKilnStakingPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionKilnStakingPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionKilnStakingPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<KilnStakingPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<KilnStakingPositionChangeFilter>;
};


export type SubscriptionKilnStakingPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<KilnStakingPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<KilnStakingPositionFilter>;
};


export type SubscriptionKilnStakingsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<KilnStakingOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<KilnStakingFilter>;
};


export type SubscriptionLiquityDebtPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionLiquityDebtPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionLiquityDebtPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LiquityDebtPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<LiquityDebtPositionChangeFilter>;
};


export type SubscriptionLiquityDebtPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<LiquityDebtPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<LiquityDebtPositionFilter>;
};


export type SubscriptionManagementFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionManagementFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ManagementFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ManagementFeeFilter>;
};


export type SubscriptionMapleLiquidityPoolV1Args = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMapleLiquidityPoolV1SArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPoolV1OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPoolV1Filter>;
};


export type SubscriptionMapleLiquidityPoolV2Args = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMapleLiquidityPoolV2SArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPoolV2OrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPoolV2Filter>;
};


export type SubscriptionMapleLiquidityPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMapleLiquidityPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMapleLiquidityPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPositionChangeFilter>;
};


export type SubscriptionMapleLiquidityPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MapleLiquidityPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MapleLiquidityPositionFilter>;
};


export type SubscriptionMaxConcentrationPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MaxConcentrationPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MaxConcentrationPolicyFilter>;
};


export type SubscriptionMaxConcentrationPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMigrationArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMigrationsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MigrationOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MigrationFilter>;
};


export type SubscriptionMinAssetBalancesPostRedemptionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MinAssetBalancesPostRedemptionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MinAssetBalancesPostRedemptionPolicyFilter>;
};


export type SubscriptionMinAssetBalancesPostRedemptionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMinMaxDepositPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MinMaxDepositPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MinMaxDepositPolicyFilter>;
};


export type SubscriptionMinMaxDepositPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMinSharesSupplyFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionMinSharesSupplyFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MinSharesSupplyFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<MinSharesSupplyFeeFilter>;
};


export type SubscriptionNetworkArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionNetworkActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NetworkActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<NetworkActivityFilter>;
};


export type SubscriptionNetworkActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionNetworkReleaseChangedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionNetworkReleaseChangedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NetworkReleaseChangedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<NetworkReleaseChangedFilter>;
};


export type SubscriptionNetworksArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<NetworkOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<NetworkFilter>;
};


export type SubscriptionOnlyRemoveDustExternalPositionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OnlyRemoveDustExternalPositionPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<OnlyRemoveDustExternalPositionPolicyFilter>;
};


export type SubscriptionOnlyRemoveDustExternalPositionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionOnlyUntrackDustOrPricelessAssetsPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<OnlyUntrackDustOrPricelessAssetsPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<OnlyUntrackDustOrPricelessAssetsPolicyFilter>;
};


export type SubscriptionOnlyUntrackDustOrPricelessAssetsPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionPerformanceFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionPerformanceFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PerformanceFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PerformanceFeeFilter>;
};


export type SubscriptionPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PolicyFilter>;
};


export type SubscriptionPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionPolicyDisabledForVaultArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionPolicyDisabledForVaultsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolicyDisabledForVaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PolicyDisabledForVaultFilter>;
};


export type SubscriptionPolicyEnabledForVaultArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionPolicyEnabledForVaultsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PolicyEnabledForVaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PolicyEnabledForVaultFilter>;
};


export type SubscriptionPricelessAssetBypassArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionPricelessAssetBypassesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PricelessAssetBypassOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PricelessAssetBypassFilter>;
};


export type SubscriptionPricelessAssetTimelockArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionPricelessAssetTimelocksArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<PricelessAssetTimelockOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<PricelessAssetTimelockFilter>;
};


export type SubscriptionProtocolFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionProtocolFeeBurnedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionProtocolFeeBurnedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeeBurnedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ProtocolFeeBurnedFilter>;
};


export type SubscriptionProtocolFeePaidArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionProtocolFeePaidsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeePaidOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ProtocolFeePaidFilter>;
};


export type SubscriptionProtocolFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ProtocolFeeFilter>;
};


export type SubscriptionReconfigurationArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionReconfigurationsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReconfigurationOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ReconfigurationFilter>;
};


export type SubscriptionRegisteredVaultCallArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionRegisteredVaultCallsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<RegisteredVaultCallOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<RegisteredVaultCallFilter>;
};


export type SubscriptionReleaseArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionReleasesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReleaseOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<ReleaseFilter>;
};


export type SubscriptionSharesBoughtEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesBoughtEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesBoughtEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesBoughtEventFilter>;
};


export type SubscriptionSharesChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesChangeFilter>;
};


export type SubscriptionSharesRedeemedEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesRedeemedEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesRedeemedEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesRedeemedEventFilter>;
};


export type SubscriptionSharesSplitterArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesSplitterTokenClaimsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterTokenClaimsOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesSplitterTokenClaimsFilter>;
};


export type SubscriptionSharesSplitterUserPercentageArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesSplitterUserPercentagesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterUserPercentageOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesSplitterUserPercentageFilter>;
};


export type SubscriptionSharesSplittersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesSplitterOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesSplitterFilter>;
};


export type SubscriptionSharesTransferEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesTransferEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesTransferEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesTransferEventFilter>;
};


export type SubscriptionSharesTransferredInEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesTransferredInEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesTransferredInEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesTransferredInEventFilter>;
};


export type SubscriptionSharesTransferredOutEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionSharesTransferredOutEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesTransferredOutEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<SharesTransferredOutEventFilter>;
};


export type SubscriptionTheGraphDelegationPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionTheGraphDelegationPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionTheGraphDelegationPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TheGraphDelegationPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TheGraphDelegationPositionChangeFilter>;
};


export type SubscriptionTheGraphDelegationPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TheGraphDelegationPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TheGraphDelegationPositionFilter>;
};


export type SubscriptionTheGraphDelegationToIndexerArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionTheGraphDelegationToIndexersArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TheGraphDelegationToIndexerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TheGraphDelegationToIndexerFilter>;
};


export type SubscriptionTradeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionTradesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TradeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<TradeFilter>;
};


export type SubscriptionUintListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUintListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UintListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UintListFilter>;
};


export type SubscriptionUniswapV3LiquidityPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUniswapV3LiquidityPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUniswapV3LiquidityPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UniswapV3LiquidityPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UniswapV3LiquidityPositionChangeFilter>;
};


export type SubscriptionUniswapV3LiquidityPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UniswapV3LiquidityPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UniswapV3LiquidityPositionFilter>;
};


export type SubscriptionUniswapV3NftArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUniswapV3NftsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UniswapV3NftOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UniswapV3NftFilter>;
};


export type SubscriptionUnknownExternalPositionArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUnknownExternalPositionChangeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUnknownExternalPositionChangesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownExternalPositionChangeFilter>;
};


export type SubscriptionUnknownExternalPositionsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownExternalPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownExternalPositionFilter>;
};


export type SubscriptionUnknownFeeArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUnknownFeesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownFeeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownFeeFilter>;
};


export type SubscriptionUnknownPoliciesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UnknownPolicyOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UnknownPolicyFilter>;
};


export type SubscriptionUnknownPolicyArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUserAddressListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUserAddressListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserAddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UserAddressListFilter>;
};


export type SubscriptionUserUintListArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionUserUintListsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UserUintListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<UserUintListFilter>;
};


export type SubscriptionVaultArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultActivitiesArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultActivityFilter>;
};


export type SubscriptionVaultActivityArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultCallDeregisteredEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultCallDeregisteredEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultCallDeregisteredEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultCallDeregisteredEventFilter>;
};


export type SubscriptionVaultCallRegisteredEventArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultCallRegisteredEventsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultCallRegisteredEventOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultCallRegisteredEventFilter>;
};


export type SubscriptionVaultCreatedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultCreatedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultCreatedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultCreatedFilter>;
};


export type SubscriptionVaultMigrationCancelledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultMigrationCancelledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultMigrationCancelledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultMigrationCancelledFilter>;
};


export type SubscriptionVaultMigrationExecutedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultMigrationExecutedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultMigrationExecutedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultMigrationExecutedFilter>;
};


export type SubscriptionVaultMigrationSignalledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultMigrationSignalledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultMigrationSignalledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultMigrationSignalledFilter>;
};


export type SubscriptionVaultNominatedOwnerRemovedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultNominatedOwnerRemovedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultNominatedOwnerRemovedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultNominatedOwnerRemovedFilter>;
};


export type SubscriptionVaultNominatedOwnerSetArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultNominatedOwnerSetsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultNominatedOwnerSetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultNominatedOwnerSetFilter>;
};


export type SubscriptionVaultOwnershipTransferredArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultOwnershipTransferredsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOwnershipTransferredOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultOwnershipTransferredFilter>;
};


export type SubscriptionVaultReconfigurationCancelledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultReconfigurationCancelledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultReconfigurationCancelledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultReconfigurationCancelledFilter>;
};


export type SubscriptionVaultReconfigurationExecutedArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultReconfigurationExecutedsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultReconfigurationExecutedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultReconfigurationExecutedFilter>;
};


export type SubscriptionVaultReconfigurationSignalledArgs = {
  block?: InputMaybe<BlockHeight>;
  id: Scalars['ID'];
  subgraphError?: SubgraphErrorPolicy;
};


export type SubscriptionVaultReconfigurationSignalledsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultReconfigurationSignalledOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultReconfigurationSignalledFilter>;
};


export type SubscriptionVaultsArgs = {
  block?: InputMaybe<BlockHeight>;
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  subgraphError?: SubgraphErrorPolicy;
  where?: InputMaybe<VaultFilter>;
};

export type TheGraphDelegationPosition = ExternalPosition & {
  __typename: 'TheGraphDelegationPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  delegations: Array<TheGraphDelegationToIndexer>;
  id: Scalars['ID'];
  type: ExternalPositionType;
  vault: Vault;
};


export type TheGraphDelegationPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};


export type TheGraphDelegationPositionDelegationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TheGraphDelegationToIndexerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TheGraphDelegationToIndexerFilter>;
};

export type TheGraphDelegationPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'TheGraphDelegationPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  assetAmount: AssetAmount;
  externalPosition: ExternalPosition;
  feeAmount?: Maybe<AssetAmount>;
  id: Scalars['ID'];
  indexer: Scalars['Bytes'];
  newIndexer?: Maybe<Scalars['Bytes']>;
  theGraphDelegationPositionChangeType: TheGraphDelegationPositionChangeType;
  timestamp: Scalars['Int'];
  vault: Vault;
  withdrewWhileUndelegatingAssetAmount?: Maybe<AssetAmount>;
};

export enum TheGraphDelegationPositionChangeType {
  DELEGATE = 'Delegate',
  UNDELEGATE = 'Undelegate',
  WITHDRAW = 'Withdraw'
}

export type TheGraphDelegationPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<TheGraphDelegationPositionChangeFilter>>>;
  assetAmount?: InputMaybe<Scalars['String']>;
  assetAmount_?: InputMaybe<AssetAmountFilter>;
  assetAmount_contains?: InputMaybe<Scalars['String']>;
  assetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_ends_with?: InputMaybe<Scalars['String']>;
  assetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_gt?: InputMaybe<Scalars['String']>;
  assetAmount_gte?: InputMaybe<Scalars['String']>;
  assetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  assetAmount_lt?: InputMaybe<Scalars['String']>;
  assetAmount_lte?: InputMaybe<Scalars['String']>;
  assetAmount_not?: InputMaybe<Scalars['String']>;
  assetAmount_not_contains?: InputMaybe<Scalars['String']>;
  assetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  assetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  assetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  assetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  assetAmount_starts_with?: InputMaybe<Scalars['String']>;
  assetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  feeAmount?: InputMaybe<Scalars['String']>;
  feeAmount_?: InputMaybe<AssetAmountFilter>;
  feeAmount_contains?: InputMaybe<Scalars['String']>;
  feeAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  feeAmount_ends_with?: InputMaybe<Scalars['String']>;
  feeAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  feeAmount_gt?: InputMaybe<Scalars['String']>;
  feeAmount_gte?: InputMaybe<Scalars['String']>;
  feeAmount_in?: InputMaybe<Array<Scalars['String']>>;
  feeAmount_lt?: InputMaybe<Scalars['String']>;
  feeAmount_lte?: InputMaybe<Scalars['String']>;
  feeAmount_not?: InputMaybe<Scalars['String']>;
  feeAmount_not_contains?: InputMaybe<Scalars['String']>;
  feeAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  feeAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  feeAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  feeAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  feeAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  feeAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  feeAmount_starts_with?: InputMaybe<Scalars['String']>;
  feeAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  indexer?: InputMaybe<Scalars['Bytes']>;
  indexer_contains?: InputMaybe<Scalars['Bytes']>;
  indexer_gt?: InputMaybe<Scalars['Bytes']>;
  indexer_gte?: InputMaybe<Scalars['Bytes']>;
  indexer_in?: InputMaybe<Array<Scalars['Bytes']>>;
  indexer_lt?: InputMaybe<Scalars['Bytes']>;
  indexer_lte?: InputMaybe<Scalars['Bytes']>;
  indexer_not?: InputMaybe<Scalars['Bytes']>;
  indexer_not_contains?: InputMaybe<Scalars['Bytes']>;
  indexer_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  newIndexer?: InputMaybe<Scalars['Bytes']>;
  newIndexer_contains?: InputMaybe<Scalars['Bytes']>;
  newIndexer_gt?: InputMaybe<Scalars['Bytes']>;
  newIndexer_gte?: InputMaybe<Scalars['Bytes']>;
  newIndexer_in?: InputMaybe<Array<Scalars['Bytes']>>;
  newIndexer_lt?: InputMaybe<Scalars['Bytes']>;
  newIndexer_lte?: InputMaybe<Scalars['Bytes']>;
  newIndexer_not?: InputMaybe<Scalars['Bytes']>;
  newIndexer_not_contains?: InputMaybe<Scalars['Bytes']>;
  newIndexer_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  or?: InputMaybe<Array<InputMaybe<TheGraphDelegationPositionChangeFilter>>>;
  theGraphDelegationPositionChangeType?: InputMaybe<TheGraphDelegationPositionChangeType>;
  theGraphDelegationPositionChangeType_in?: InputMaybe<Array<TheGraphDelegationPositionChangeType>>;
  theGraphDelegationPositionChangeType_not?: InputMaybe<TheGraphDelegationPositionChangeType>;
  theGraphDelegationPositionChangeType_not_in?: InputMaybe<Array<TheGraphDelegationPositionChangeType>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_?: InputMaybe<AssetAmountFilter>;
  withdrewWhileUndelegatingAssetAmount_contains?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_contains_nocase?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_ends_with?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_ends_with_nocase?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_gt?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_gte?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_in?: InputMaybe<Array<Scalars['String']>>;
  withdrewWhileUndelegatingAssetAmount_lt?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_lte?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_not?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_not_contains?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_not_contains_nocase?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_not_ends_with?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_not_in?: InputMaybe<Array<Scalars['String']>>;
  withdrewWhileUndelegatingAssetAmount_not_starts_with?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_starts_with?: InputMaybe<Scalars['String']>;
  withdrewWhileUndelegatingAssetAmount_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum TheGraphDelegationPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSETAMOUNT = 'assetAmount',
  ASSETAMOUNT__AMOUNT = 'assetAmount__amount',
  ASSETAMOUNT__ID = 'assetAmount__id',
  ASSETAMOUNT__TIMESTAMP = 'assetAmount__timestamp',
  ASSETAMOUNT__VALUEAUD = 'assetAmount__valueAud',
  ASSETAMOUNT__VALUEBTC = 'assetAmount__valueBtc',
  ASSETAMOUNT__VALUECHF = 'assetAmount__valueChf',
  ASSETAMOUNT__VALUEDENOMINATION = 'assetAmount__valueDenomination',
  ASSETAMOUNT__VALUEETH = 'assetAmount__valueEth',
  ASSETAMOUNT__VALUEEUR = 'assetAmount__valueEur',
  ASSETAMOUNT__VALUEGBP = 'assetAmount__valueGbp',
  ASSETAMOUNT__VALUEJPY = 'assetAmount__valueJpy',
  ASSETAMOUNT__VALUEUSD = 'assetAmount__valueUsd',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  FEEAMOUNT = 'feeAmount',
  FEEAMOUNT__AMOUNT = 'feeAmount__amount',
  FEEAMOUNT__ID = 'feeAmount__id',
  FEEAMOUNT__TIMESTAMP = 'feeAmount__timestamp',
  FEEAMOUNT__VALUEAUD = 'feeAmount__valueAud',
  FEEAMOUNT__VALUEBTC = 'feeAmount__valueBtc',
  FEEAMOUNT__VALUECHF = 'feeAmount__valueChf',
  FEEAMOUNT__VALUEDENOMINATION = 'feeAmount__valueDenomination',
  FEEAMOUNT__VALUEETH = 'feeAmount__valueEth',
  FEEAMOUNT__VALUEEUR = 'feeAmount__valueEur',
  FEEAMOUNT__VALUEGBP = 'feeAmount__valueGbp',
  FEEAMOUNT__VALUEJPY = 'feeAmount__valueJpy',
  FEEAMOUNT__VALUEUSD = 'feeAmount__valueUsd',
  ID = 'id',
  INDEXER = 'indexer',
  NEWINDEXER = 'newIndexer',
  THEGRAPHDELEGATIONPOSITIONCHANGETYPE = 'theGraphDelegationPositionChangeType',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT = 'withdrewWhileUndelegatingAssetAmount',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__AMOUNT = 'withdrewWhileUndelegatingAssetAmount__amount',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__ID = 'withdrewWhileUndelegatingAssetAmount__id',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__TIMESTAMP = 'withdrewWhileUndelegatingAssetAmount__timestamp',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEAUD = 'withdrewWhileUndelegatingAssetAmount__valueAud',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEBTC = 'withdrewWhileUndelegatingAssetAmount__valueBtc',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUECHF = 'withdrewWhileUndelegatingAssetAmount__valueChf',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEDENOMINATION = 'withdrewWhileUndelegatingAssetAmount__valueDenomination',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEETH = 'withdrewWhileUndelegatingAssetAmount__valueEth',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEEUR = 'withdrewWhileUndelegatingAssetAmount__valueEur',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEGBP = 'withdrewWhileUndelegatingAssetAmount__valueGbp',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEJPY = 'withdrewWhileUndelegatingAssetAmount__valueJpy',
  WITHDREWWHILEUNDELEGATINGASSETAMOUNT__VALUEUSD = 'withdrewWhileUndelegatingAssetAmount__valueUsd'
}

export type TheGraphDelegationPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<TheGraphDelegationPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  delegations_?: InputMaybe<TheGraphDelegationToIndexerFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<TheGraphDelegationPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum TheGraphDelegationPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  DELEGATIONS = 'delegations',
  ID = 'id',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type TheGraphDelegationToIndexer = {
  __typename: 'TheGraphDelegationToIndexer';
  externalPosition?: Maybe<TheGraphDelegationPosition>;
  id: Scalars['ID'];
  indexer: Scalars['Bytes'];
  shares: Scalars['BigInt'];
  tokensLocked: Scalars['BigDecimal'];
  tokensLockedUntil: Scalars['Int'];
};

export type TheGraphDelegationToIndexerFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<TheGraphDelegationToIndexerFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<TheGraphDelegationPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  indexer?: InputMaybe<Scalars['Bytes']>;
  indexer_contains?: InputMaybe<Scalars['Bytes']>;
  indexer_gt?: InputMaybe<Scalars['Bytes']>;
  indexer_gte?: InputMaybe<Scalars['Bytes']>;
  indexer_in?: InputMaybe<Array<Scalars['Bytes']>>;
  indexer_lt?: InputMaybe<Scalars['Bytes']>;
  indexer_lte?: InputMaybe<Scalars['Bytes']>;
  indexer_not?: InputMaybe<Scalars['Bytes']>;
  indexer_not_contains?: InputMaybe<Scalars['Bytes']>;
  indexer_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  or?: InputMaybe<Array<InputMaybe<TheGraphDelegationToIndexerFilter>>>;
  shares?: InputMaybe<Scalars['BigInt']>;
  shares_gt?: InputMaybe<Scalars['BigInt']>;
  shares_gte?: InputMaybe<Scalars['BigInt']>;
  shares_in?: InputMaybe<Array<Scalars['BigInt']>>;
  shares_lt?: InputMaybe<Scalars['BigInt']>;
  shares_lte?: InputMaybe<Scalars['BigInt']>;
  shares_not?: InputMaybe<Scalars['BigInt']>;
  shares_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  tokensLocked?: InputMaybe<Scalars['BigDecimal']>;
  tokensLockedUntil?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_gt?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_gte?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_in?: InputMaybe<Array<Scalars['Int']>>;
  tokensLockedUntil_lt?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_lte?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_not?: InputMaybe<Scalars['Int']>;
  tokensLockedUntil_not_in?: InputMaybe<Array<Scalars['Int']>>;
  tokensLocked_gt?: InputMaybe<Scalars['BigDecimal']>;
  tokensLocked_gte?: InputMaybe<Scalars['BigDecimal']>;
  tokensLocked_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  tokensLocked_lt?: InputMaybe<Scalars['BigDecimal']>;
  tokensLocked_lte?: InputMaybe<Scalars['BigDecimal']>;
  tokensLocked_not?: InputMaybe<Scalars['BigDecimal']>;
  tokensLocked_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
};

export enum TheGraphDelegationToIndexerOrderBy {
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  INDEXER = 'indexer',
  SHARES = 'shares',
  TOKENSLOCKED = 'tokensLocked',
  TOKENSLOCKEDUNTIL = 'tokensLockedUntil'
}

export type Trade = Activity & VaultActivity & {
  __typename: 'Trade';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  adapter: Scalars['Bytes'];
  id: Scalars['ID'];
  incomingAssetAmounts: Array<AssetAmount>;
  incomingAssets: Array<Asset>;
  outgoingAssetAmounts: Array<AssetAmount>;
  outgoingAssets: Array<Asset>;
  timestamp: Scalars['Int'];
  tradeType: TradeType;
  vault: Vault;
};


export type TradeIncomingAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};


export type TradeIncomingAssetsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetFilter>;
};


export type TradeOutgoingAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};


export type TradeOutgoingAssetsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetFilter>;
};

export enum TradeType {
  ADD_TRACKED_ASSETS = 'ADD_TRACKED_ASSETS',
  APPROVE_ASSETS = 'APPROVE_ASSETS',
  CLAIM_REWARDS = 'CLAIM_REWARDS',
  CLAIM_REWARDS_AND_REINVEST = 'CLAIM_REWARDS_AND_REINVEST',
  CLAIM_REWARDS_AND_SWAP = 'CLAIM_REWARDS_AND_SWAP',
  LEND = 'LEND',
  LEND_AND_STAKE = 'LEND_AND_STAKE',
  REDEEM = 'REDEEM',
  REMOVE_TRACKED_ASSETS = 'REMOVE_TRACKED_ASSETS',
  STAKE = 'STAKE',
  TAKE_ORDER = 'TAKE_ORDER',
  UNKNOWN = 'UNKNOWN',
  UNSTAKE = 'UNSTAKE',
  UNSTAKE_AND_REDEEM = 'UNSTAKE_AND_REDEEM'
}

export type TradeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  adapter?: InputMaybe<Scalars['Bytes']>;
  adapter_contains?: InputMaybe<Scalars['Bytes']>;
  adapter_gt?: InputMaybe<Scalars['Bytes']>;
  adapter_gte?: InputMaybe<Scalars['Bytes']>;
  adapter_in?: InputMaybe<Array<Scalars['Bytes']>>;
  adapter_lt?: InputMaybe<Scalars['Bytes']>;
  adapter_lte?: InputMaybe<Scalars['Bytes']>;
  adapter_not?: InputMaybe<Scalars['Bytes']>;
  adapter_not_contains?: InputMaybe<Scalars['Bytes']>;
  adapter_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  and?: InputMaybe<Array<InputMaybe<TradeFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  incomingAssetAmounts?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_?: InputMaybe<AssetAmountFilter>;
  incomingAssetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  incomingAssetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  incomingAssets?: InputMaybe<Array<Scalars['String']>>;
  incomingAssets_?: InputMaybe<AssetFilter>;
  incomingAssets_contains?: InputMaybe<Array<Scalars['String']>>;
  incomingAssets_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  incomingAssets_not?: InputMaybe<Array<Scalars['String']>>;
  incomingAssets_not_contains?: InputMaybe<Array<Scalars['String']>>;
  incomingAssets_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  or?: InputMaybe<Array<InputMaybe<TradeFilter>>>;
  outgoingAssetAmounts?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssetAmounts_?: InputMaybe<AssetAmountFilter>;
  outgoingAssetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssets?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssets_?: InputMaybe<AssetFilter>;
  outgoingAssets_contains?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssets_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssets_not?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssets_not_contains?: InputMaybe<Array<Scalars['String']>>;
  outgoingAssets_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  tradeType?: InputMaybe<TradeType>;
  tradeType_in?: InputMaybe<Array<TradeType>>;
  tradeType_not?: InputMaybe<TradeType>;
  tradeType_not_in?: InputMaybe<Array<TradeType>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum TradeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ADAPTER = 'adapter',
  ID = 'id',
  INCOMINGASSETAMOUNTS = 'incomingAssetAmounts',
  INCOMINGASSETS = 'incomingAssets',
  OUTGOINGASSETAMOUNTS = 'outgoingAssetAmounts',
  OUTGOINGASSETS = 'outgoingAssets',
  TIMESTAMP = 'timestamp',
  TRADETYPE = 'tradeType',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type UintList = {
  __typename: 'UintList';
  createdAt: Scalars['Int'];
  creator: Scalars['Bytes'];
  description?: Maybe<Scalars['String']>;
  id: Scalars['ID'];
  items: Array<Scalars['BigInt']>;
  owner: Scalars['Bytes'];
  updateType: UintListUpdateType;
  updatedAt: Scalars['Int'];
};

export enum UintListUpdateType {
  ADDANDREMOVE = 'AddAndRemove',
  ADDONLY = 'AddOnly',
  NONE = 'None',
  REMOVEONLY = 'RemoveOnly'
}

export type UintListFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<UintListFilter>>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  creator?: InputMaybe<Scalars['Bytes']>;
  creator_contains?: InputMaybe<Scalars['Bytes']>;
  creator_gt?: InputMaybe<Scalars['Bytes']>;
  creator_gte?: InputMaybe<Scalars['Bytes']>;
  creator_in?: InputMaybe<Array<Scalars['Bytes']>>;
  creator_lt?: InputMaybe<Scalars['Bytes']>;
  creator_lte?: InputMaybe<Scalars['Bytes']>;
  creator_not?: InputMaybe<Scalars['Bytes']>;
  creator_not_contains?: InputMaybe<Scalars['Bytes']>;
  creator_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  description?: InputMaybe<Scalars['String']>;
  description_contains?: InputMaybe<Scalars['String']>;
  description_contains_nocase?: InputMaybe<Scalars['String']>;
  description_ends_with?: InputMaybe<Scalars['String']>;
  description_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_gt?: InputMaybe<Scalars['String']>;
  description_gte?: InputMaybe<Scalars['String']>;
  description_in?: InputMaybe<Array<Scalars['String']>>;
  description_lt?: InputMaybe<Scalars['String']>;
  description_lte?: InputMaybe<Scalars['String']>;
  description_not?: InputMaybe<Scalars['String']>;
  description_not_contains?: InputMaybe<Scalars['String']>;
  description_not_contains_nocase?: InputMaybe<Scalars['String']>;
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  description_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  description_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  description_starts_with?: InputMaybe<Scalars['String']>;
  description_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  items?: InputMaybe<Array<Scalars['BigInt']>>;
  items_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  items_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  items_not?: InputMaybe<Array<Scalars['BigInt']>>;
  items_not_contains?: InputMaybe<Array<Scalars['BigInt']>>;
  items_not_contains_nocase?: InputMaybe<Array<Scalars['BigInt']>>;
  or?: InputMaybe<Array<InputMaybe<UintListFilter>>>;
  owner?: InputMaybe<Scalars['Bytes']>;
  owner_contains?: InputMaybe<Scalars['Bytes']>;
  owner_gt?: InputMaybe<Scalars['Bytes']>;
  owner_gte?: InputMaybe<Scalars['Bytes']>;
  owner_in?: InputMaybe<Array<Scalars['Bytes']>>;
  owner_lt?: InputMaybe<Scalars['Bytes']>;
  owner_lte?: InputMaybe<Scalars['Bytes']>;
  owner_not?: InputMaybe<Scalars['Bytes']>;
  owner_not_contains?: InputMaybe<Scalars['Bytes']>;
  owner_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  updateType?: InputMaybe<UintListUpdateType>;
  updateType_in?: InputMaybe<Array<UintListUpdateType>>;
  updateType_not?: InputMaybe<UintListUpdateType>;
  updateType_not_in?: InputMaybe<Array<UintListUpdateType>>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum UintListOrderBy {
  CREATEDAT = 'createdAt',
  CREATOR = 'creator',
  DESCRIPTION = 'description',
  ID = 'id',
  ITEMS = 'items',
  OWNER = 'owner',
  UPDATETYPE = 'updateType',
  UPDATEDAT = 'updatedAt'
}

export type UniswapV3LiquidityPosition = ExternalPosition & {
  __typename: 'UniswapV3LiquidityPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  id: Scalars['ID'];
  nfts: Array<UniswapV3Nft>;
  type: ExternalPositionType;
  vault: Vault;
};


export type UniswapV3LiquidityPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};


export type UniswapV3LiquidityPositionNftsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UniswapV3NftOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UniswapV3NftFilter>;
};

export type UniswapV3LiquidityPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'UniswapV3LiquidityPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  assetAmounts?: Maybe<Array<AssetAmount>>;
  currentTick: Scalars['Int'];
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  liquidity?: Maybe<Scalars['BigInt']>;
  nft: UniswapV3Nft;
  poolLiquidity: Scalars['BigInt'];
  sqrtPrice: Scalars['BigInt'];
  timestamp: Scalars['Int'];
  uniswapV3LiquidityPositionChangeType: UniswapV3LiquidityPositionChangeType;
  vault: Vault;
};


export type UniswapV3LiquidityPositionChangeAssetAmountsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetAmountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetAmountFilter>;
};

export enum UniswapV3LiquidityPositionChangeType {
  ADDLIQUIDITY = 'AddLiquidity',
  COLLECT = 'Collect',
  MINT = 'Mint',
  PURGE = 'Purge',
  REMOVELIQUIDITY = 'RemoveLiquidity'
}

export type UniswapV3LiquidityPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<UniswapV3LiquidityPositionChangeFilter>>>;
  assetAmounts?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_?: InputMaybe<AssetAmountFilter>;
  assetAmounts_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assetAmounts_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  currentTick?: InputMaybe<Scalars['Int']>;
  currentTick_gt?: InputMaybe<Scalars['Int']>;
  currentTick_gte?: InputMaybe<Scalars['Int']>;
  currentTick_in?: InputMaybe<Array<Scalars['Int']>>;
  currentTick_lt?: InputMaybe<Scalars['Int']>;
  currentTick_lte?: InputMaybe<Scalars['Int']>;
  currentTick_not?: InputMaybe<Scalars['Int']>;
  currentTick_not_in?: InputMaybe<Array<Scalars['Int']>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidity?: InputMaybe<Scalars['BigInt']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  nft?: InputMaybe<Scalars['String']>;
  nft_?: InputMaybe<UniswapV3NftFilter>;
  nft_contains?: InputMaybe<Scalars['String']>;
  nft_contains_nocase?: InputMaybe<Scalars['String']>;
  nft_ends_with?: InputMaybe<Scalars['String']>;
  nft_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nft_gt?: InputMaybe<Scalars['String']>;
  nft_gte?: InputMaybe<Scalars['String']>;
  nft_in?: InputMaybe<Array<Scalars['String']>>;
  nft_lt?: InputMaybe<Scalars['String']>;
  nft_lte?: InputMaybe<Scalars['String']>;
  nft_not?: InputMaybe<Scalars['String']>;
  nft_not_contains?: InputMaybe<Scalars['String']>;
  nft_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nft_not_ends_with?: InputMaybe<Scalars['String']>;
  nft_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nft_not_in?: InputMaybe<Array<Scalars['String']>>;
  nft_not_starts_with?: InputMaybe<Scalars['String']>;
  nft_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nft_starts_with?: InputMaybe<Scalars['String']>;
  nft_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<UniswapV3LiquidityPositionChangeFilter>>>;
  poolLiquidity?: InputMaybe<Scalars['BigInt']>;
  poolLiquidity_gt?: InputMaybe<Scalars['BigInt']>;
  poolLiquidity_gte?: InputMaybe<Scalars['BigInt']>;
  poolLiquidity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  poolLiquidity_lt?: InputMaybe<Scalars['BigInt']>;
  poolLiquidity_lte?: InputMaybe<Scalars['BigInt']>;
  poolLiquidity_not?: InputMaybe<Scalars['BigInt']>;
  poolLiquidity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sqrtPrice?: InputMaybe<Scalars['BigInt']>;
  sqrtPrice_gt?: InputMaybe<Scalars['BigInt']>;
  sqrtPrice_gte?: InputMaybe<Scalars['BigInt']>;
  sqrtPrice_in?: InputMaybe<Array<Scalars['BigInt']>>;
  sqrtPrice_lt?: InputMaybe<Scalars['BigInt']>;
  sqrtPrice_lte?: InputMaybe<Scalars['BigInt']>;
  sqrtPrice_not?: InputMaybe<Scalars['BigInt']>;
  sqrtPrice_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  uniswapV3LiquidityPositionChangeType?: InputMaybe<UniswapV3LiquidityPositionChangeType>;
  uniswapV3LiquidityPositionChangeType_in?: InputMaybe<Array<UniswapV3LiquidityPositionChangeType>>;
  uniswapV3LiquidityPositionChangeType_not?: InputMaybe<UniswapV3LiquidityPositionChangeType>;
  uniswapV3LiquidityPositionChangeType_not_in?: InputMaybe<Array<UniswapV3LiquidityPositionChangeType>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum UniswapV3LiquidityPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ASSETAMOUNTS = 'assetAmounts',
  CURRENTTICK = 'currentTick',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  LIQUIDITY = 'liquidity',
  NFT = 'nft',
  NFT__FEE = 'nft__fee',
  NFT__ID = 'nft__id',
  NFT__LIQUIDITY = 'nft__liquidity',
  NFT__POOLADDRESS = 'nft__poolAddress',
  NFT__TICKLOWER = 'nft__tickLower',
  NFT__TICKUPPER = 'nft__tickUpper',
  NFT__TOKENURI = 'nft__tokenURI',
  POOLLIQUIDITY = 'poolLiquidity',
  SQRTPRICE = 'sqrtPrice',
  TIMESTAMP = 'timestamp',
  UNISWAPV3LIQUIDITYPOSITIONCHANGETYPE = 'uniswapV3LiquidityPositionChangeType',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type UniswapV3LiquidityPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<UniswapV3LiquidityPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nfts_?: InputMaybe<UniswapV3NftFilter>;
  or?: InputMaybe<Array<InputMaybe<UniswapV3LiquidityPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum UniswapV3LiquidityPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  ID = 'id',
  NFTS = 'nfts',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type UniswapV3Nft = {
  __typename: 'UniswapV3Nft';
  externalPosition?: Maybe<UniswapV3LiquidityPosition>;
  fee: Scalars['BigDecimal'];
  id: Scalars['ID'];
  liquidity: Scalars['BigInt'];
  poolAddress: Scalars['Bytes'];
  tickLower: Scalars['Int'];
  tickUpper: Scalars['Int'];
  token0: Asset;
  token1: Asset;
  tokenURI: Scalars['String'];
};

export type UniswapV3NftFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<UniswapV3NftFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<UniswapV3LiquidityPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  fee?: InputMaybe<Scalars['BigDecimal']>;
  fee_gt?: InputMaybe<Scalars['BigDecimal']>;
  fee_gte?: InputMaybe<Scalars['BigDecimal']>;
  fee_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  fee_lt?: InputMaybe<Scalars['BigDecimal']>;
  fee_lte?: InputMaybe<Scalars['BigDecimal']>;
  fee_not?: InputMaybe<Scalars['BigDecimal']>;
  fee_not_in?: InputMaybe<Array<Scalars['BigDecimal']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  liquidity?: InputMaybe<Scalars['BigInt']>;
  liquidity_gt?: InputMaybe<Scalars['BigInt']>;
  liquidity_gte?: InputMaybe<Scalars['BigInt']>;
  liquidity_in?: InputMaybe<Array<Scalars['BigInt']>>;
  liquidity_lt?: InputMaybe<Scalars['BigInt']>;
  liquidity_lte?: InputMaybe<Scalars['BigInt']>;
  liquidity_not?: InputMaybe<Scalars['BigInt']>;
  liquidity_not_in?: InputMaybe<Array<Scalars['BigInt']>>;
  or?: InputMaybe<Array<InputMaybe<UniswapV3NftFilter>>>;
  poolAddress?: InputMaybe<Scalars['Bytes']>;
  poolAddress_contains?: InputMaybe<Scalars['Bytes']>;
  poolAddress_gt?: InputMaybe<Scalars['Bytes']>;
  poolAddress_gte?: InputMaybe<Scalars['Bytes']>;
  poolAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;
  poolAddress_lt?: InputMaybe<Scalars['Bytes']>;
  poolAddress_lte?: InputMaybe<Scalars['Bytes']>;
  poolAddress_not?: InputMaybe<Scalars['Bytes']>;
  poolAddress_not_contains?: InputMaybe<Scalars['Bytes']>;
  poolAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  tickLower?: InputMaybe<Scalars['Int']>;
  tickLower_gt?: InputMaybe<Scalars['Int']>;
  tickLower_gte?: InputMaybe<Scalars['Int']>;
  tickLower_in?: InputMaybe<Array<Scalars['Int']>>;
  tickLower_lt?: InputMaybe<Scalars['Int']>;
  tickLower_lte?: InputMaybe<Scalars['Int']>;
  tickLower_not?: InputMaybe<Scalars['Int']>;
  tickLower_not_in?: InputMaybe<Array<Scalars['Int']>>;
  tickUpper?: InputMaybe<Scalars['Int']>;
  tickUpper_gt?: InputMaybe<Scalars['Int']>;
  tickUpper_gte?: InputMaybe<Scalars['Int']>;
  tickUpper_in?: InputMaybe<Array<Scalars['Int']>>;
  tickUpper_lt?: InputMaybe<Scalars['Int']>;
  tickUpper_lte?: InputMaybe<Scalars['Int']>;
  tickUpper_not?: InputMaybe<Scalars['Int']>;
  tickUpper_not_in?: InputMaybe<Array<Scalars['Int']>>;
  token0?: InputMaybe<Scalars['String']>;
  token0_?: InputMaybe<AssetFilter>;
  token0_contains?: InputMaybe<Scalars['String']>;
  token0_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_ends_with?: InputMaybe<Scalars['String']>;
  token0_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_gt?: InputMaybe<Scalars['String']>;
  token0_gte?: InputMaybe<Scalars['String']>;
  token0_in?: InputMaybe<Array<Scalars['String']>>;
  token0_lt?: InputMaybe<Scalars['String']>;
  token0_lte?: InputMaybe<Scalars['String']>;
  token0_not?: InputMaybe<Scalars['String']>;
  token0_not_contains?: InputMaybe<Scalars['String']>;
  token0_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token0_not_ends_with?: InputMaybe<Scalars['String']>;
  token0_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token0_not_in?: InputMaybe<Array<Scalars['String']>>;
  token0_not_starts_with?: InputMaybe<Scalars['String']>;
  token0_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token0_starts_with?: InputMaybe<Scalars['String']>;
  token0_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1?: InputMaybe<Scalars['String']>;
  token1_?: InputMaybe<AssetFilter>;
  token1_contains?: InputMaybe<Scalars['String']>;
  token1_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_ends_with?: InputMaybe<Scalars['String']>;
  token1_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_gt?: InputMaybe<Scalars['String']>;
  token1_gte?: InputMaybe<Scalars['String']>;
  token1_in?: InputMaybe<Array<Scalars['String']>>;
  token1_lt?: InputMaybe<Scalars['String']>;
  token1_lte?: InputMaybe<Scalars['String']>;
  token1_not?: InputMaybe<Scalars['String']>;
  token1_not_contains?: InputMaybe<Scalars['String']>;
  token1_not_contains_nocase?: InputMaybe<Scalars['String']>;
  token1_not_ends_with?: InputMaybe<Scalars['String']>;
  token1_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  token1_not_in?: InputMaybe<Array<Scalars['String']>>;
  token1_not_starts_with?: InputMaybe<Scalars['String']>;
  token1_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  token1_starts_with?: InputMaybe<Scalars['String']>;
  token1_starts_with_nocase?: InputMaybe<Scalars['String']>;
  tokenURI?: InputMaybe<Scalars['String']>;
  tokenURI_contains?: InputMaybe<Scalars['String']>;
  tokenURI_contains_nocase?: InputMaybe<Scalars['String']>;
  tokenURI_ends_with?: InputMaybe<Scalars['String']>;
  tokenURI_ends_with_nocase?: InputMaybe<Scalars['String']>;
  tokenURI_gt?: InputMaybe<Scalars['String']>;
  tokenURI_gte?: InputMaybe<Scalars['String']>;
  tokenURI_in?: InputMaybe<Array<Scalars['String']>>;
  tokenURI_lt?: InputMaybe<Scalars['String']>;
  tokenURI_lte?: InputMaybe<Scalars['String']>;
  tokenURI_not?: InputMaybe<Scalars['String']>;
  tokenURI_not_contains?: InputMaybe<Scalars['String']>;
  tokenURI_not_contains_nocase?: InputMaybe<Scalars['String']>;
  tokenURI_not_ends_with?: InputMaybe<Scalars['String']>;
  tokenURI_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  tokenURI_not_in?: InputMaybe<Array<Scalars['String']>>;
  tokenURI_not_starts_with?: InputMaybe<Scalars['String']>;
  tokenURI_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  tokenURI_starts_with?: InputMaybe<Scalars['String']>;
  tokenURI_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum UniswapV3NftOrderBy {
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  FEE = 'fee',
  ID = 'id',
  LIQUIDITY = 'liquidity',
  POOLADDRESS = 'poolAddress',
  TICKLOWER = 'tickLower',
  TICKUPPER = 'tickUpper',
  TOKEN0 = 'token0',
  TOKEN0__DECIMALS = 'token0__decimals',
  TOKEN0__ID = 'token0__id',
  TOKEN0__NAME = 'token0__name',
  TOKEN0__SYMBOL = 'token0__symbol',
  TOKEN1 = 'token1',
  TOKEN1__DECIMALS = 'token1__decimals',
  TOKEN1__ID = 'token1__id',
  TOKEN1__NAME = 'token1__name',
  TOKEN1__SYMBOL = 'token1__symbol',
  TOKENURI = 'tokenURI'
}

export type UnknownExternalPosition = ExternalPosition & {
  __typename: 'UnknownExternalPosition';
  active: Scalars['Boolean'];
  changes: Array<ExternalPositionChange>;
  id: Scalars['ID'];
  type: ExternalPositionType;
  vault: Vault;
};


export type UnknownExternalPositionChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionChangeFilter>;
};

export type UnknownExternalPositionChange = Activity & ExternalPositionChange & VaultActivity & {
  __typename: 'UnknownExternalPositionChange';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  externalPosition: ExternalPosition;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type UnknownExternalPositionChangeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<UnknownExternalPositionChangeFilter>>>;
  externalPosition?: InputMaybe<Scalars['String']>;
  externalPosition_?: InputMaybe<ExternalPositionFilter>;
  externalPosition_contains?: InputMaybe<Scalars['String']>;
  externalPosition_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_gt?: InputMaybe<Scalars['String']>;
  externalPosition_gte?: InputMaybe<Scalars['String']>;
  externalPosition_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_lt?: InputMaybe<Scalars['String']>;
  externalPosition_lte?: InputMaybe<Scalars['String']>;
  externalPosition_not?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains?: InputMaybe<Scalars['String']>;
  externalPosition_not_contains_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_not_in?: InputMaybe<Array<Scalars['String']>>;
  externalPosition_not_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with?: InputMaybe<Scalars['String']>;
  externalPosition_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<UnknownExternalPositionChangeFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum UnknownExternalPositionChangeOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  EXTERNALPOSITION = 'externalPosition',
  EXTERNALPOSITION__ACTIVE = 'externalPosition__active',
  EXTERNALPOSITION__ID = 'externalPosition__id',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type UnknownExternalPositionFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  active?: InputMaybe<Scalars['Boolean']>;
  active_in?: InputMaybe<Array<Scalars['Boolean']>>;
  active_not?: InputMaybe<Scalars['Boolean']>;
  active_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  and?: InputMaybe<Array<InputMaybe<UnknownExternalPositionFilter>>>;
  changes_?: InputMaybe<ExternalPositionChangeFilter>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<UnknownExternalPositionFilter>>>;
  type?: InputMaybe<Scalars['String']>;
  type_?: InputMaybe<ExternalPositionTypeFilter>;
  type_contains?: InputMaybe<Scalars['String']>;
  type_contains_nocase?: InputMaybe<Scalars['String']>;
  type_ends_with?: InputMaybe<Scalars['String']>;
  type_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_gt?: InputMaybe<Scalars['String']>;
  type_gte?: InputMaybe<Scalars['String']>;
  type_in?: InputMaybe<Array<Scalars['String']>>;
  type_lt?: InputMaybe<Scalars['String']>;
  type_lte?: InputMaybe<Scalars['String']>;
  type_not?: InputMaybe<Scalars['String']>;
  type_not_contains?: InputMaybe<Scalars['String']>;
  type_not_contains_nocase?: InputMaybe<Scalars['String']>;
  type_not_ends_with?: InputMaybe<Scalars['String']>;
  type_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  type_not_in?: InputMaybe<Array<Scalars['String']>>;
  type_not_starts_with?: InputMaybe<Scalars['String']>;
  type_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  type_starts_with?: InputMaybe<Scalars['String']>;
  type_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum UnknownExternalPositionOrderBy {
  ACTIVE = 'active',
  CHANGES = 'changes',
  ID = 'id',
  TYPE = 'type',
  TYPE__ID = 'type__id',
  TYPE__LABEL = 'type__label',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type UnknownFee = Fee & {
  __typename: 'UnknownFee';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  fee: Scalars['Bytes'];
  feeType: FeeType;
  id: Scalars['ID'];
  lastSettled: Scalars['Int'];
  settings: Scalars['String'];
};

export type UnknownFeeFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<UnknownFeeFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  fee?: InputMaybe<Scalars['Bytes']>;
  feeType?: InputMaybe<FeeType>;
  feeType_in?: InputMaybe<Array<FeeType>>;
  feeType_not?: InputMaybe<FeeType>;
  feeType_not_in?: InputMaybe<Array<FeeType>>;
  fee_contains?: InputMaybe<Scalars['Bytes']>;
  fee_gt?: InputMaybe<Scalars['Bytes']>;
  fee_gte?: InputMaybe<Scalars['Bytes']>;
  fee_in?: InputMaybe<Array<Scalars['Bytes']>>;
  fee_lt?: InputMaybe<Scalars['Bytes']>;
  fee_lte?: InputMaybe<Scalars['Bytes']>;
  fee_not?: InputMaybe<Scalars['Bytes']>;
  fee_not_contains?: InputMaybe<Scalars['Bytes']>;
  fee_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  lastSettled?: InputMaybe<Scalars['Int']>;
  lastSettled_gt?: InputMaybe<Scalars['Int']>;
  lastSettled_gte?: InputMaybe<Scalars['Int']>;
  lastSettled_in?: InputMaybe<Array<Scalars['Int']>>;
  lastSettled_lt?: InputMaybe<Scalars['Int']>;
  lastSettled_lte?: InputMaybe<Scalars['Int']>;
  lastSettled_not?: InputMaybe<Scalars['Int']>;
  lastSettled_not_in?: InputMaybe<Array<Scalars['Int']>>;
  or?: InputMaybe<Array<InputMaybe<UnknownFeeFilter>>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum UnknownFeeOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  FEE = 'fee',
  FEETYPE = 'feeType',
  ID = 'id',
  LASTSETTLED = 'lastSettled',
  SETTINGS = 'settings'
}

export type UnknownPolicy = Policy & {
  __typename: 'UnknownPolicy';
  comptroller: Comptroller;
  createdAt: Scalars['Int'];
  enabled: Scalars['Boolean'];
  id: Scalars['ID'];
  policy: Scalars['Bytes'];
  policyType: PolicyType;
  settings: Scalars['String'];
};

export type UnknownPolicyFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<UnknownPolicyFilter>>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  enabled?: InputMaybe<Scalars['Boolean']>;
  enabled_in?: InputMaybe<Array<Scalars['Boolean']>>;
  enabled_not?: InputMaybe<Scalars['Boolean']>;
  enabled_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<UnknownPolicyFilter>>>;
  policy?: InputMaybe<Scalars['Bytes']>;
  policyType?: InputMaybe<PolicyType>;
  policyType_in?: InputMaybe<Array<PolicyType>>;
  policyType_not?: InputMaybe<PolicyType>;
  policyType_not_in?: InputMaybe<Array<PolicyType>>;
  policy_contains?: InputMaybe<Scalars['Bytes']>;
  policy_gt?: InputMaybe<Scalars['Bytes']>;
  policy_gte?: InputMaybe<Scalars['Bytes']>;
  policy_in?: InputMaybe<Array<Scalars['Bytes']>>;
  policy_lt?: InputMaybe<Scalars['Bytes']>;
  policy_lte?: InputMaybe<Scalars['Bytes']>;
  policy_not?: InputMaybe<Scalars['Bytes']>;
  policy_not_contains?: InputMaybe<Scalars['Bytes']>;
  policy_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
  settings?: InputMaybe<Scalars['String']>;
  settings_contains?: InputMaybe<Scalars['String']>;
  settings_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_ends_with?: InputMaybe<Scalars['String']>;
  settings_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_gt?: InputMaybe<Scalars['String']>;
  settings_gte?: InputMaybe<Scalars['String']>;
  settings_in?: InputMaybe<Array<Scalars['String']>>;
  settings_lt?: InputMaybe<Scalars['String']>;
  settings_lte?: InputMaybe<Scalars['String']>;
  settings_not?: InputMaybe<Scalars['String']>;
  settings_not_contains?: InputMaybe<Scalars['String']>;
  settings_not_contains_nocase?: InputMaybe<Scalars['String']>;
  settings_not_ends_with?: InputMaybe<Scalars['String']>;
  settings_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  settings_not_in?: InputMaybe<Array<Scalars['String']>>;
  settings_not_starts_with?: InputMaybe<Scalars['String']>;
  settings_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  settings_starts_with?: InputMaybe<Scalars['String']>;
  settings_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum UnknownPolicyOrderBy {
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  CREATEDAT = 'createdAt',
  ENABLED = 'enabled',
  ID = 'id',
  POLICY = 'policy',
  POLICYTYPE = 'policyType',
  SETTINGS = 'settings'
}

export type UserAddressList = {
  __typename: 'UserAddressList';
  addressLists: Array<AddressList>;
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  updatedAt: Scalars['Int'];
  userAddress: Scalars['Bytes'];
};


export type UserAddressListAddressListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AddressListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AddressListFilter>;
};

export type UserAddressListFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  addressLists?: InputMaybe<Array<Scalars['String']>>;
  addressLists_?: InputMaybe<AddressListFilter>;
  addressLists_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  addressLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  and?: InputMaybe<Array<InputMaybe<UserAddressListFilter>>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<UserAddressListFilter>>>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  userAddress?: InputMaybe<Scalars['Bytes']>;
  userAddress_contains?: InputMaybe<Scalars['Bytes']>;
  userAddress_gt?: InputMaybe<Scalars['Bytes']>;
  userAddress_gte?: InputMaybe<Scalars['Bytes']>;
  userAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;
  userAddress_lt?: InputMaybe<Scalars['Bytes']>;
  userAddress_lte?: InputMaybe<Scalars['Bytes']>;
  userAddress_not?: InputMaybe<Scalars['Bytes']>;
  userAddress_not_contains?: InputMaybe<Scalars['Bytes']>;
  userAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
};

export enum UserAddressListOrderBy {
  ADDRESSLISTS = 'addressLists',
  CREATEDAT = 'createdAt',
  ID = 'id',
  UPDATEDAT = 'updatedAt',
  USERADDRESS = 'userAddress'
}

export type UserUintList = {
  __typename: 'UserUintList';
  createdAt: Scalars['Int'];
  id: Scalars['ID'];
  uintLists: Array<UintList>;
  updatedAt: Scalars['Int'];
  userAddress: Scalars['Bytes'];
};


export type UserUintListUintListsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<UintListOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<UintListFilter>;
};

export type UserUintListFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<UserUintListFilter>>>;
  createdAt?: InputMaybe<Scalars['Int']>;
  createdAt_gt?: InputMaybe<Scalars['Int']>;
  createdAt_gte?: InputMaybe<Scalars['Int']>;
  createdAt_in?: InputMaybe<Array<Scalars['Int']>>;
  createdAt_lt?: InputMaybe<Scalars['Int']>;
  createdAt_lte?: InputMaybe<Scalars['Int']>;
  createdAt_not?: InputMaybe<Scalars['Int']>;
  createdAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<UserUintListFilter>>>;
  uintLists?: InputMaybe<Array<Scalars['String']>>;
  uintLists_?: InputMaybe<UintListFilter>;
  uintLists_contains?: InputMaybe<Array<Scalars['String']>>;
  uintLists_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  uintLists_not?: InputMaybe<Array<Scalars['String']>>;
  uintLists_not_contains?: InputMaybe<Array<Scalars['String']>>;
  uintLists_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  updatedAt?: InputMaybe<Scalars['Int']>;
  updatedAt_gt?: InputMaybe<Scalars['Int']>;
  updatedAt_gte?: InputMaybe<Scalars['Int']>;
  updatedAt_in?: InputMaybe<Array<Scalars['Int']>>;
  updatedAt_lt?: InputMaybe<Scalars['Int']>;
  updatedAt_lte?: InputMaybe<Scalars['Int']>;
  updatedAt_not?: InputMaybe<Scalars['Int']>;
  updatedAt_not_in?: InputMaybe<Array<Scalars['Int']>>;
  userAddress?: InputMaybe<Scalars['Bytes']>;
  userAddress_contains?: InputMaybe<Scalars['Bytes']>;
  userAddress_gt?: InputMaybe<Scalars['Bytes']>;
  userAddress_gte?: InputMaybe<Scalars['Bytes']>;
  userAddress_in?: InputMaybe<Array<Scalars['Bytes']>>;
  userAddress_lt?: InputMaybe<Scalars['Bytes']>;
  userAddress_lte?: InputMaybe<Scalars['Bytes']>;
  userAddress_not?: InputMaybe<Scalars['Bytes']>;
  userAddress_not_contains?: InputMaybe<Scalars['Bytes']>;
  userAddress_not_in?: InputMaybe<Array<Scalars['Bytes']>>;
};

export enum UserUintListOrderBy {
  CREATEDAT = 'createdAt',
  ID = 'id',
  UINTLISTS = 'uintLists',
  UPDATEDAT = 'updatedAt',
  USERADDRESS = 'userAddress'
}

export type Vault = {
  __typename: 'Vault';
  assetManagers: Array<Account>;
  comptroller: Comptroller;
  comptrollers: Array<Comptroller>;
  counter: Scalars['Int'];
  creator: Account;
  depositCount: Scalars['Int'];
  deposits: Array<Deposit>;
  externalPositions: Array<ExternalPosition>;
  freelyTransferableShares: Scalars['Boolean'];
  id: Scalars['ID'];
  inception: Scalars['Int'];
  lastAssetUpdate: Scalars['Int'];
  migrations: Array<Migration>;
  migrator?: Maybe<Account>;
  name: Scalars['String'];
  nominatedOwner?: Maybe<Account>;
  owner: Account;
  protocolFee?: Maybe<ProtocolFee>;
  protocolFeeBurned: Array<ProtocolFeeBurned>;
  protocolFeeSharesPaid: Array<ProtocolFeePaid>;
  reconfigurations: Array<Reconfiguration>;
  release: Release;
  sharesChanges: Array<SharesChange>;
  symbol: Scalars['String'];
  trackedAssets: Array<Asset>;
  trades: Array<Trade>;
  vaultActivity: Array<VaultActivity>;
};


export type VaultAssetManagersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AccountOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AccountFilter>;
};


export type VaultComptrollersArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ComptrollerOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ComptrollerFilter>;
};


export type VaultDepositsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<DepositOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<DepositFilter>;
};


export type VaultExternalPositionsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ExternalPositionOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ExternalPositionFilter>;
};


export type VaultMigrationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<MigrationOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<MigrationFilter>;
};


export type VaultProtocolFeeBurnedArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeeBurnedOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProtocolFeeBurnedFilter>;
};


export type VaultProtocolFeeSharesPaidArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ProtocolFeePaidOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ProtocolFeePaidFilter>;
};


export type VaultReconfigurationsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<ReconfigurationOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<ReconfigurationFilter>;
};


export type VaultSharesChangesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<SharesChangeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<SharesChangeFilter>;
};


export type VaultTrackedAssetsArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<AssetOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<AssetFilter>;
};


export type VaultTradesArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<TradeOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<TradeFilter>;
};


export type VaultVaultActivityArgs = {
  first?: InputMaybe<Scalars['Int']>;
  orderBy?: InputMaybe<VaultActivityOrderBy>;
  orderDirection?: InputMaybe<OrderDirection>;
  skip?: InputMaybe<Scalars['Int']>;
  where?: InputMaybe<VaultActivityFilter>;
};

export type VaultActivity = {
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultActivityFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultActivityFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<VaultActivityFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultActivityOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultCallDeregisteredEvent = Activity & NetworkActivity & {
  __typename: 'VaultCallDeregisteredEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  registeredVaultCall: RegisteredVaultCall;
  timestamp: Scalars['Int'];
};

export type VaultCallDeregisteredEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultCallDeregisteredEventFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<VaultCallDeregisteredEventFilter>>>;
  registeredVaultCall?: InputMaybe<Scalars['String']>;
  registeredVaultCall_?: InputMaybe<RegisteredVaultCallFilter>;
  registeredVaultCall_contains?: InputMaybe<Scalars['String']>;
  registeredVaultCall_contains_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_ends_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_gt?: InputMaybe<Scalars['String']>;
  registeredVaultCall_gte?: InputMaybe<Scalars['String']>;
  registeredVaultCall_in?: InputMaybe<Array<Scalars['String']>>;
  registeredVaultCall_lt?: InputMaybe<Scalars['String']>;
  registeredVaultCall_lte?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_contains?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_ends_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_in?: InputMaybe<Array<Scalars['String']>>;
  registeredVaultCall_not_starts_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_starts_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum VaultCallDeregisteredEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  REGISTEREDVAULTCALL = 'registeredVaultCall',
  REGISTEREDVAULTCALL__CONTRACT = 'registeredVaultCall__contract',
  REGISTEREDVAULTCALL__DATAHASH = 'registeredVaultCall__dataHash',
  REGISTEREDVAULTCALL__ID = 'registeredVaultCall__id',
  REGISTEREDVAULTCALL__REGISTERED = 'registeredVaultCall__registered',
  REGISTEREDVAULTCALL__SELECTOR = 'registeredVaultCall__selector',
  REGISTEREDVAULTCALL__TIMESTAMP = 'registeredVaultCall__timestamp',
  TIMESTAMP = 'timestamp'
}

export type VaultCallRegisteredEvent = Activity & NetworkActivity & {
  __typename: 'VaultCallRegisteredEvent';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  registeredVaultCall: RegisteredVaultCall;
  timestamp: Scalars['Int'];
};

export type VaultCallRegisteredEventFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultCallRegisteredEventFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<VaultCallRegisteredEventFilter>>>;
  registeredVaultCall?: InputMaybe<Scalars['String']>;
  registeredVaultCall_?: InputMaybe<RegisteredVaultCallFilter>;
  registeredVaultCall_contains?: InputMaybe<Scalars['String']>;
  registeredVaultCall_contains_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_ends_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_gt?: InputMaybe<Scalars['String']>;
  registeredVaultCall_gte?: InputMaybe<Scalars['String']>;
  registeredVaultCall_in?: InputMaybe<Array<Scalars['String']>>;
  registeredVaultCall_lt?: InputMaybe<Scalars['String']>;
  registeredVaultCall_lte?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_contains?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_contains_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_ends_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_in?: InputMaybe<Array<Scalars['String']>>;
  registeredVaultCall_not_starts_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  registeredVaultCall_starts_with?: InputMaybe<Scalars['String']>;
  registeredVaultCall_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
};

export enum VaultCallRegisteredEventOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  REGISTEREDVAULTCALL = 'registeredVaultCall',
  REGISTEREDVAULTCALL__CONTRACT = 'registeredVaultCall__contract',
  REGISTEREDVAULTCALL__DATAHASH = 'registeredVaultCall__dataHash',
  REGISTEREDVAULTCALL__ID = 'registeredVaultCall__id',
  REGISTEREDVAULTCALL__REGISTERED = 'registeredVaultCall__registered',
  REGISTEREDVAULTCALL__SELECTOR = 'registeredVaultCall__selector',
  REGISTEREDVAULTCALL__TIMESTAMP = 'registeredVaultCall__timestamp',
  TIMESTAMP = 'timestamp'
}

export type VaultCreated = Activity & VaultActivity & {
  __typename: 'VaultCreated';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  creator: Account;
  id: Scalars['ID'];
  owner: Account;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultCreatedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultCreatedFilter>>>;
  creator?: InputMaybe<Scalars['String']>;
  creator_?: InputMaybe<AccountFilter>;
  creator_contains?: InputMaybe<Scalars['String']>;
  creator_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_ends_with?: InputMaybe<Scalars['String']>;
  creator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_gt?: InputMaybe<Scalars['String']>;
  creator_gte?: InputMaybe<Scalars['String']>;
  creator_in?: InputMaybe<Array<Scalars['String']>>;
  creator_lt?: InputMaybe<Scalars['String']>;
  creator_lte?: InputMaybe<Scalars['String']>;
  creator_not?: InputMaybe<Scalars['String']>;
  creator_not_contains?: InputMaybe<Scalars['String']>;
  creator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_not_ends_with?: InputMaybe<Scalars['String']>;
  creator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_not_in?: InputMaybe<Array<Scalars['String']>>;
  creator_not_starts_with?: InputMaybe<Scalars['String']>;
  creator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  creator_starts_with?: InputMaybe<Scalars['String']>;
  creator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<VaultCreatedFilter>>>;
  owner?: InputMaybe<Scalars['String']>;
  owner_?: InputMaybe<AccountFilter>;
  owner_contains?: InputMaybe<Scalars['String']>;
  owner_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_ends_with?: InputMaybe<Scalars['String']>;
  owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_gt?: InputMaybe<Scalars['String']>;
  owner_gte?: InputMaybe<Scalars['String']>;
  owner_in?: InputMaybe<Array<Scalars['String']>>;
  owner_lt?: InputMaybe<Scalars['String']>;
  owner_lte?: InputMaybe<Scalars['String']>;
  owner_not?: InputMaybe<Scalars['String']>;
  owner_not_contains?: InputMaybe<Scalars['String']>;
  owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_not_ends_with?: InputMaybe<Scalars['String']>;
  owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_in?: InputMaybe<Array<Scalars['String']>>;
  owner_not_starts_with?: InputMaybe<Scalars['String']>;
  owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_starts_with?: InputMaybe<Scalars['String']>;
  owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultCreatedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  CREATOR = 'creator',
  CREATOR__ASSETMANAGERSINCE = 'creator__assetManagerSince',
  CREATOR__AUTHUSERSINCE = 'creator__authUserSince',
  CREATOR__DEPOSITORSINCE = 'creator__depositorSince',
  CREATOR__ID = 'creator__id',
  CREATOR__ISASSETMANAGER = 'creator__isAssetManager',
  CREATOR__ISAUTHUSER = 'creator__isAuthUser',
  CREATOR__ISDEPOSITOR = 'creator__isDepositor',
  CREATOR__ISOWNER = 'creator__isOwner',
  CREATOR__OWNERSINCE = 'creator__ownerSince',
  ID = 'id',
  OWNER = 'owner',
  OWNER__ASSETMANAGERSINCE = 'owner__assetManagerSince',
  OWNER__AUTHUSERSINCE = 'owner__authUserSince',
  OWNER__DEPOSITORSINCE = 'owner__depositorSince',
  OWNER__ID = 'owner__id',
  OWNER__ISASSETMANAGER = 'owner__isAssetManager',
  OWNER__ISAUTHUSER = 'owner__isAuthUser',
  OWNER__ISDEPOSITOR = 'owner__isDepositor',
  OWNER__ISOWNER = 'owner__isOwner',
  OWNER__OWNERSINCE = 'owner__ownerSince',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultMigrationCancelled = Activity & VaultActivity & {
  __typename: 'VaultMigrationCancelled';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  migration: Migration;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultMigrationCancelledFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultMigrationCancelledFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  migration?: InputMaybe<Scalars['String']>;
  migration_?: InputMaybe<MigrationFilter>;
  migration_contains?: InputMaybe<Scalars['String']>;
  migration_contains_nocase?: InputMaybe<Scalars['String']>;
  migration_ends_with?: InputMaybe<Scalars['String']>;
  migration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migration_gt?: InputMaybe<Scalars['String']>;
  migration_gte?: InputMaybe<Scalars['String']>;
  migration_in?: InputMaybe<Array<Scalars['String']>>;
  migration_lt?: InputMaybe<Scalars['String']>;
  migration_lte?: InputMaybe<Scalars['String']>;
  migration_not?: InputMaybe<Scalars['String']>;
  migration_not_contains?: InputMaybe<Scalars['String']>;
  migration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  migration_not_ends_with?: InputMaybe<Scalars['String']>;
  migration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migration_not_in?: InputMaybe<Array<Scalars['String']>>;
  migration_not_starts_with?: InputMaybe<Scalars['String']>;
  migration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  migration_starts_with?: InputMaybe<Scalars['String']>;
  migration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultMigrationCancelledFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultMigrationCancelledOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  MIGRATION = 'migration',
  MIGRATION__CANCELLED = 'migration__cancelled',
  MIGRATION__CANCELLEDTIMESTAMP = 'migration__cancelledTimestamp',
  MIGRATION__EXECUTABLETIMESTAMP = 'migration__executableTimestamp',
  MIGRATION__EXECUTED = 'migration__executed',
  MIGRATION__EXECUTEDTIMESTAMP = 'migration__executedTimestamp',
  MIGRATION__ID = 'migration__id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultMigrationExecuted = Activity & VaultActivity & {
  __typename: 'VaultMigrationExecuted';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  migration: Migration;
  nextComptroller: Comptroller;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultMigrationExecutedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultMigrationExecutedFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  migration?: InputMaybe<Scalars['String']>;
  migration_?: InputMaybe<MigrationFilter>;
  migration_contains?: InputMaybe<Scalars['String']>;
  migration_contains_nocase?: InputMaybe<Scalars['String']>;
  migration_ends_with?: InputMaybe<Scalars['String']>;
  migration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migration_gt?: InputMaybe<Scalars['String']>;
  migration_gte?: InputMaybe<Scalars['String']>;
  migration_in?: InputMaybe<Array<Scalars['String']>>;
  migration_lt?: InputMaybe<Scalars['String']>;
  migration_lte?: InputMaybe<Scalars['String']>;
  migration_not?: InputMaybe<Scalars['String']>;
  migration_not_contains?: InputMaybe<Scalars['String']>;
  migration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  migration_not_ends_with?: InputMaybe<Scalars['String']>;
  migration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migration_not_in?: InputMaybe<Array<Scalars['String']>>;
  migration_not_starts_with?: InputMaybe<Scalars['String']>;
  migration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  migration_starts_with?: InputMaybe<Scalars['String']>;
  migration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller?: InputMaybe<Scalars['String']>;
  nextComptroller_?: InputMaybe<ComptrollerFilter>;
  nextComptroller_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_gt?: InputMaybe<Scalars['String']>;
  nextComptroller_gte?: InputMaybe<Scalars['String']>;
  nextComptroller_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_lt?: InputMaybe<Scalars['String']>;
  nextComptroller_lte?: InputMaybe<Scalars['String']>;
  nextComptroller_not?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultMigrationExecutedFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultMigrationExecutedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  MIGRATION = 'migration',
  MIGRATION__CANCELLED = 'migration__cancelled',
  MIGRATION__CANCELLEDTIMESTAMP = 'migration__cancelledTimestamp',
  MIGRATION__EXECUTABLETIMESTAMP = 'migration__executableTimestamp',
  MIGRATION__EXECUTED = 'migration__executed',
  MIGRATION__EXECUTEDTIMESTAMP = 'migration__executedTimestamp',
  MIGRATION__ID = 'migration__id',
  NEXTCOMPTROLLER = 'nextComptroller',
  NEXTCOMPTROLLER__ACTIVATION = 'nextComptroller__activation',
  NEXTCOMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'nextComptroller__autoProtocolFeeSharesBuyback',
  NEXTCOMPTROLLER__CREATION = 'nextComptroller__creation',
  NEXTCOMPTROLLER__DESTRUCTION = 'nextComptroller__destruction',
  NEXTCOMPTROLLER__ID = 'nextComptroller__id',
  NEXTCOMPTROLLER__SHARESACTIONTIMELOCK = 'nextComptroller__sharesActionTimelock',
  NEXTCOMPTROLLER__STATUS = 'nextComptroller__status',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultMigrationSignalled = Activity & VaultActivity & {
  __typename: 'VaultMigrationSignalled';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  migration: Migration;
  nextComptroller: Comptroller;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultMigrationSignalledFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultMigrationSignalledFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  migration?: InputMaybe<Scalars['String']>;
  migration_?: InputMaybe<MigrationFilter>;
  migration_contains?: InputMaybe<Scalars['String']>;
  migration_contains_nocase?: InputMaybe<Scalars['String']>;
  migration_ends_with?: InputMaybe<Scalars['String']>;
  migration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migration_gt?: InputMaybe<Scalars['String']>;
  migration_gte?: InputMaybe<Scalars['String']>;
  migration_in?: InputMaybe<Array<Scalars['String']>>;
  migration_lt?: InputMaybe<Scalars['String']>;
  migration_lte?: InputMaybe<Scalars['String']>;
  migration_not?: InputMaybe<Scalars['String']>;
  migration_not_contains?: InputMaybe<Scalars['String']>;
  migration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  migration_not_ends_with?: InputMaybe<Scalars['String']>;
  migration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migration_not_in?: InputMaybe<Array<Scalars['String']>>;
  migration_not_starts_with?: InputMaybe<Scalars['String']>;
  migration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  migration_starts_with?: InputMaybe<Scalars['String']>;
  migration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller?: InputMaybe<Scalars['String']>;
  nextComptroller_?: InputMaybe<ComptrollerFilter>;
  nextComptroller_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_gt?: InputMaybe<Scalars['String']>;
  nextComptroller_gte?: InputMaybe<Scalars['String']>;
  nextComptroller_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_lt?: InputMaybe<Scalars['String']>;
  nextComptroller_lte?: InputMaybe<Scalars['String']>;
  nextComptroller_not?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultMigrationSignalledFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultMigrationSignalledOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  MIGRATION = 'migration',
  MIGRATION__CANCELLED = 'migration__cancelled',
  MIGRATION__CANCELLEDTIMESTAMP = 'migration__cancelledTimestamp',
  MIGRATION__EXECUTABLETIMESTAMP = 'migration__executableTimestamp',
  MIGRATION__EXECUTED = 'migration__executed',
  MIGRATION__EXECUTEDTIMESTAMP = 'migration__executedTimestamp',
  MIGRATION__ID = 'migration__id',
  NEXTCOMPTROLLER = 'nextComptroller',
  NEXTCOMPTROLLER__ACTIVATION = 'nextComptroller__activation',
  NEXTCOMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'nextComptroller__autoProtocolFeeSharesBuyback',
  NEXTCOMPTROLLER__CREATION = 'nextComptroller__creation',
  NEXTCOMPTROLLER__DESTRUCTION = 'nextComptroller__destruction',
  NEXTCOMPTROLLER__ID = 'nextComptroller__id',
  NEXTCOMPTROLLER__SHARESACTIONTIMELOCK = 'nextComptroller__sharesActionTimelock',
  NEXTCOMPTROLLER__STATUS = 'nextComptroller__status',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultNominatedOwnerRemoved = Activity & VaultActivity & {
  __typename: 'VaultNominatedOwnerRemoved';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  nominatedOwner: Account;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultNominatedOwnerRemovedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultNominatedOwnerRemovedFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nominatedOwner?: InputMaybe<Scalars['String']>;
  nominatedOwner_?: InputMaybe<AccountFilter>;
  nominatedOwner_contains?: InputMaybe<Scalars['String']>;
  nominatedOwner_contains_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_ends_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_gt?: InputMaybe<Scalars['String']>;
  nominatedOwner_gte?: InputMaybe<Scalars['String']>;
  nominatedOwner_in?: InputMaybe<Array<Scalars['String']>>;
  nominatedOwner_lt?: InputMaybe<Scalars['String']>;
  nominatedOwner_lte?: InputMaybe<Scalars['String']>;
  nominatedOwner_not?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_contains?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_ends_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_in?: InputMaybe<Array<Scalars['String']>>;
  nominatedOwner_not_starts_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_starts_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultNominatedOwnerRemovedFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultNominatedOwnerRemovedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  NOMINATEDOWNER = 'nominatedOwner',
  NOMINATEDOWNER__ASSETMANAGERSINCE = 'nominatedOwner__assetManagerSince',
  NOMINATEDOWNER__AUTHUSERSINCE = 'nominatedOwner__authUserSince',
  NOMINATEDOWNER__DEPOSITORSINCE = 'nominatedOwner__depositorSince',
  NOMINATEDOWNER__ID = 'nominatedOwner__id',
  NOMINATEDOWNER__ISASSETMANAGER = 'nominatedOwner__isAssetManager',
  NOMINATEDOWNER__ISAUTHUSER = 'nominatedOwner__isAuthUser',
  NOMINATEDOWNER__ISDEPOSITOR = 'nominatedOwner__isDepositor',
  NOMINATEDOWNER__ISOWNER = 'nominatedOwner__isOwner',
  NOMINATEDOWNER__OWNERSINCE = 'nominatedOwner__ownerSince',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultNominatedOwnerSet = Activity & VaultActivity & {
  __typename: 'VaultNominatedOwnerSet';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  nominatedOwner: Account;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultNominatedOwnerSetFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultNominatedOwnerSetFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nominatedOwner?: InputMaybe<Scalars['String']>;
  nominatedOwner_?: InputMaybe<AccountFilter>;
  nominatedOwner_contains?: InputMaybe<Scalars['String']>;
  nominatedOwner_contains_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_ends_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_gt?: InputMaybe<Scalars['String']>;
  nominatedOwner_gte?: InputMaybe<Scalars['String']>;
  nominatedOwner_in?: InputMaybe<Array<Scalars['String']>>;
  nominatedOwner_lt?: InputMaybe<Scalars['String']>;
  nominatedOwner_lte?: InputMaybe<Scalars['String']>;
  nominatedOwner_not?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_contains?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_ends_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_in?: InputMaybe<Array<Scalars['String']>>;
  nominatedOwner_not_starts_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_starts_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultNominatedOwnerSetFilter>>>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultNominatedOwnerSetOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  NOMINATEDOWNER = 'nominatedOwner',
  NOMINATEDOWNER__ASSETMANAGERSINCE = 'nominatedOwner__assetManagerSince',
  NOMINATEDOWNER__AUTHUSERSINCE = 'nominatedOwner__authUserSince',
  NOMINATEDOWNER__DEPOSITORSINCE = 'nominatedOwner__depositorSince',
  NOMINATEDOWNER__ID = 'nominatedOwner__id',
  NOMINATEDOWNER__ISASSETMANAGER = 'nominatedOwner__isAssetManager',
  NOMINATEDOWNER__ISAUTHUSER = 'nominatedOwner__isAuthUser',
  NOMINATEDOWNER__ISDEPOSITOR = 'nominatedOwner__isDepositor',
  NOMINATEDOWNER__ISOWNER = 'nominatedOwner__isOwner',
  NOMINATEDOWNER__OWNERSINCE = 'nominatedOwner__ownerSince',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultOwnershipTransferred = Activity & VaultActivity & {
  __typename: 'VaultOwnershipTransferred';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  nextOwner: Account;
  prevOwner: Account;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultOwnershipTransferredFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultOwnershipTransferredFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nextOwner?: InputMaybe<Scalars['String']>;
  nextOwner_?: InputMaybe<AccountFilter>;
  nextOwner_contains?: InputMaybe<Scalars['String']>;
  nextOwner_contains_nocase?: InputMaybe<Scalars['String']>;
  nextOwner_ends_with?: InputMaybe<Scalars['String']>;
  nextOwner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextOwner_gt?: InputMaybe<Scalars['String']>;
  nextOwner_gte?: InputMaybe<Scalars['String']>;
  nextOwner_in?: InputMaybe<Array<Scalars['String']>>;
  nextOwner_lt?: InputMaybe<Scalars['String']>;
  nextOwner_lte?: InputMaybe<Scalars['String']>;
  nextOwner_not?: InputMaybe<Scalars['String']>;
  nextOwner_not_contains?: InputMaybe<Scalars['String']>;
  nextOwner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nextOwner_not_ends_with?: InputMaybe<Scalars['String']>;
  nextOwner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextOwner_not_in?: InputMaybe<Array<Scalars['String']>>;
  nextOwner_not_starts_with?: InputMaybe<Scalars['String']>;
  nextOwner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextOwner_starts_with?: InputMaybe<Scalars['String']>;
  nextOwner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultOwnershipTransferredFilter>>>;
  prevOwner?: InputMaybe<Scalars['String']>;
  prevOwner_?: InputMaybe<AccountFilter>;
  prevOwner_contains?: InputMaybe<Scalars['String']>;
  prevOwner_contains_nocase?: InputMaybe<Scalars['String']>;
  prevOwner_ends_with?: InputMaybe<Scalars['String']>;
  prevOwner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  prevOwner_gt?: InputMaybe<Scalars['String']>;
  prevOwner_gte?: InputMaybe<Scalars['String']>;
  prevOwner_in?: InputMaybe<Array<Scalars['String']>>;
  prevOwner_lt?: InputMaybe<Scalars['String']>;
  prevOwner_lte?: InputMaybe<Scalars['String']>;
  prevOwner_not?: InputMaybe<Scalars['String']>;
  prevOwner_not_contains?: InputMaybe<Scalars['String']>;
  prevOwner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  prevOwner_not_ends_with?: InputMaybe<Scalars['String']>;
  prevOwner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  prevOwner_not_in?: InputMaybe<Array<Scalars['String']>>;
  prevOwner_not_starts_with?: InputMaybe<Scalars['String']>;
  prevOwner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  prevOwner_starts_with?: InputMaybe<Scalars['String']>;
  prevOwner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultOwnershipTransferredOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  NEXTOWNER = 'nextOwner',
  NEXTOWNER__ASSETMANAGERSINCE = 'nextOwner__assetManagerSince',
  NEXTOWNER__AUTHUSERSINCE = 'nextOwner__authUserSince',
  NEXTOWNER__DEPOSITORSINCE = 'nextOwner__depositorSince',
  NEXTOWNER__ID = 'nextOwner__id',
  NEXTOWNER__ISASSETMANAGER = 'nextOwner__isAssetManager',
  NEXTOWNER__ISAUTHUSER = 'nextOwner__isAuthUser',
  NEXTOWNER__ISDEPOSITOR = 'nextOwner__isDepositor',
  NEXTOWNER__ISOWNER = 'nextOwner__isOwner',
  NEXTOWNER__OWNERSINCE = 'nextOwner__ownerSince',
  PREVOWNER = 'prevOwner',
  PREVOWNER__ASSETMANAGERSINCE = 'prevOwner__assetManagerSince',
  PREVOWNER__AUTHUSERSINCE = 'prevOwner__authUserSince',
  PREVOWNER__DEPOSITORSINCE = 'prevOwner__depositorSince',
  PREVOWNER__ID = 'prevOwner__id',
  PREVOWNER__ISASSETMANAGER = 'prevOwner__isAssetManager',
  PREVOWNER__ISAUTHUSER = 'prevOwner__isAuthUser',
  PREVOWNER__ISDEPOSITOR = 'prevOwner__isDepositor',
  PREVOWNER__ISOWNER = 'prevOwner__isOwner',
  PREVOWNER__OWNERSINCE = 'prevOwner__ownerSince',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultReconfigurationCancelled = Activity & VaultActivity & {
  __typename: 'VaultReconfigurationCancelled';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  reconfiguration: Reconfiguration;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultReconfigurationCancelledFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultReconfigurationCancelledFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  or?: InputMaybe<Array<InputMaybe<VaultReconfigurationCancelledFilter>>>;
  reconfiguration?: InputMaybe<Scalars['String']>;
  reconfiguration_?: InputMaybe<ReconfigurationFilter>;
  reconfiguration_contains?: InputMaybe<Scalars['String']>;
  reconfiguration_contains_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_ends_with?: InputMaybe<Scalars['String']>;
  reconfiguration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_gt?: InputMaybe<Scalars['String']>;
  reconfiguration_gte?: InputMaybe<Scalars['String']>;
  reconfiguration_in?: InputMaybe<Array<Scalars['String']>>;
  reconfiguration_lt?: InputMaybe<Scalars['String']>;
  reconfiguration_lte?: InputMaybe<Scalars['String']>;
  reconfiguration_not?: InputMaybe<Scalars['String']>;
  reconfiguration_not_contains?: InputMaybe<Scalars['String']>;
  reconfiguration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_not_ends_with?: InputMaybe<Scalars['String']>;
  reconfiguration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_not_in?: InputMaybe<Array<Scalars['String']>>;
  reconfiguration_not_starts_with?: InputMaybe<Scalars['String']>;
  reconfiguration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_starts_with?: InputMaybe<Scalars['String']>;
  reconfiguration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultReconfigurationCancelledOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  RECONFIGURATION = 'reconfiguration',
  RECONFIGURATION__CANCELLED = 'reconfiguration__cancelled',
  RECONFIGURATION__CANCELLEDTIMESTAMP = 'reconfiguration__cancelledTimestamp',
  RECONFIGURATION__EXECUTABLETIMESTAMP = 'reconfiguration__executableTimestamp',
  RECONFIGURATION__EXECUTED = 'reconfiguration__executed',
  RECONFIGURATION__EXECUTEDTIMESTAMP = 'reconfiguration__executedTimestamp',
  RECONFIGURATION__ID = 'reconfiguration__id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultReconfigurationExecuted = Activity & VaultActivity & {
  __typename: 'VaultReconfigurationExecuted';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  nextComptroller: Comptroller;
  reconfiguration: Reconfiguration;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultReconfigurationExecutedFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultReconfigurationExecutedFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nextComptroller?: InputMaybe<Scalars['String']>;
  nextComptroller_?: InputMaybe<ComptrollerFilter>;
  nextComptroller_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_gt?: InputMaybe<Scalars['String']>;
  nextComptroller_gte?: InputMaybe<Scalars['String']>;
  nextComptroller_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_lt?: InputMaybe<Scalars['String']>;
  nextComptroller_lte?: InputMaybe<Scalars['String']>;
  nextComptroller_not?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultReconfigurationExecutedFilter>>>;
  reconfiguration?: InputMaybe<Scalars['String']>;
  reconfiguration_?: InputMaybe<ReconfigurationFilter>;
  reconfiguration_contains?: InputMaybe<Scalars['String']>;
  reconfiguration_contains_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_ends_with?: InputMaybe<Scalars['String']>;
  reconfiguration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_gt?: InputMaybe<Scalars['String']>;
  reconfiguration_gte?: InputMaybe<Scalars['String']>;
  reconfiguration_in?: InputMaybe<Array<Scalars['String']>>;
  reconfiguration_lt?: InputMaybe<Scalars['String']>;
  reconfiguration_lte?: InputMaybe<Scalars['String']>;
  reconfiguration_not?: InputMaybe<Scalars['String']>;
  reconfiguration_not_contains?: InputMaybe<Scalars['String']>;
  reconfiguration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_not_ends_with?: InputMaybe<Scalars['String']>;
  reconfiguration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_not_in?: InputMaybe<Array<Scalars['String']>>;
  reconfiguration_not_starts_with?: InputMaybe<Scalars['String']>;
  reconfiguration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_starts_with?: InputMaybe<Scalars['String']>;
  reconfiguration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultReconfigurationExecutedOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  NEXTCOMPTROLLER = 'nextComptroller',
  NEXTCOMPTROLLER__ACTIVATION = 'nextComptroller__activation',
  NEXTCOMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'nextComptroller__autoProtocolFeeSharesBuyback',
  NEXTCOMPTROLLER__CREATION = 'nextComptroller__creation',
  NEXTCOMPTROLLER__DESTRUCTION = 'nextComptroller__destruction',
  NEXTCOMPTROLLER__ID = 'nextComptroller__id',
  NEXTCOMPTROLLER__SHARESACTIONTIMELOCK = 'nextComptroller__sharesActionTimelock',
  NEXTCOMPTROLLER__STATUS = 'nextComptroller__status',
  RECONFIGURATION = 'reconfiguration',
  RECONFIGURATION__CANCELLED = 'reconfiguration__cancelled',
  RECONFIGURATION__CANCELLEDTIMESTAMP = 'reconfiguration__cancelledTimestamp',
  RECONFIGURATION__EXECUTABLETIMESTAMP = 'reconfiguration__executableTimestamp',
  RECONFIGURATION__EXECUTED = 'reconfiguration__executed',
  RECONFIGURATION__EXECUTEDTIMESTAMP = 'reconfiguration__executedTimestamp',
  RECONFIGURATION__ID = 'reconfiguration__id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultReconfigurationSignalled = Activity & VaultActivity & {
  __typename: 'VaultReconfigurationSignalled';
  activityCategories: Array<ActivityCategory>;
  activityCounter: Scalars['Int'];
  activityType: ActivityType;
  id: Scalars['ID'];
  nextComptroller: Comptroller;
  reconfiguration: Reconfiguration;
  timestamp: Scalars['Int'];
  vault: Vault;
};

export type VaultReconfigurationSignalledFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  activityCategories?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains?: InputMaybe<Array<ActivityCategory>>;
  activityCategories_not_contains_nocase?: InputMaybe<Array<ActivityCategory>>;
  activityCounter?: InputMaybe<Scalars['Int']>;
  activityCounter_gt?: InputMaybe<Scalars['Int']>;
  activityCounter_gte?: InputMaybe<Scalars['Int']>;
  activityCounter_in?: InputMaybe<Array<Scalars['Int']>>;
  activityCounter_lt?: InputMaybe<Scalars['Int']>;
  activityCounter_lte?: InputMaybe<Scalars['Int']>;
  activityCounter_not?: InputMaybe<Scalars['Int']>;
  activityCounter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  activityType?: InputMaybe<ActivityType>;
  activityType_in?: InputMaybe<Array<ActivityType>>;
  activityType_not?: InputMaybe<ActivityType>;
  activityType_not_in?: InputMaybe<Array<ActivityType>>;
  and?: InputMaybe<Array<InputMaybe<VaultReconfigurationSignalledFilter>>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  nextComptroller?: InputMaybe<Scalars['String']>;
  nextComptroller_?: InputMaybe<ComptrollerFilter>;
  nextComptroller_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_gt?: InputMaybe<Scalars['String']>;
  nextComptroller_gte?: InputMaybe<Scalars['String']>;
  nextComptroller_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_lt?: InputMaybe<Scalars['String']>;
  nextComptroller_lte?: InputMaybe<Scalars['String']>;
  nextComptroller_not?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains?: InputMaybe<Scalars['String']>;
  nextComptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  nextComptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with?: InputMaybe<Scalars['String']>;
  nextComptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultReconfigurationSignalledFilter>>>;
  reconfiguration?: InputMaybe<Scalars['String']>;
  reconfiguration_?: InputMaybe<ReconfigurationFilter>;
  reconfiguration_contains?: InputMaybe<Scalars['String']>;
  reconfiguration_contains_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_ends_with?: InputMaybe<Scalars['String']>;
  reconfiguration_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_gt?: InputMaybe<Scalars['String']>;
  reconfiguration_gte?: InputMaybe<Scalars['String']>;
  reconfiguration_in?: InputMaybe<Array<Scalars['String']>>;
  reconfiguration_lt?: InputMaybe<Scalars['String']>;
  reconfiguration_lte?: InputMaybe<Scalars['String']>;
  reconfiguration_not?: InputMaybe<Scalars['String']>;
  reconfiguration_not_contains?: InputMaybe<Scalars['String']>;
  reconfiguration_not_contains_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_not_ends_with?: InputMaybe<Scalars['String']>;
  reconfiguration_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_not_in?: InputMaybe<Array<Scalars['String']>>;
  reconfiguration_not_starts_with?: InputMaybe<Scalars['String']>;
  reconfiguration_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  reconfiguration_starts_with?: InputMaybe<Scalars['String']>;
  reconfiguration_starts_with_nocase?: InputMaybe<Scalars['String']>;
  timestamp?: InputMaybe<Scalars['Int']>;
  timestamp_gt?: InputMaybe<Scalars['Int']>;
  timestamp_gte?: InputMaybe<Scalars['Int']>;
  timestamp_in?: InputMaybe<Array<Scalars['Int']>>;
  timestamp_lt?: InputMaybe<Scalars['Int']>;
  timestamp_lte?: InputMaybe<Scalars['Int']>;
  timestamp_not?: InputMaybe<Scalars['Int']>;
  timestamp_not_in?: InputMaybe<Array<Scalars['Int']>>;
  vault?: InputMaybe<Scalars['String']>;
  vault_?: InputMaybe<VaultFilter>;
  vault_contains?: InputMaybe<Scalars['String']>;
  vault_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_ends_with?: InputMaybe<Scalars['String']>;
  vault_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_gt?: InputMaybe<Scalars['String']>;
  vault_gte?: InputMaybe<Scalars['String']>;
  vault_in?: InputMaybe<Array<Scalars['String']>>;
  vault_lt?: InputMaybe<Scalars['String']>;
  vault_lte?: InputMaybe<Scalars['String']>;
  vault_not?: InputMaybe<Scalars['String']>;
  vault_not_contains?: InputMaybe<Scalars['String']>;
  vault_not_contains_nocase?: InputMaybe<Scalars['String']>;
  vault_not_ends_with?: InputMaybe<Scalars['String']>;
  vault_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  vault_not_in?: InputMaybe<Array<Scalars['String']>>;
  vault_not_starts_with?: InputMaybe<Scalars['String']>;
  vault_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  vault_starts_with?: InputMaybe<Scalars['String']>;
  vault_starts_with_nocase?: InputMaybe<Scalars['String']>;
};

export enum VaultReconfigurationSignalledOrderBy {
  ACTIVITYCATEGORIES = 'activityCategories',
  ACTIVITYCOUNTER = 'activityCounter',
  ACTIVITYTYPE = 'activityType',
  ID = 'id',
  NEXTCOMPTROLLER = 'nextComptroller',
  NEXTCOMPTROLLER__ACTIVATION = 'nextComptroller__activation',
  NEXTCOMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'nextComptroller__autoProtocolFeeSharesBuyback',
  NEXTCOMPTROLLER__CREATION = 'nextComptroller__creation',
  NEXTCOMPTROLLER__DESTRUCTION = 'nextComptroller__destruction',
  NEXTCOMPTROLLER__ID = 'nextComptroller__id',
  NEXTCOMPTROLLER__SHARESACTIONTIMELOCK = 'nextComptroller__sharesActionTimelock',
  NEXTCOMPTROLLER__STATUS = 'nextComptroller__status',
  RECONFIGURATION = 'reconfiguration',
  RECONFIGURATION__CANCELLED = 'reconfiguration__cancelled',
  RECONFIGURATION__CANCELLEDTIMESTAMP = 'reconfiguration__cancelledTimestamp',
  RECONFIGURATION__EXECUTABLETIMESTAMP = 'reconfiguration__executableTimestamp',
  RECONFIGURATION__EXECUTED = 'reconfiguration__executed',
  RECONFIGURATION__EXECUTEDTIMESTAMP = 'reconfiguration__executedTimestamp',
  RECONFIGURATION__ID = 'reconfiguration__id',
  TIMESTAMP = 'timestamp',
  VAULT = 'vault',
  VAULT__COUNTER = 'vault__counter',
  VAULT__DEPOSITCOUNT = 'vault__depositCount',
  VAULT__FREELYTRANSFERABLESHARES = 'vault__freelyTransferableShares',
  VAULT__ID = 'vault__id',
  VAULT__INCEPTION = 'vault__inception',
  VAULT__LASTASSETUPDATE = 'vault__lastAssetUpdate',
  VAULT__NAME = 'vault__name',
  VAULT__SYMBOL = 'vault__symbol'
}

export type VaultFilter = {
  /** Filter for the block changed event. */
  _change_block?: InputMaybe<BlockChangedFilter>;
  and?: InputMaybe<Array<InputMaybe<VaultFilter>>>;
  assetManagers?: InputMaybe<Array<Scalars['String']>>;
  assetManagers_?: InputMaybe<AccountFilter>;
  assetManagers_contains?: InputMaybe<Array<Scalars['String']>>;
  assetManagers_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  assetManagers_not?: InputMaybe<Array<Scalars['String']>>;
  assetManagers_not_contains?: InputMaybe<Array<Scalars['String']>>;
  assetManagers_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  comptroller?: InputMaybe<Scalars['String']>;
  comptroller_?: InputMaybe<ComptrollerFilter>;
  comptroller_contains?: InputMaybe<Scalars['String']>;
  comptroller_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_gt?: InputMaybe<Scalars['String']>;
  comptroller_gte?: InputMaybe<Scalars['String']>;
  comptroller_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_lt?: InputMaybe<Scalars['String']>;
  comptroller_lte?: InputMaybe<Scalars['String']>;
  comptroller_not?: InputMaybe<Scalars['String']>;
  comptroller_not_contains?: InputMaybe<Scalars['String']>;
  comptroller_not_contains_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with?: InputMaybe<Scalars['String']>;
  comptroller_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_not_in?: InputMaybe<Array<Scalars['String']>>;
  comptroller_not_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptroller_starts_with?: InputMaybe<Scalars['String']>;
  comptroller_starts_with_nocase?: InputMaybe<Scalars['String']>;
  comptrollers_?: InputMaybe<ComptrollerFilter>;
  counter?: InputMaybe<Scalars['Int']>;
  counter_gt?: InputMaybe<Scalars['Int']>;
  counter_gte?: InputMaybe<Scalars['Int']>;
  counter_in?: InputMaybe<Array<Scalars['Int']>>;
  counter_lt?: InputMaybe<Scalars['Int']>;
  counter_lte?: InputMaybe<Scalars['Int']>;
  counter_not?: InputMaybe<Scalars['Int']>;
  counter_not_in?: InputMaybe<Array<Scalars['Int']>>;
  creator?: InputMaybe<Scalars['String']>;
  creator_?: InputMaybe<AccountFilter>;
  creator_contains?: InputMaybe<Scalars['String']>;
  creator_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_ends_with?: InputMaybe<Scalars['String']>;
  creator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_gt?: InputMaybe<Scalars['String']>;
  creator_gte?: InputMaybe<Scalars['String']>;
  creator_in?: InputMaybe<Array<Scalars['String']>>;
  creator_lt?: InputMaybe<Scalars['String']>;
  creator_lte?: InputMaybe<Scalars['String']>;
  creator_not?: InputMaybe<Scalars['String']>;
  creator_not_contains?: InputMaybe<Scalars['String']>;
  creator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  creator_not_ends_with?: InputMaybe<Scalars['String']>;
  creator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  creator_not_in?: InputMaybe<Array<Scalars['String']>>;
  creator_not_starts_with?: InputMaybe<Scalars['String']>;
  creator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  creator_starts_with?: InputMaybe<Scalars['String']>;
  creator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  depositCount?: InputMaybe<Scalars['Int']>;
  depositCount_gt?: InputMaybe<Scalars['Int']>;
  depositCount_gte?: InputMaybe<Scalars['Int']>;
  depositCount_in?: InputMaybe<Array<Scalars['Int']>>;
  depositCount_lt?: InputMaybe<Scalars['Int']>;
  depositCount_lte?: InputMaybe<Scalars['Int']>;
  depositCount_not?: InputMaybe<Scalars['Int']>;
  depositCount_not_in?: InputMaybe<Array<Scalars['Int']>>;
  deposits_?: InputMaybe<DepositFilter>;
  externalPositions_?: InputMaybe<ExternalPositionFilter>;
  freelyTransferableShares?: InputMaybe<Scalars['Boolean']>;
  freelyTransferableShares_in?: InputMaybe<Array<Scalars['Boolean']>>;
  freelyTransferableShares_not?: InputMaybe<Scalars['Boolean']>;
  freelyTransferableShares_not_in?: InputMaybe<Array<Scalars['Boolean']>>;
  id?: InputMaybe<Scalars['ID']>;
  id_gt?: InputMaybe<Scalars['ID']>;
  id_gte?: InputMaybe<Scalars['ID']>;
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  id_lt?: InputMaybe<Scalars['ID']>;
  id_lte?: InputMaybe<Scalars['ID']>;
  id_not?: InputMaybe<Scalars['ID']>;
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  inception?: InputMaybe<Scalars['Int']>;
  inception_gt?: InputMaybe<Scalars['Int']>;
  inception_gte?: InputMaybe<Scalars['Int']>;
  inception_in?: InputMaybe<Array<Scalars['Int']>>;
  inception_lt?: InputMaybe<Scalars['Int']>;
  inception_lte?: InputMaybe<Scalars['Int']>;
  inception_not?: InputMaybe<Scalars['Int']>;
  inception_not_in?: InputMaybe<Array<Scalars['Int']>>;
  lastAssetUpdate?: InputMaybe<Scalars['Int']>;
  lastAssetUpdate_gt?: InputMaybe<Scalars['Int']>;
  lastAssetUpdate_gte?: InputMaybe<Scalars['Int']>;
  lastAssetUpdate_in?: InputMaybe<Array<Scalars['Int']>>;
  lastAssetUpdate_lt?: InputMaybe<Scalars['Int']>;
  lastAssetUpdate_lte?: InputMaybe<Scalars['Int']>;
  lastAssetUpdate_not?: InputMaybe<Scalars['Int']>;
  lastAssetUpdate_not_in?: InputMaybe<Array<Scalars['Int']>>;
  migrations_?: InputMaybe<MigrationFilter>;
  migrator?: InputMaybe<Scalars['String']>;
  migrator_?: InputMaybe<AccountFilter>;
  migrator_contains?: InputMaybe<Scalars['String']>;
  migrator_contains_nocase?: InputMaybe<Scalars['String']>;
  migrator_ends_with?: InputMaybe<Scalars['String']>;
  migrator_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migrator_gt?: InputMaybe<Scalars['String']>;
  migrator_gte?: InputMaybe<Scalars['String']>;
  migrator_in?: InputMaybe<Array<Scalars['String']>>;
  migrator_lt?: InputMaybe<Scalars['String']>;
  migrator_lte?: InputMaybe<Scalars['String']>;
  migrator_not?: InputMaybe<Scalars['String']>;
  migrator_not_contains?: InputMaybe<Scalars['String']>;
  migrator_not_contains_nocase?: InputMaybe<Scalars['String']>;
  migrator_not_ends_with?: InputMaybe<Scalars['String']>;
  migrator_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  migrator_not_in?: InputMaybe<Array<Scalars['String']>>;
  migrator_not_starts_with?: InputMaybe<Scalars['String']>;
  migrator_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  migrator_starts_with?: InputMaybe<Scalars['String']>;
  migrator_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name?: InputMaybe<Scalars['String']>;
  name_contains?: InputMaybe<Scalars['String']>;
  name_contains_nocase?: InputMaybe<Scalars['String']>;
  name_ends_with?: InputMaybe<Scalars['String']>;
  name_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_gt?: InputMaybe<Scalars['String']>;
  name_gte?: InputMaybe<Scalars['String']>;
  name_in?: InputMaybe<Array<Scalars['String']>>;
  name_lt?: InputMaybe<Scalars['String']>;
  name_lte?: InputMaybe<Scalars['String']>;
  name_not?: InputMaybe<Scalars['String']>;
  name_not_contains?: InputMaybe<Scalars['String']>;
  name_not_contains_nocase?: InputMaybe<Scalars['String']>;
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  name_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  name_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  name_starts_with?: InputMaybe<Scalars['String']>;
  name_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner?: InputMaybe<Scalars['String']>;
  nominatedOwner_?: InputMaybe<AccountFilter>;
  nominatedOwner_contains?: InputMaybe<Scalars['String']>;
  nominatedOwner_contains_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_ends_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_gt?: InputMaybe<Scalars['String']>;
  nominatedOwner_gte?: InputMaybe<Scalars['String']>;
  nominatedOwner_in?: InputMaybe<Array<Scalars['String']>>;
  nominatedOwner_lt?: InputMaybe<Scalars['String']>;
  nominatedOwner_lte?: InputMaybe<Scalars['String']>;
  nominatedOwner_not?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_contains?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_ends_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_in?: InputMaybe<Array<Scalars['String']>>;
  nominatedOwner_not_starts_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  nominatedOwner_starts_with?: InputMaybe<Scalars['String']>;
  nominatedOwner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  or?: InputMaybe<Array<InputMaybe<VaultFilter>>>;
  owner?: InputMaybe<Scalars['String']>;
  owner_?: InputMaybe<AccountFilter>;
  owner_contains?: InputMaybe<Scalars['String']>;
  owner_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_ends_with?: InputMaybe<Scalars['String']>;
  owner_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_gt?: InputMaybe<Scalars['String']>;
  owner_gte?: InputMaybe<Scalars['String']>;
  owner_in?: InputMaybe<Array<Scalars['String']>>;
  owner_lt?: InputMaybe<Scalars['String']>;
  owner_lte?: InputMaybe<Scalars['String']>;
  owner_not?: InputMaybe<Scalars['String']>;
  owner_not_contains?: InputMaybe<Scalars['String']>;
  owner_not_contains_nocase?: InputMaybe<Scalars['String']>;
  owner_not_ends_with?: InputMaybe<Scalars['String']>;
  owner_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  owner_not_in?: InputMaybe<Array<Scalars['String']>>;
  owner_not_starts_with?: InputMaybe<Scalars['String']>;
  owner_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  owner_starts_with?: InputMaybe<Scalars['String']>;
  owner_starts_with_nocase?: InputMaybe<Scalars['String']>;
  protocolFee?: InputMaybe<Scalars['String']>;
  protocolFeeBurned_?: InputMaybe<ProtocolFeeBurnedFilter>;
  protocolFeeSharesPaid_?: InputMaybe<ProtocolFeePaidFilter>;
  protocolFee_?: InputMaybe<ProtocolFeeFilter>;
  protocolFee_contains?: InputMaybe<Scalars['String']>;
  protocolFee_contains_nocase?: InputMaybe<Scalars['String']>;
  protocolFee_ends_with?: InputMaybe<Scalars['String']>;
  protocolFee_ends_with_nocase?: InputMaybe<Scalars['String']>;
  protocolFee_gt?: InputMaybe<Scalars['String']>;
  protocolFee_gte?: InputMaybe<Scalars['String']>;
  protocolFee_in?: InputMaybe<Array<Scalars['String']>>;
  protocolFee_lt?: InputMaybe<Scalars['String']>;
  protocolFee_lte?: InputMaybe<Scalars['String']>;
  protocolFee_not?: InputMaybe<Scalars['String']>;
  protocolFee_not_contains?: InputMaybe<Scalars['String']>;
  protocolFee_not_contains_nocase?: InputMaybe<Scalars['String']>;
  protocolFee_not_ends_with?: InputMaybe<Scalars['String']>;
  protocolFee_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  protocolFee_not_in?: InputMaybe<Array<Scalars['String']>>;
  protocolFee_not_starts_with?: InputMaybe<Scalars['String']>;
  protocolFee_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  protocolFee_starts_with?: InputMaybe<Scalars['String']>;
  protocolFee_starts_with_nocase?: InputMaybe<Scalars['String']>;
  reconfigurations_?: InputMaybe<ReconfigurationFilter>;
  release?: InputMaybe<Scalars['String']>;
  release_?: InputMaybe<ReleaseFilter>;
  release_contains?: InputMaybe<Scalars['String']>;
  release_contains_nocase?: InputMaybe<Scalars['String']>;
  release_ends_with?: InputMaybe<Scalars['String']>;
  release_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_gt?: InputMaybe<Scalars['String']>;
  release_gte?: InputMaybe<Scalars['String']>;
  release_in?: InputMaybe<Array<Scalars['String']>>;
  release_lt?: InputMaybe<Scalars['String']>;
  release_lte?: InputMaybe<Scalars['String']>;
  release_not?: InputMaybe<Scalars['String']>;
  release_not_contains?: InputMaybe<Scalars['String']>;
  release_not_contains_nocase?: InputMaybe<Scalars['String']>;
  release_not_ends_with?: InputMaybe<Scalars['String']>;
  release_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  release_not_in?: InputMaybe<Array<Scalars['String']>>;
  release_not_starts_with?: InputMaybe<Scalars['String']>;
  release_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  release_starts_with?: InputMaybe<Scalars['String']>;
  release_starts_with_nocase?: InputMaybe<Scalars['String']>;
  sharesChanges_?: InputMaybe<SharesChangeFilter>;
  symbol?: InputMaybe<Scalars['String']>;
  symbol_contains?: InputMaybe<Scalars['String']>;
  symbol_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_ends_with?: InputMaybe<Scalars['String']>;
  symbol_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_gt?: InputMaybe<Scalars['String']>;
  symbol_gte?: InputMaybe<Scalars['String']>;
  symbol_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_lt?: InputMaybe<Scalars['String']>;
  symbol_lte?: InputMaybe<Scalars['String']>;
  symbol_not?: InputMaybe<Scalars['String']>;
  symbol_not_contains?: InputMaybe<Scalars['String']>;
  symbol_not_contains_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with?: InputMaybe<Scalars['String']>;
  symbol_not_ends_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_not_in?: InputMaybe<Array<Scalars['String']>>;
  symbol_not_starts_with?: InputMaybe<Scalars['String']>;
  symbol_not_starts_with_nocase?: InputMaybe<Scalars['String']>;
  symbol_starts_with?: InputMaybe<Scalars['String']>;
  symbol_starts_with_nocase?: InputMaybe<Scalars['String']>;
  trackedAssets?: InputMaybe<Array<Scalars['String']>>;
  trackedAssets_?: InputMaybe<AssetFilter>;
  trackedAssets_contains?: InputMaybe<Array<Scalars['String']>>;
  trackedAssets_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  trackedAssets_not?: InputMaybe<Array<Scalars['String']>>;
  trackedAssets_not_contains?: InputMaybe<Array<Scalars['String']>>;
  trackedAssets_not_contains_nocase?: InputMaybe<Array<Scalars['String']>>;
  trades_?: InputMaybe<TradeFilter>;
  vaultActivity_?: InputMaybe<VaultActivityFilter>;
};

export enum VaultOrderBy {
  ASSETMANAGERS = 'assetManagers',
  COMPTROLLER = 'comptroller',
  COMPTROLLER__ACTIVATION = 'comptroller__activation',
  COMPTROLLER__AUTOPROTOCOLFEESHARESBUYBACK = 'comptroller__autoProtocolFeeSharesBuyback',
  COMPTROLLER__CREATION = 'comptroller__creation',
  COMPTROLLER__DESTRUCTION = 'comptroller__destruction',
  COMPTROLLER__ID = 'comptroller__id',
  COMPTROLLER__SHARESACTIONTIMELOCK = 'comptroller__sharesActionTimelock',
  COMPTROLLER__STATUS = 'comptroller__status',
  COMPTROLLERS = 'comptrollers',
  COUNTER = 'counter',
  CREATOR = 'creator',
  CREATOR__ASSETMANAGERSINCE = 'creator__assetManagerSince',
  CREATOR__AUTHUSERSINCE = 'creator__authUserSince',
  CREATOR__DEPOSITORSINCE = 'creator__depositorSince',
  CREATOR__ID = 'creator__id',
  CREATOR__ISASSETMANAGER = 'creator__isAssetManager',
  CREATOR__ISAUTHUSER = 'creator__isAuthUser',
  CREATOR__ISDEPOSITOR = 'creator__isDepositor',
  CREATOR__ISOWNER = 'creator__isOwner',
  CREATOR__OWNERSINCE = 'creator__ownerSince',
  DEPOSITCOUNT = 'depositCount',
  DEPOSITS = 'deposits',
  EXTERNALPOSITIONS = 'externalPositions',
  FREELYTRANSFERABLESHARES = 'freelyTransferableShares',
  ID = 'id',
  INCEPTION = 'inception',
  LASTASSETUPDATE = 'lastAssetUpdate',
  MIGRATIONS = 'migrations',
  MIGRATOR = 'migrator',
  MIGRATOR__ASSETMANAGERSINCE = 'migrator__assetManagerSince',
  MIGRATOR__AUTHUSERSINCE = 'migrator__authUserSince',
  MIGRATOR__DEPOSITORSINCE = 'migrator__depositorSince',
  MIGRATOR__ID = 'migrator__id',
  MIGRATOR__ISASSETMANAGER = 'migrator__isAssetManager',
  MIGRATOR__ISAUTHUSER = 'migrator__isAuthUser',
  MIGRATOR__ISDEPOSITOR = 'migrator__isDepositor',
  MIGRATOR__ISOWNER = 'migrator__isOwner',
  MIGRATOR__OWNERSINCE = 'migrator__ownerSince',
  NAME = 'name',
  NOMINATEDOWNER = 'nominatedOwner',
  NOMINATEDOWNER__ASSETMANAGERSINCE = 'nominatedOwner__assetManagerSince',
  NOMINATEDOWNER__AUTHUSERSINCE = 'nominatedOwner__authUserSince',
  NOMINATEDOWNER__DEPOSITORSINCE = 'nominatedOwner__depositorSince',
  NOMINATEDOWNER__ID = 'nominatedOwner__id',
  NOMINATEDOWNER__ISASSETMANAGER = 'nominatedOwner__isAssetManager',
  NOMINATEDOWNER__ISAUTHUSER = 'nominatedOwner__isAuthUser',
  NOMINATEDOWNER__ISDEPOSITOR = 'nominatedOwner__isDepositor',
  NOMINATEDOWNER__ISOWNER = 'nominatedOwner__isOwner',
  NOMINATEDOWNER__OWNERSINCE = 'nominatedOwner__ownerSince',
  OWNER = 'owner',
  OWNER__ASSETMANAGERSINCE = 'owner__assetManagerSince',
  OWNER__AUTHUSERSINCE = 'owner__authUserSince',
  OWNER__DEPOSITORSINCE = 'owner__depositorSince',
  OWNER__ID = 'owner__id',
  OWNER__ISASSETMANAGER = 'owner__isAssetManager',
  OWNER__ISAUTHUSER = 'owner__isAuthUser',
  OWNER__ISDEPOSITOR = 'owner__isDepositor',
  OWNER__ISOWNER = 'owner__isOwner',
  OWNER__OWNERSINCE = 'owner__ownerSince',
  PROTOCOLFEE = 'protocolFee',
  PROTOCOLFEEBURNED = 'protocolFeeBurned',
  PROTOCOLFEESHARESPAID = 'protocolFeeSharesPaid',
  PROTOCOLFEE__FEETRACKER = 'protocolFee__feeTracker',
  PROTOCOLFEE__ID = 'protocolFee__id',
  PROTOCOLFEE__LASTPAID = 'protocolFee__lastPaid',
  PROTOCOLFEE__RATE = 'protocolFee__rate',
  RECONFIGURATIONS = 'reconfigurations',
  RELEASE = 'release',
  RELEASE__CLOSE = 'release__close',
  RELEASE__CURRENT = 'release__current',
  RELEASE__DUSTTOLERANCEFORASSETSINWETH = 'release__dustToleranceForAssetsInWeth',
  RELEASE__DUSTTOLERANCEFOREXTERNALPOSITIONSINWETH = 'release__dustToleranceForExternalPositionsInWeth',
  RELEASE__ID = 'release__id',
  RELEASE__ISLIVE = 'release__isLive',
  RELEASE__OPEN = 'release__open',
  SHARESCHANGES = 'sharesChanges',
  SYMBOL = 'symbol',
  TRACKEDASSETS = 'trackedAssets',
  TRADES = 'trades',
  VAULTACTIVITY = 'vaultActivity'
}

export type Block = {
  __typename: '_Block_';
  /** The hash of the block */
  hash?: Maybe<Scalars['Bytes']>;
  /** The block number */
  number: Scalars['Int'];
  /** Integer representation of the timestamp stored in blocks for the chain */
  timestamp?: Maybe<Scalars['Int']>;
};

/** The type for the top-level _meta field */
export type Meta = {
  __typename: '_Meta_';
  /**
   * Information about a specific subgraph block. The hash of the block
   * will be null if the _meta field has a block constraint that asks for
   * a block number. It will be filled if the _meta field has no block constraint
   * and therefore asks for the latest  block
   *
   */
  block: Block;
  /** The deployment ID */
  deployment: Scalars['String'];
  /** If `true`, the subgraph encountered indexing errors at some past block */
  hasIndexingErrors: Scalars['Boolean'];
};

export enum SubgraphErrorPolicy {
  /** Data will be returned even if the subgraph has indexing errors */
  ALLOW = 'allow',
  /** If the subgraph has indexing errors, data will be omitted. The default. */
  DENY = 'deny'
}

export type VaultFragment = { __typename: 'Vault', id: string, name: string, symbol: string, owner: { __typename: 'Account', id: string }, comptroller: { __typename: 'Comptroller', id: string, denomination: { __typename: 'Asset', id: string, name: string, symbol: string }, fees: Array<{ __typename: 'EntranceRateBurnFee', id: string, feeType: FeeType, rate: string } | { __typename: 'EntranceRateDirectFee', id: string, feeType: FeeType, rate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'ExitRateBurnFee', feeType: FeeType, id: string, inKindRate: string, specificAssetsRate: string } | { __typename: 'ExitRateDirectFee', id: string, feeType: FeeType, inKindRate: string, specificAssetsRate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'ManagementFee', feeType: FeeType, scaledPerSecondRate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'MinSharesSupplyFee', feeType: FeeType, id: string } | { __typename: 'PerformanceFee', feeType: FeeType, highWaterMark: string, rate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'UnknownFee', id: string, feeType: FeeType }>, policies: Array<{ __typename: 'AdapterBlacklistPolicy', id: string, policyType: PolicyType } | { __typename: 'AdapterWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'AllowedAdapterIncomingAssetsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedAdaptersPerManagerPolicy', id: string, policyType: PolicyType, userAddressLists: Array<{ __typename: 'UserAddressList', id: string, userAddress: string, addressLists: Array<{ __typename: 'AddressList', items: Array<string>, id: string }> }> } | { __typename: 'AllowedAdaptersPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', items: Array<string>, id: string }> } | { __typename: 'AllowedAssetsForRedemptionPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedDepositRecipientsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedExternalPositionTypesPerManagerPolicy', id: string, policyType: PolicyType, userUintLists: Array<{ __typename: 'UserUintList', id: string, userAddress: string, uintLists: Array<{ __typename: 'UintList', id: string, items: Array<string> }> }> } | { __typename: 'AllowedExternalPositionTypesPolicy', id: string, policyType: PolicyType, externalPositionTypes: Array<string> } | { __typename: 'AllowedSharesTransferRecipientsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AssetBlacklistPolicy', id: string, policyType: PolicyType } | { __typename: 'AssetWhitelistPolicy', policyType: PolicyType, id: string } | { __typename: 'BuySharesCallerWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'CumulativeSlippageTolerancePolicy', id: string, cumulativeSlippage: string, lastSlippageTimestamp: number, policyType: PolicyType, tolerance: string } | { __typename: 'DepositorWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'GuaranteedRedemptionPolicy', policyType: PolicyType, id: string } | { __typename: 'MaxConcentrationPolicy', id: string, policyType: PolicyType } | { __typename: 'MinAssetBalancesPostRedemptionPolicy', id: string, policyType: PolicyType, assetBalances: Array<{ __typename: 'AssetBalance', id: string, amount: string, asset: { __typename: 'Asset', name: string, id: string, symbol: string } }> } | { __typename: 'MinMaxDepositPolicy', id: string, minDepositAmount: string, maxDepositAmount: string, policyType: PolicyType } | { __typename: 'OnlyRemoveDustExternalPositionPolicy', id: string, policyType: PolicyType } | { __typename: 'OnlyUntrackDustOrPricelessAssetsPolicy', id: string, policyType: PolicyType } | { __typename: 'UnknownPolicy', id: string, policyType: PolicyType }> } };

export type VaultListQueryVariables = Exact<{ [key: string]: never; }>;


export type VaultListQuery = { __typename: 'Query', vaults: Array<{ __typename: 'Vault', id: string, name: string, symbol: string, owner: { __typename: 'Account', id: string }, comptroller: { __typename: 'Comptroller', id: string, denomination: { __typename: 'Asset', id: string, name: string, symbol: string }, fees: Array<{ __typename: 'EntranceRateBurnFee', id: string, feeType: FeeType, rate: string } | { __typename: 'EntranceRateDirectFee', id: string, feeType: FeeType, rate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'ExitRateBurnFee', feeType: FeeType, id: string, inKindRate: string, specificAssetsRate: string } | { __typename: 'ExitRateDirectFee', id: string, feeType: FeeType, inKindRate: string, specificAssetsRate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'ManagementFee', feeType: FeeType, scaledPerSecondRate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'MinSharesSupplyFee', feeType: FeeType, id: string } | { __typename: 'PerformanceFee', feeType: FeeType, highWaterMark: string, rate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'UnknownFee', id: string, feeType: FeeType }>, policies: Array<{ __typename: 'AdapterBlacklistPolicy', id: string, policyType: PolicyType } | { __typename: 'AdapterWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'AllowedAdapterIncomingAssetsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedAdaptersPerManagerPolicy', id: string, policyType: PolicyType, userAddressLists: Array<{ __typename: 'UserAddressList', id: string, userAddress: string, addressLists: Array<{ __typename: 'AddressList', items: Array<string>, id: string }> }> } | { __typename: 'AllowedAdaptersPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', items: Array<string>, id: string }> } | { __typename: 'AllowedAssetsForRedemptionPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedDepositRecipientsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedExternalPositionTypesPerManagerPolicy', id: string, policyType: PolicyType, userUintLists: Array<{ __typename: 'UserUintList', id: string, userAddress: string, uintLists: Array<{ __typename: 'UintList', id: string, items: Array<string> }> }> } | { __typename: 'AllowedExternalPositionTypesPolicy', id: string, policyType: PolicyType, externalPositionTypes: Array<string> } | { __typename: 'AllowedSharesTransferRecipientsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AssetBlacklistPolicy', id: string, policyType: PolicyType } | { __typename: 'AssetWhitelistPolicy', policyType: PolicyType, id: string } | { __typename: 'BuySharesCallerWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'CumulativeSlippageTolerancePolicy', id: string, cumulativeSlippage: string, lastSlippageTimestamp: number, policyType: PolicyType, tolerance: string } | { __typename: 'DepositorWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'GuaranteedRedemptionPolicy', policyType: PolicyType, id: string } | { __typename: 'MaxConcentrationPolicy', id: string, policyType: PolicyType } | { __typename: 'MinAssetBalancesPostRedemptionPolicy', id: string, policyType: PolicyType, assetBalances: Array<{ __typename: 'AssetBalance', id: string, amount: string, asset: { __typename: 'Asset', name: string, id: string, symbol: string } }> } | { __typename: 'MinMaxDepositPolicy', id: string, minDepositAmount: string, maxDepositAmount: string, policyType: PolicyType } | { __typename: 'OnlyRemoveDustExternalPositionPolicy', id: string, policyType: PolicyType } | { __typename: 'OnlyUntrackDustOrPricelessAssetsPolicy', id: string, policyType: PolicyType } | { __typename: 'UnknownPolicy', id: string, policyType: PolicyType }> } }> };

export type VaultDetailsQueryVariables = Exact<{
  id: Scalars['ID'];
}>;


export type VaultDetailsQuery = { __typename: 'Query', vault?: { __typename: 'Vault', id: string, name: string, symbol: string, owner: { __typename: 'Account', id: string }, comptroller: { __typename: 'Comptroller', id: string, denomination: { __typename: 'Asset', id: string, name: string, symbol: string }, fees: Array<{ __typename: 'EntranceRateBurnFee', id: string, feeType: FeeType, rate: string } | { __typename: 'EntranceRateDirectFee', id: string, feeType: FeeType, rate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'ExitRateBurnFee', feeType: FeeType, id: string, inKindRate: string, specificAssetsRate: string } | { __typename: 'ExitRateDirectFee', id: string, feeType: FeeType, inKindRate: string, specificAssetsRate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'ManagementFee', feeType: FeeType, scaledPerSecondRate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'MinSharesSupplyFee', feeType: FeeType, id: string } | { __typename: 'PerformanceFee', feeType: FeeType, highWaterMark: string, rate: string, recipient?: { __typename: 'Account', id: string } | null } | { __typename: 'UnknownFee', id: string, feeType: FeeType }>, policies: Array<{ __typename: 'AdapterBlacklistPolicy', id: string, policyType: PolicyType } | { __typename: 'AdapterWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'AllowedAdapterIncomingAssetsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedAdaptersPerManagerPolicy', id: string, policyType: PolicyType, userAddressLists: Array<{ __typename: 'UserAddressList', id: string, userAddress: string, addressLists: Array<{ __typename: 'AddressList', items: Array<string>, id: string }> }> } | { __typename: 'AllowedAdaptersPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', items: Array<string>, id: string }> } | { __typename: 'AllowedAssetsForRedemptionPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedDepositRecipientsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AllowedExternalPositionTypesPerManagerPolicy', id: string, policyType: PolicyType, userUintLists: Array<{ __typename: 'UserUintList', id: string, userAddress: string, uintLists: Array<{ __typename: 'UintList', id: string, items: Array<string> }> }> } | { __typename: 'AllowedExternalPositionTypesPolicy', id: string, policyType: PolicyType, externalPositionTypes: Array<string> } | { __typename: 'AllowedSharesTransferRecipientsPolicy', id: string, policyType: PolicyType, addressLists: Array<{ __typename: 'AddressList', id: string, items: Array<string> }> } | { __typename: 'AssetBlacklistPolicy', id: string, policyType: PolicyType } | { __typename: 'AssetWhitelistPolicy', policyType: PolicyType, id: string } | { __typename: 'BuySharesCallerWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'CumulativeSlippageTolerancePolicy', id: string, cumulativeSlippage: string, lastSlippageTimestamp: number, policyType: PolicyType, tolerance: string } | { __typename: 'DepositorWhitelistPolicy', id: string, policyType: PolicyType } | { __typename: 'GuaranteedRedemptionPolicy', policyType: PolicyType, id: string } | { __typename: 'MaxConcentrationPolicy', id: string, policyType: PolicyType } | { __typename: 'MinAssetBalancesPostRedemptionPolicy', id: string, policyType: PolicyType, assetBalances: Array<{ __typename: 'AssetBalance', id: string, amount: string, asset: { __typename: 'Asset', name: string, id: string, symbol: string } }> } | { __typename: 'MinMaxDepositPolicy', id: string, minDepositAmount: string, maxDepositAmount: string, policyType: PolicyType } | { __typename: 'OnlyRemoveDustExternalPositionPolicy', id: string, policyType: PolicyType } | { __typename: 'OnlyUntrackDustOrPricelessAssetsPolicy', id: string, policyType: PolicyType } | { __typename: 'UnknownPolicy', id: string, policyType: PolicyType }> } } | null };

export const VaultFragmentDoc = gql`
    fragment Vault on Vault {
  id
  name
  symbol
  owner {
    id
  }
  comptroller {
    id
    denomination {
      id
      name
      symbol
    }
    fees {
      ... on EntranceRateBurnFee {
        id
        feeType
        rate
      }
      ... on EntranceRateDirectFee {
        id
        feeType
        rate
        recipient {
          id
        }
      }
      ... on ExitRateBurnFee {
        feeType
        id
        inKindRate
        specificAssetsRate
      }
      ... on ExitRateDirectFee {
        id
        feeType
        recipient {
          id
        }
        inKindRate
        specificAssetsRate
      }
      ... on ManagementFee {
        feeType
        recipient {
          id
        }
        scaledPerSecondRate
      }
      ... on MinSharesSupplyFee {
        feeType
        id
      }
      ... on PerformanceFee {
        feeType
        highWaterMark
        rate
        recipient {
          id
        }
      }
      ... on UnknownFee {
        id
        feeType
      }
    }
    policies {
      ... on AllowedAdapterIncomingAssetsPolicy {
        id
        policyType
        addressLists {
          id
          items
        }
      }
      ... on AllowedAdaptersPerManagerPolicy {
        id
        policyType
        userAddressLists {
          id
          addressLists {
            items
            id
          }
          userAddress
        }
      }
      ... on AllowedAdaptersPolicy {
        id
        policyType
        addressLists {
          items
          id
        }
      }
      ... on AllowedAssetsForRedemptionPolicy {
        addressLists {
          id
          items
        }
        id
        policyType
      }
      ... on AllowedDepositRecipientsPolicy {
        id
        policyType
        addressLists {
          id
          items
        }
      }
      ... on AllowedExternalPositionTypesPerManagerPolicy {
        id
        userUintLists {
          id
          userAddress
          uintLists {
            id
            items
          }
        }
        policyType
      }
      ... on AllowedExternalPositionTypesPolicy {
        id
        policyType
        externalPositionTypes
      }
      ... on AllowedSharesTransferRecipientsPolicy {
        addressLists {
          id
          items
        }
        id
        policyType
      }
      ... on CumulativeSlippageTolerancePolicy {
        id
        cumulativeSlippage
        lastSlippageTimestamp
        policyType
        tolerance
      }
      ... on MinAssetBalancesPostRedemptionPolicy {
        id
        assetBalances {
          asset {
            name
            id
            symbol
          }
          id
          amount
        }
        policyType
      }
      ... on MinMaxDepositPolicy {
        id
        minDepositAmount
        maxDepositAmount
        policyType
      }
      ... on OnlyRemoveDustExternalPositionPolicy {
        id
        policyType
      }
      ... on OnlyUntrackDustOrPricelessAssetsPolicy {
        id
        policyType
      }
      ... on UnknownPolicy {
        id
        policyType
      }
      ... on AdapterBlacklistPolicy {
        id
        policyType
      }
      ... on AdapterWhitelistPolicy {
        id
        policyType
      }
      ... on AssetBlacklistPolicy {
        id
        policyType
      }
      ... on AssetWhitelistPolicy {
        policyType
      }
      ... on AssetWhitelistPolicy {
        id
      }
      ... on BuySharesCallerWhitelistPolicy {
        id
        policyType
      }
      ... on DepositorWhitelistPolicy {
        id
        policyType
      }
      ... on GuaranteedRedemptionPolicy {
        policyType
      }
      ... on GuaranteedRedemptionPolicy {
        id
      }
      ... on MaxConcentrationPolicy {
        id
        policyType
      }
    }
  }
}
    `;
export const VaultListDocument = gql`
    query VaultList {
  vaults {
    ...Vault
  }
}
    ${VaultFragmentDoc}`;
export const VaultDetailsDocument = gql`
    query VaultDetails($id: ID!) {
  vault(id: $id) {
    ...Vault
  }
}
    ${VaultFragmentDoc}`;

export type SdkFunctionWrapper = <T>(action: (requestHeaders?:Record<string, string>) => Promise<T>, operationName: string, operationType?: string) => Promise<T>;


const defaultWrapper: SdkFunctionWrapper = (action, _operationName, _operationType) => action();

export function getSdk(client: GraphQLClient, withWrapper: SdkFunctionWrapper = defaultWrapper) {
  return {
    VaultList(variables?: VaultListQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<VaultListQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<VaultListQuery>(VaultListDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'VaultList', 'query');
    },
    VaultDetails(variables: VaultDetailsQueryVariables, requestHeaders?: Dom.RequestInit["headers"]): Promise<VaultDetailsQuery> {
      return withWrapper((wrappedRequestHeaders) => client.request<VaultDetailsQuery>(VaultDetailsDocument, variables, {...requestHeaders, ...wrappedRequestHeaders}), 'VaultDetails', 'query');
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;